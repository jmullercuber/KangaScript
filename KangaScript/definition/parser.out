shift/reduce conflict in state 2 resolved as shift.
shift/reduce conflict in state 2 resolved as shift.
shift/reduce conflict in state 2 resolved as shift.
shift/reduce conflict in state 2 resolved as shift.
shift/reduce conflict in state 2 resolved as shift.
shift/reduce conflict in state 2 resolved as shift.
shift/reduce conflict in state 2 resolved as shift.
shift/reduce conflict in state 2 resolved as shift.
shift/reduce conflict in state 2 resolved as shift.
shift/reduce conflict in state 2 resolved as shift.
shift/reduce conflict in state 2 resolved as shift.
shift/reduce conflict in state 2 resolved as shift.
shift/reduce conflict in state 2 resolved as shift.
shift/reduce conflict in state 2 resolved as shift.
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
reduce/reduce conflict in state 17 resolved using rule 8 (function_definition -> function_anonymous .).
shift/reduce conflict in state 19 resolved as shift.
shift/reduce conflict in state 50 resolved as shift.
shift/reduce conflict in state 55 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 68 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.
shift/reduce conflict in state 136 resolved as shift.


Unused terminals:

   RIGHT_ARROW

Grammar

Rule 1     ks -> element ks
Rule 2     ks -> epsilon
Rule 3     element -> function_definition
Rule 4     element -> statement_compound
Rule 5     element -> statement_simple
Rule 6     epsilon -> <empty>
Rule 7     function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION
Rule 8     function_definition -> function_anonymous
Rule 9     function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION
Rule 10    parameters -> LEFT_PAREN param_list RIGHT_PAREN
Rule 11    param_list -> epsilon
Rule 12    param_list -> IDENTIFIER
Rule 13    param_list -> IDENTIFIER COMMA param_list
Rule 14    statement_compound -> stmt_c_for
Rule 15    statement_compound -> stmt_c_while
Rule 16    statement_compound -> stmt_c_if_group ENDIF
Rule 17    stmt_c_if_group -> stmt_c_if_F
Rule 18    stmt_c_if_group -> stmt_c_if_FO
Rule 19    stmt_c_if_group -> stmt_c_if_FE
Rule 20    stmt_c_if_group -> stmt_c_if_FEO
Rule 21    stmt_c_if_F -> stmt_c_if
Rule 22    stmt_c_if_FO -> stmt_c_if stmt_c_otherwise
Rule 23    stmt_c_if_FE -> stmt_c_if stmt_c_elif_block
Rule 24    stmt_c_if_FEO -> stmt_c_if stmt_c_elif_block stmt_c_otherwise
Rule 25    stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR
Rule 26    stmt_c_while -> WHILE expression COLON ks ENDWHILE
Rule 27    stmt_c_if -> IF expression COLON ks
Rule 28    stmt_c_otherwise -> OTHERWISE COLON ks
Rule 29    stmt_c_elif_block -> stmt_c_elif
Rule 30    stmt_c_elif_block -> stmt_c_elif stmt_c_elif_block
Rule 31    stmt_c_elif -> ELIF expression COLON ks
Rule 32    statement_simple -> stmt_s_control_flow
Rule 33    statement_simple -> stmt_s_import
Rule 34    statement_simple -> stmt_s_expression
Rule 35    stmt_s_control_flow -> stmt_s_continue
Rule 36    stmt_s_control_flow -> stmt_s_break
Rule 37    stmt_s_control_flow -> stmt_s_pass
Rule 38    stmt_s_control_flow -> stmt_s_return
Rule 39    stmt_s_continue -> CONTINUE
Rule 40    stmt_s_break -> BREAK
Rule 41    stmt_s_pass -> PASS
Rule 42    stmt_s_return -> RETURN expression
Rule 43    stmt_s_return -> RETURN
Rule 44    stmt_s_import -> IMPORT dotted_identifier
Rule 45    dotted_identifier -> IDENTIFIER
Rule 46    dotted_identifier -> TIMES
Rule 47    dotted_identifier -> IDENTIFIER DOT dotted_identifier
Rule 48    stmt_s_expression -> expression
Rule 49    expression -> literal
Rule 50    expression -> function_anonymous
Rule 51    expression -> function_call
Rule 52    expression -> LEFT_PAREN expression RIGHT_PAREN
Rule 53    expression -> operator_unary_lhs expression
Rule 54    expression -> expression operator_rhs_array
Rule 55    expression -> expression operator_binary expression
Rule 56    expression -> IDENTIFIER
Rule 57    expression -> THIS
Rule 58    function_call -> IDENTIFIER arguments
Rule 59    arguments -> LEFT_PAREN exp_list RIGHT_PAREN
Rule 60    exp_list -> epsilon
Rule 61    exp_list -> expression
Rule 62    exp_list -> expression COMMA exp_list
Rule 63    literal -> array_literal
Rule 64    literal -> object_literal
Rule 65    literal -> BLANK
Rule 66    literal -> NULL
Rule 67    literal -> TRUE
Rule 68    literal -> FALSE
Rule 69    literal -> STRING_LITERAL
Rule 70    literal -> NUMERIC_LITERAL
Rule 71    array_literal -> LEFT_BOX exp_list RIGHT_BOX
Rule 72    array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
Rule 73    object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
Rule 74    pair_list -> epsilon
Rule 75    pair_list -> key_value_pair
Rule 76    pair_list -> key_value_pair COMMA pair_list
Rule 77    key_value_pair -> IDENTIFIER COLON expression
Rule 78    operator_unary_lhs -> operator_unary_lhs_assignment
Rule 79    operator_unary_lhs -> operator_unary_lhs_computation
Rule 80    operator_unary_lhs_assignment -> NOT_EQUALS
Rule 81    operator_unary_lhs_computation -> NOT
Rule 82    operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX
Rule 83    array_operator_insides -> expression
Rule 84    array_operator_insides -> expression COLON expression
Rule 85    array_operator_insides -> expression COLON expression COLON expression
Rule 86    operator_binary -> operator_binary_assignment
Rule 87    operator_binary -> operator_binary_computation
Rule 88    operator_binary -> operator_binary_comparison
Rule 89    operator_binary_assignment -> ASSIGN_EQUALS
Rule 90    operator_binary_assignment -> DOT_EQUALS
Rule 91    operator_binary_assignment -> PLUS_EQUALS
Rule 92    operator_binary_assignment -> MINUS_EQUALS
Rule 93    operator_binary_assignment -> TIMES_EQUALS
Rule 94    operator_binary_assignment -> DIVIDE_EQUALS
Rule 95    operator_binary_assignment -> MODULUS_EQUALS
Rule 96    operator_binary_assignment -> EXPONENT_EQUALS
Rule 97    operator_binary_assignment -> AND_EQUALS
Rule 98    operator_binary_assignment -> OR_EQUALS
Rule 99    operator_binary_computation -> DOT
Rule 100   operator_binary_computation -> PLUS
Rule 101   operator_binary_computation -> MINUS
Rule 102   operator_binary_computation -> TIMES
Rule 103   operator_binary_computation -> DIVIDE
Rule 104   operator_binary_computation -> MODULUS
Rule 105   operator_binary_computation -> EXPONENT
Rule 106   operator_binary_computation -> AND
Rule 107   operator_binary_computation -> OR
Rule 108   operator_binary_comparison -> IN
Rule 109   operator_binary_comparison -> HAS
Rule 110   operator_binary_comparison -> EQUIVALENCE_EQUAL
Rule 111   operator_binary_comparison -> COMPARE_GT
Rule 112   operator_binary_comparison -> COMPARE_GTET
Rule 113   operator_binary_comparison -> COMPARE_LT
Rule 114   operator_binary_comparison -> COMPARE_LTET

Terminals, with rules where they appear

AND                  : 106
AND_EQUALS           : 97
ASSIGN_EQUALS        : 89
BLANK                : 65
BREAK                : 40
COLON                : 7 9 25 26 27 28 31 77 84 85 85
COMMA                : 13 62 76
COMPARE_GT           : 111
COMPARE_GTET         : 112
COMPARE_LT           : 113
COMPARE_LTET         : 114
CONTINUE             : 39
DIVIDE               : 103
DIVIDE_EQUALS        : 94
DOT                  : 47 99
DOT_EQUALS           : 90
ELIF                 : 31
ENDFOR               : 25
ENDFUNCTION          : 7 9
ENDIF                : 16
ENDWHILE             : 26
EQUIVALENCE_EQUAL    : 110
EXPONENT             : 105
EXPONENT_EQUALS      : 96
FALSE                : 68
FOR                  : 25 72
FUNCTION             : 7 9
HAS                  : 109
IDENTIFIER           : 7 12 13 25 45 47 56 58 72 77
IF                   : 27
IMPORT               : 44
IN                   : 25 72 108
LEFT_BOX             : 71 72 82
LEFT_CURLY_BRACE     : 73
LEFT_PAREN           : 10 52 59
MINUS                : 101
MINUS_EQUALS         : 92
MODULUS              : 104
MODULUS_EQUALS       : 95
NOT                  : 81
NOT_EQUALS           : 80
NULL                 : 66
NUMERIC_LITERAL      : 70
OR                   : 107
OR_EQUALS            : 98
OTHERWISE            : 28
PASS                 : 41
PLUS                 : 100
PLUS_EQUALS          : 91
RETURN               : 42 43
RIGHT_ARROW          : 
RIGHT_BOX            : 71 72 82
RIGHT_CURLY_BRACE    : 73
RIGHT_PAREN          : 10 52 59
STRING_LITERAL       : 69
THIS                 : 57
TIMES                : 46 102
TIMES_EQUALS         : 93
TRUE                 : 67
WHILE                : 26
error                : 

Nonterminals, with rules where they appear

arguments            : 58
array_literal        : 63
array_operator_insides : 82
dotted_identifier    : 44 47
element              : 1
epsilon              : 2 11 60 74
exp_list             : 59 62 71
expression           : 25 26 27 31 42 48 52 53 54 55 55 61 62 72 72 77 83 84 84 85 85 85
function_anonymous   : 8 50
function_call        : 51
function_definition  : 3
key_value_pair       : 75 76
ks                   : 1 7 9 25 26 27 28 31 0
literal              : 49
object_literal       : 64
operator_binary      : 55
operator_binary_assignment : 86
operator_binary_comparison : 88
operator_binary_computation : 87
operator_rhs_array   : 54
operator_unary_lhs   : 53
operator_unary_lhs_assignment : 78
operator_unary_lhs_computation : 79
pair_list            : 73 76
param_list           : 10 13
parameters           : 7 9
statement_compound   : 4
statement_simple     : 5
stmt_c_elif          : 29 30
stmt_c_elif_block    : 23 24 30
stmt_c_for           : 14
stmt_c_if            : 21 22 23 24
stmt_c_if_F          : 17
stmt_c_if_FE         : 19
stmt_c_if_FEO        : 20
stmt_c_if_FO         : 18
stmt_c_if_group      : 16
stmt_c_otherwise     : 22 24
stmt_c_while         : 15
stmt_s_break         : 36
stmt_s_continue      : 35
stmt_s_control_flow  : 32
stmt_s_expression    : 34
stmt_s_import        : 33
stmt_s_pass          : 37
stmt_s_return        : 38


Parsing method: LALR


state 0

    (0) S' -> . ks
    (1) ks -> . element ks
    (2) ks -> . epsilon
    (3) element -> . function_definition
    (4) element -> . statement_compound
    (5) element -> . statement_simple
    (6) epsilon -> .
    (7) function_definition -> . FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (14) statement_compound -> . stmt_c_for
    (15) statement_compound -> . stmt_c_while
    (16) statement_compound -> . stmt_c_if_group ENDIF
    (32) statement_simple -> . stmt_s_control_flow
    (33) statement_simple -> . stmt_s_import
    (34) statement_simple -> . stmt_s_expression
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (25) stmt_c_for -> . FOR IDENTIFIER IN expression COLON ks ENDFOR
    (26) stmt_c_while -> . WHILE expression COLON ks ENDWHILE
    (17) stmt_c_if_group -> . stmt_c_if_F
    (18) stmt_c_if_group -> . stmt_c_if_FO
    (19) stmt_c_if_group -> . stmt_c_if_FE
    (20) stmt_c_if_group -> . stmt_c_if_FEO
    (35) stmt_s_control_flow -> . stmt_s_continue
    (36) stmt_s_control_flow -> . stmt_s_break
    (37) stmt_s_control_flow -> . stmt_s_pass
    (38) stmt_s_control_flow -> . stmt_s_return
    (44) stmt_s_import -> . IMPORT dotted_identifier
    (48) stmt_s_expression -> . expression
    (21) stmt_c_if_F -> . stmt_c_if
    (22) stmt_c_if_FO -> . stmt_c_if stmt_c_otherwise
    (23) stmt_c_if_FE -> . stmt_c_if stmt_c_elif_block
    (24) stmt_c_if_FEO -> . stmt_c_if stmt_c_elif_block stmt_c_otherwise
    (39) stmt_s_continue -> . CONTINUE
    (40) stmt_s_break -> . BREAK
    (41) stmt_s_pass -> . PASS
    (42) stmt_s_return -> . RETURN expression
    (43) stmt_s_return -> . RETURN
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (27) stmt_c_if -> . IF expression COLON ks
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    $end            reduce using rule 6 (epsilon -> .)
    FUNCTION        shift and go to state 20
    FOR             shift and go to state 22
    WHILE           shift and go to state 7
    IMPORT          shift and go to state 18
    CONTINUE        shift and go to state 47
    BREAK           shift and go to state 13
    PASS            shift and go to state 9
    RETURN          shift and go to state 2
    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    IF              shift and go to state 35
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    stmt_c_for                     shift and go to state 1
    stmt_c_while                   shift and go to state 4
    stmt_s_return                  shift and go to state 5
    stmt_c_if_group                shift and go to state 6
    operator_unary_lhs_assignment  shift and go to state 8
    stmt_s_control_flow            shift and go to state 12
    operator_unary_lhs_computation shift and go to state 43
    stmt_s_import                  shift and go to state 14
    literal                        shift and go to state 16
    function_anonymous             shift and go to state 17
    stmt_s_continue                shift and go to state 24
    epsilon                        shift and go to state 23
    stmt_s_pass                    shift and go to state 21
    stmt_c_if_FEO                  shift and go to state 25
    operator_unary_lhs             shift and go to state 26
    array_literal                  shift and go to state 27
    stmt_c_if                      shift and go to state 28
    function_call                  shift and go to state 29
    stmt_c_if_FE                   shift and go to state 30
    statement_compound             shift and go to state 32
    stmt_c_if_FO                   shift and go to state 33
    stmt_s_expression              shift and go to state 36
    function_definition            shift and go to state 37
    statement_simple               shift and go to state 38
    expression                     shift and go to state 50
    object_literal                 shift and go to state 42
    element                        shift and go to state 44
    ks                             shift and go to state 45
    stmt_s_break                   shift and go to state 40
    stmt_c_if_F                    shift and go to state 51

state 1

    (14) statement_compound -> stmt_c_for .

    FUNCTION        reduce using rule 14 (statement_compound -> stmt_c_for .)
    FOR             reduce using rule 14 (statement_compound -> stmt_c_for .)
    WHILE           reduce using rule 14 (statement_compound -> stmt_c_for .)
    IMPORT          reduce using rule 14 (statement_compound -> stmt_c_for .)
    CONTINUE        reduce using rule 14 (statement_compound -> stmt_c_for .)
    BREAK           reduce using rule 14 (statement_compound -> stmt_c_for .)
    PASS            reduce using rule 14 (statement_compound -> stmt_c_for .)
    RETURN          reduce using rule 14 (statement_compound -> stmt_c_for .)
    LEFT_PAREN      reduce using rule 14 (statement_compound -> stmt_c_for .)
    IDENTIFIER      reduce using rule 14 (statement_compound -> stmt_c_for .)
    THIS            reduce using rule 14 (statement_compound -> stmt_c_for .)
    IF              reduce using rule 14 (statement_compound -> stmt_c_for .)
    BLANK           reduce using rule 14 (statement_compound -> stmt_c_for .)
    NULL            reduce using rule 14 (statement_compound -> stmt_c_for .)
    TRUE            reduce using rule 14 (statement_compound -> stmt_c_for .)
    FALSE           reduce using rule 14 (statement_compound -> stmt_c_for .)
    STRING_LITERAL  reduce using rule 14 (statement_compound -> stmt_c_for .)
    NUMERIC_LITERAL reduce using rule 14 (statement_compound -> stmt_c_for .)
    LEFT_BOX        reduce using rule 14 (statement_compound -> stmt_c_for .)
    LEFT_CURLY_BRACE reduce using rule 14 (statement_compound -> stmt_c_for .)
    NOT_EQUALS      reduce using rule 14 (statement_compound -> stmt_c_for .)
    NOT             reduce using rule 14 (statement_compound -> stmt_c_for .)
    ENDWHILE        reduce using rule 14 (statement_compound -> stmt_c_for .)
    OTHERWISE       reduce using rule 14 (statement_compound -> stmt_c_for .)
    ELIF            reduce using rule 14 (statement_compound -> stmt_c_for .)
    ENDIF           reduce using rule 14 (statement_compound -> stmt_c_for .)
    ENDFUNCTION     reduce using rule 14 (statement_compound -> stmt_c_for .)
    ENDFOR          reduce using rule 14 (statement_compound -> stmt_c_for .)
    $end            reduce using rule 14 (statement_compound -> stmt_c_for .)



state 2

    (42) stmt_s_return -> RETURN . expression
    (43) stmt_s_return -> RETURN .
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

  ! shift/reduce conflict for LEFT_PAREN resolved as shift.
  ! shift/reduce conflict for IDENTIFIER resolved as shift.
  ! shift/reduce conflict for THIS resolved as shift.
  ! shift/reduce conflict for BLANK resolved as shift.
  ! shift/reduce conflict for NULL resolved as shift.
  ! shift/reduce conflict for TRUE resolved as shift.
  ! shift/reduce conflict for FALSE resolved as shift.
  ! shift/reduce conflict for STRING_LITERAL resolved as shift.
  ! shift/reduce conflict for NUMERIC_LITERAL resolved as shift.
  ! shift/reduce conflict for FUNCTION resolved as shift.
  ! shift/reduce conflict for LEFT_BOX resolved as shift.
  ! shift/reduce conflict for LEFT_CURLY_BRACE resolved as shift.
  ! shift/reduce conflict for NOT_EQUALS resolved as shift.
  ! shift/reduce conflict for NOT resolved as shift.
    FOR             reduce using rule 43 (stmt_s_return -> RETURN .)
    WHILE           reduce using rule 43 (stmt_s_return -> RETURN .)
    IMPORT          reduce using rule 43 (stmt_s_return -> RETURN .)
    CONTINUE        reduce using rule 43 (stmt_s_return -> RETURN .)
    BREAK           reduce using rule 43 (stmt_s_return -> RETURN .)
    PASS            reduce using rule 43 (stmt_s_return -> RETURN .)
    RETURN          reduce using rule 43 (stmt_s_return -> RETURN .)
    IF              reduce using rule 43 (stmt_s_return -> RETURN .)
    ENDIF           reduce using rule 43 (stmt_s_return -> RETURN .)
    ENDFUNCTION     reduce using rule 43 (stmt_s_return -> RETURN .)
    $end            reduce using rule 43 (stmt_s_return -> RETURN .)
    ENDWHILE        reduce using rule 43 (stmt_s_return -> RETURN .)
    OTHERWISE       reduce using rule 43 (stmt_s_return -> RETURN .)
    ELIF            reduce using rule 43 (stmt_s_return -> RETURN .)
    ENDFOR          reduce using rule 43 (stmt_s_return -> RETURN .)
    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    FUNCTION        shift and go to state 53
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49

  ! FUNCTION        [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! LEFT_PAREN      [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! IDENTIFIER      [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! THIS            [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! BLANK           [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! NULL            [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! TRUE            [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! FALSE           [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! STRING_LITERAL  [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! NUMERIC_LITERAL [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! LEFT_BOX        [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! LEFT_CURLY_BRACE [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! NOT_EQUALS      [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! NOT             [ reduce using rule 43 (stmt_s_return -> RETURN .) ]

    operator_unary_lhs_computation shift and go to state 43
    expression                     shift and go to state 55
    array_literal                  shift and go to state 27
    function_call                  shift and go to state 29
    operator_unary_lhs             shift and go to state 26
    literal                        shift and go to state 16
    object_literal                 shift and go to state 42
    operator_unary_lhs_assignment  shift and go to state 8
    function_anonymous             shift and go to state 54

state 3

    (65) literal -> BLANK .

    LEFT_BOX        reduce using rule 65 (literal -> BLANK .)
    ASSIGN_EQUALS   reduce using rule 65 (literal -> BLANK .)
    DOT_EQUALS      reduce using rule 65 (literal -> BLANK .)
    PLUS_EQUALS     reduce using rule 65 (literal -> BLANK .)
    MINUS_EQUALS    reduce using rule 65 (literal -> BLANK .)
    TIMES_EQUALS    reduce using rule 65 (literal -> BLANK .)
    DIVIDE_EQUALS   reduce using rule 65 (literal -> BLANK .)
    MODULUS_EQUALS  reduce using rule 65 (literal -> BLANK .)
    EXPONENT_EQUALS reduce using rule 65 (literal -> BLANK .)
    AND_EQUALS      reduce using rule 65 (literal -> BLANK .)
    OR_EQUALS       reduce using rule 65 (literal -> BLANK .)
    DOT             reduce using rule 65 (literal -> BLANK .)
    PLUS            reduce using rule 65 (literal -> BLANK .)
    MINUS           reduce using rule 65 (literal -> BLANK .)
    TIMES           reduce using rule 65 (literal -> BLANK .)
    DIVIDE          reduce using rule 65 (literal -> BLANK .)
    MODULUS         reduce using rule 65 (literal -> BLANK .)
    EXPONENT        reduce using rule 65 (literal -> BLANK .)
    AND             reduce using rule 65 (literal -> BLANK .)
    OR              reduce using rule 65 (literal -> BLANK .)
    IN              reduce using rule 65 (literal -> BLANK .)
    HAS             reduce using rule 65 (literal -> BLANK .)
    EQUIVALENCE_EQUAL reduce using rule 65 (literal -> BLANK .)
    COMPARE_GT      reduce using rule 65 (literal -> BLANK .)
    COMPARE_GTET    reduce using rule 65 (literal -> BLANK .)
    COMPARE_LT      reduce using rule 65 (literal -> BLANK .)
    COMPARE_LTET    reduce using rule 65 (literal -> BLANK .)
    RIGHT_BOX       reduce using rule 65 (literal -> BLANK .)
    FUNCTION        reduce using rule 65 (literal -> BLANK .)
    FOR             reduce using rule 65 (literal -> BLANK .)
    WHILE           reduce using rule 65 (literal -> BLANK .)
    IMPORT          reduce using rule 65 (literal -> BLANK .)
    CONTINUE        reduce using rule 65 (literal -> BLANK .)
    BREAK           reduce using rule 65 (literal -> BLANK .)
    PASS            reduce using rule 65 (literal -> BLANK .)
    RETURN          reduce using rule 65 (literal -> BLANK .)
    LEFT_PAREN      reduce using rule 65 (literal -> BLANK .)
    IDENTIFIER      reduce using rule 65 (literal -> BLANK .)
    THIS            reduce using rule 65 (literal -> BLANK .)
    IF              reduce using rule 65 (literal -> BLANK .)
    BLANK           reduce using rule 65 (literal -> BLANK .)
    NULL            reduce using rule 65 (literal -> BLANK .)
    TRUE            reduce using rule 65 (literal -> BLANK .)
    FALSE           reduce using rule 65 (literal -> BLANK .)
    STRING_LITERAL  reduce using rule 65 (literal -> BLANK .)
    NUMERIC_LITERAL reduce using rule 65 (literal -> BLANK .)
    LEFT_CURLY_BRACE reduce using rule 65 (literal -> BLANK .)
    NOT_EQUALS      reduce using rule 65 (literal -> BLANK .)
    NOT             reduce using rule 65 (literal -> BLANK .)
    $end            reduce using rule 65 (literal -> BLANK .)
    COMMA           reduce using rule 65 (literal -> BLANK .)
    ENDWHILE        reduce using rule 65 (literal -> BLANK .)
    ENDIF           reduce using rule 65 (literal -> BLANK .)
    RIGHT_PAREN     reduce using rule 65 (literal -> BLANK .)
    ENDFUNCTION     reduce using rule 65 (literal -> BLANK .)
    OTHERWISE       reduce using rule 65 (literal -> BLANK .)
    ELIF            reduce using rule 65 (literal -> BLANK .)
    ENDFOR          reduce using rule 65 (literal -> BLANK .)
    COLON           reduce using rule 65 (literal -> BLANK .)
    RIGHT_CURLY_BRACE reduce using rule 65 (literal -> BLANK .)



state 4

    (15) statement_compound -> stmt_c_while .

    FUNCTION        reduce using rule 15 (statement_compound -> stmt_c_while .)
    FOR             reduce using rule 15 (statement_compound -> stmt_c_while .)
    WHILE           reduce using rule 15 (statement_compound -> stmt_c_while .)
    IMPORT          reduce using rule 15 (statement_compound -> stmt_c_while .)
    CONTINUE        reduce using rule 15 (statement_compound -> stmt_c_while .)
    BREAK           reduce using rule 15 (statement_compound -> stmt_c_while .)
    PASS            reduce using rule 15 (statement_compound -> stmt_c_while .)
    RETURN          reduce using rule 15 (statement_compound -> stmt_c_while .)
    LEFT_PAREN      reduce using rule 15 (statement_compound -> stmt_c_while .)
    IDENTIFIER      reduce using rule 15 (statement_compound -> stmt_c_while .)
    THIS            reduce using rule 15 (statement_compound -> stmt_c_while .)
    IF              reduce using rule 15 (statement_compound -> stmt_c_while .)
    BLANK           reduce using rule 15 (statement_compound -> stmt_c_while .)
    NULL            reduce using rule 15 (statement_compound -> stmt_c_while .)
    TRUE            reduce using rule 15 (statement_compound -> stmt_c_while .)
    FALSE           reduce using rule 15 (statement_compound -> stmt_c_while .)
    STRING_LITERAL  reduce using rule 15 (statement_compound -> stmt_c_while .)
    NUMERIC_LITERAL reduce using rule 15 (statement_compound -> stmt_c_while .)
    LEFT_BOX        reduce using rule 15 (statement_compound -> stmt_c_while .)
    LEFT_CURLY_BRACE reduce using rule 15 (statement_compound -> stmt_c_while .)
    NOT_EQUALS      reduce using rule 15 (statement_compound -> stmt_c_while .)
    NOT             reduce using rule 15 (statement_compound -> stmt_c_while .)
    ENDWHILE        reduce using rule 15 (statement_compound -> stmt_c_while .)
    OTHERWISE       reduce using rule 15 (statement_compound -> stmt_c_while .)
    ELIF            reduce using rule 15 (statement_compound -> stmt_c_while .)
    ENDIF           reduce using rule 15 (statement_compound -> stmt_c_while .)
    ENDFUNCTION     reduce using rule 15 (statement_compound -> stmt_c_while .)
    ENDFOR          reduce using rule 15 (statement_compound -> stmt_c_while .)
    $end            reduce using rule 15 (statement_compound -> stmt_c_while .)



state 5

    (38) stmt_s_control_flow -> stmt_s_return .

    FUNCTION        reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    FOR             reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    WHILE           reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    IMPORT          reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    CONTINUE        reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    BREAK           reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    PASS            reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    RETURN          reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    LEFT_PAREN      reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    IDENTIFIER      reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    THIS            reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    IF              reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    BLANK           reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    NULL            reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    TRUE            reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    FALSE           reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    STRING_LITERAL  reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    NUMERIC_LITERAL reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    LEFT_BOX        reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    LEFT_CURLY_BRACE reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    NOT_EQUALS      reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    NOT             reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    ENDFUNCTION     reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    ENDWHILE        reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    ENDFOR          reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    OTHERWISE       reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    ELIF            reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    ENDIF           reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    $end            reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)



state 6

    (16) statement_compound -> stmt_c_if_group . ENDIF

    ENDIF           shift and go to state 56



state 7

    (26) stmt_c_while -> WHILE . expression COLON ks ENDWHILE
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    FUNCTION        shift and go to state 53
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    operator_unary_lhs_computation shift and go to state 43
    array_literal                  shift and go to state 27
    function_call                  shift and go to state 29
    operator_unary_lhs             shift and go to state 26
    literal                        shift and go to state 16
    object_literal                 shift and go to state 42
    operator_unary_lhs_assignment  shift and go to state 8
    function_anonymous             shift and go to state 54
    expression                     shift and go to state 57

state 8

    (78) operator_unary_lhs -> operator_unary_lhs_assignment .

    LEFT_PAREN      reduce using rule 78 (operator_unary_lhs -> operator_unary_lhs_assignment .)
    IDENTIFIER      reduce using rule 78 (operator_unary_lhs -> operator_unary_lhs_assignment .)
    THIS            reduce using rule 78 (operator_unary_lhs -> operator_unary_lhs_assignment .)
    BLANK           reduce using rule 78 (operator_unary_lhs -> operator_unary_lhs_assignment .)
    NULL            reduce using rule 78 (operator_unary_lhs -> operator_unary_lhs_assignment .)
    TRUE            reduce using rule 78 (operator_unary_lhs -> operator_unary_lhs_assignment .)
    FALSE           reduce using rule 78 (operator_unary_lhs -> operator_unary_lhs_assignment .)
    STRING_LITERAL  reduce using rule 78 (operator_unary_lhs -> operator_unary_lhs_assignment .)
    NUMERIC_LITERAL reduce using rule 78 (operator_unary_lhs -> operator_unary_lhs_assignment .)
    FUNCTION        reduce using rule 78 (operator_unary_lhs -> operator_unary_lhs_assignment .)
    LEFT_BOX        reduce using rule 78 (operator_unary_lhs -> operator_unary_lhs_assignment .)
    LEFT_CURLY_BRACE reduce using rule 78 (operator_unary_lhs -> operator_unary_lhs_assignment .)
    NOT_EQUALS      reduce using rule 78 (operator_unary_lhs -> operator_unary_lhs_assignment .)
    NOT             reduce using rule 78 (operator_unary_lhs -> operator_unary_lhs_assignment .)



state 9

    (41) stmt_s_pass -> PASS .

    FUNCTION        reduce using rule 41 (stmt_s_pass -> PASS .)
    FOR             reduce using rule 41 (stmt_s_pass -> PASS .)
    WHILE           reduce using rule 41 (stmt_s_pass -> PASS .)
    IMPORT          reduce using rule 41 (stmt_s_pass -> PASS .)
    CONTINUE        reduce using rule 41 (stmt_s_pass -> PASS .)
    BREAK           reduce using rule 41 (stmt_s_pass -> PASS .)
    PASS            reduce using rule 41 (stmt_s_pass -> PASS .)
    RETURN          reduce using rule 41 (stmt_s_pass -> PASS .)
    LEFT_PAREN      reduce using rule 41 (stmt_s_pass -> PASS .)
    IDENTIFIER      reduce using rule 41 (stmt_s_pass -> PASS .)
    THIS            reduce using rule 41 (stmt_s_pass -> PASS .)
    IF              reduce using rule 41 (stmt_s_pass -> PASS .)
    BLANK           reduce using rule 41 (stmt_s_pass -> PASS .)
    NULL            reduce using rule 41 (stmt_s_pass -> PASS .)
    TRUE            reduce using rule 41 (stmt_s_pass -> PASS .)
    FALSE           reduce using rule 41 (stmt_s_pass -> PASS .)
    STRING_LITERAL  reduce using rule 41 (stmt_s_pass -> PASS .)
    NUMERIC_LITERAL reduce using rule 41 (stmt_s_pass -> PASS .)
    LEFT_BOX        reduce using rule 41 (stmt_s_pass -> PASS .)
    LEFT_CURLY_BRACE reduce using rule 41 (stmt_s_pass -> PASS .)
    NOT_EQUALS      reduce using rule 41 (stmt_s_pass -> PASS .)
    NOT             reduce using rule 41 (stmt_s_pass -> PASS .)
    ELIF            reduce using rule 41 (stmt_s_pass -> PASS .)
    OTHERWISE       reduce using rule 41 (stmt_s_pass -> PASS .)
    ENDIF           reduce using rule 41 (stmt_s_pass -> PASS .)
    $end            reduce using rule 41 (stmt_s_pass -> PASS .)
    ENDWHILE        reduce using rule 41 (stmt_s_pass -> PASS .)
    ENDFUNCTION     reduce using rule 41 (stmt_s_pass -> PASS .)
    ENDFOR          reduce using rule 41 (stmt_s_pass -> PASS .)



state 10

    (66) literal -> NULL .

    LEFT_BOX        reduce using rule 66 (literal -> NULL .)
    ASSIGN_EQUALS   reduce using rule 66 (literal -> NULL .)
    DOT_EQUALS      reduce using rule 66 (literal -> NULL .)
    PLUS_EQUALS     reduce using rule 66 (literal -> NULL .)
    MINUS_EQUALS    reduce using rule 66 (literal -> NULL .)
    TIMES_EQUALS    reduce using rule 66 (literal -> NULL .)
    DIVIDE_EQUALS   reduce using rule 66 (literal -> NULL .)
    MODULUS_EQUALS  reduce using rule 66 (literal -> NULL .)
    EXPONENT_EQUALS reduce using rule 66 (literal -> NULL .)
    AND_EQUALS      reduce using rule 66 (literal -> NULL .)
    OR_EQUALS       reduce using rule 66 (literal -> NULL .)
    DOT             reduce using rule 66 (literal -> NULL .)
    PLUS            reduce using rule 66 (literal -> NULL .)
    MINUS           reduce using rule 66 (literal -> NULL .)
    TIMES           reduce using rule 66 (literal -> NULL .)
    DIVIDE          reduce using rule 66 (literal -> NULL .)
    MODULUS         reduce using rule 66 (literal -> NULL .)
    EXPONENT        reduce using rule 66 (literal -> NULL .)
    AND             reduce using rule 66 (literal -> NULL .)
    OR              reduce using rule 66 (literal -> NULL .)
    IN              reduce using rule 66 (literal -> NULL .)
    HAS             reduce using rule 66 (literal -> NULL .)
    EQUIVALENCE_EQUAL reduce using rule 66 (literal -> NULL .)
    COMPARE_GT      reduce using rule 66 (literal -> NULL .)
    COMPARE_GTET    reduce using rule 66 (literal -> NULL .)
    COMPARE_LT      reduce using rule 66 (literal -> NULL .)
    COMPARE_LTET    reduce using rule 66 (literal -> NULL .)
    RIGHT_BOX       reduce using rule 66 (literal -> NULL .)
    FUNCTION        reduce using rule 66 (literal -> NULL .)
    FOR             reduce using rule 66 (literal -> NULL .)
    WHILE           reduce using rule 66 (literal -> NULL .)
    IMPORT          reduce using rule 66 (literal -> NULL .)
    CONTINUE        reduce using rule 66 (literal -> NULL .)
    BREAK           reduce using rule 66 (literal -> NULL .)
    PASS            reduce using rule 66 (literal -> NULL .)
    RETURN          reduce using rule 66 (literal -> NULL .)
    LEFT_PAREN      reduce using rule 66 (literal -> NULL .)
    IDENTIFIER      reduce using rule 66 (literal -> NULL .)
    THIS            reduce using rule 66 (literal -> NULL .)
    IF              reduce using rule 66 (literal -> NULL .)
    BLANK           reduce using rule 66 (literal -> NULL .)
    NULL            reduce using rule 66 (literal -> NULL .)
    TRUE            reduce using rule 66 (literal -> NULL .)
    FALSE           reduce using rule 66 (literal -> NULL .)
    STRING_LITERAL  reduce using rule 66 (literal -> NULL .)
    NUMERIC_LITERAL reduce using rule 66 (literal -> NULL .)
    LEFT_CURLY_BRACE reduce using rule 66 (literal -> NULL .)
    NOT_EQUALS      reduce using rule 66 (literal -> NULL .)
    NOT             reduce using rule 66 (literal -> NULL .)
    $end            reduce using rule 66 (literal -> NULL .)
    COMMA           reduce using rule 66 (literal -> NULL .)
    ENDWHILE        reduce using rule 66 (literal -> NULL .)
    ENDIF           reduce using rule 66 (literal -> NULL .)
    RIGHT_PAREN     reduce using rule 66 (literal -> NULL .)
    ENDFUNCTION     reduce using rule 66 (literal -> NULL .)
    OTHERWISE       reduce using rule 66 (literal -> NULL .)
    ELIF            reduce using rule 66 (literal -> NULL .)
    ENDFOR          reduce using rule 66 (literal -> NULL .)
    COLON           reduce using rule 66 (literal -> NULL .)
    RIGHT_CURLY_BRACE reduce using rule 66 (literal -> NULL .)



state 11

    (67) literal -> TRUE .

    LEFT_BOX        reduce using rule 67 (literal -> TRUE .)
    ASSIGN_EQUALS   reduce using rule 67 (literal -> TRUE .)
    DOT_EQUALS      reduce using rule 67 (literal -> TRUE .)
    PLUS_EQUALS     reduce using rule 67 (literal -> TRUE .)
    MINUS_EQUALS    reduce using rule 67 (literal -> TRUE .)
    TIMES_EQUALS    reduce using rule 67 (literal -> TRUE .)
    DIVIDE_EQUALS   reduce using rule 67 (literal -> TRUE .)
    MODULUS_EQUALS  reduce using rule 67 (literal -> TRUE .)
    EXPONENT_EQUALS reduce using rule 67 (literal -> TRUE .)
    AND_EQUALS      reduce using rule 67 (literal -> TRUE .)
    OR_EQUALS       reduce using rule 67 (literal -> TRUE .)
    DOT             reduce using rule 67 (literal -> TRUE .)
    PLUS            reduce using rule 67 (literal -> TRUE .)
    MINUS           reduce using rule 67 (literal -> TRUE .)
    TIMES           reduce using rule 67 (literal -> TRUE .)
    DIVIDE          reduce using rule 67 (literal -> TRUE .)
    MODULUS         reduce using rule 67 (literal -> TRUE .)
    EXPONENT        reduce using rule 67 (literal -> TRUE .)
    AND             reduce using rule 67 (literal -> TRUE .)
    OR              reduce using rule 67 (literal -> TRUE .)
    IN              reduce using rule 67 (literal -> TRUE .)
    HAS             reduce using rule 67 (literal -> TRUE .)
    EQUIVALENCE_EQUAL reduce using rule 67 (literal -> TRUE .)
    COMPARE_GT      reduce using rule 67 (literal -> TRUE .)
    COMPARE_GTET    reduce using rule 67 (literal -> TRUE .)
    COMPARE_LT      reduce using rule 67 (literal -> TRUE .)
    COMPARE_LTET    reduce using rule 67 (literal -> TRUE .)
    RIGHT_BOX       reduce using rule 67 (literal -> TRUE .)
    FUNCTION        reduce using rule 67 (literal -> TRUE .)
    FOR             reduce using rule 67 (literal -> TRUE .)
    WHILE           reduce using rule 67 (literal -> TRUE .)
    IMPORT          reduce using rule 67 (literal -> TRUE .)
    CONTINUE        reduce using rule 67 (literal -> TRUE .)
    BREAK           reduce using rule 67 (literal -> TRUE .)
    PASS            reduce using rule 67 (literal -> TRUE .)
    RETURN          reduce using rule 67 (literal -> TRUE .)
    LEFT_PAREN      reduce using rule 67 (literal -> TRUE .)
    IDENTIFIER      reduce using rule 67 (literal -> TRUE .)
    THIS            reduce using rule 67 (literal -> TRUE .)
    IF              reduce using rule 67 (literal -> TRUE .)
    BLANK           reduce using rule 67 (literal -> TRUE .)
    NULL            reduce using rule 67 (literal -> TRUE .)
    TRUE            reduce using rule 67 (literal -> TRUE .)
    FALSE           reduce using rule 67 (literal -> TRUE .)
    STRING_LITERAL  reduce using rule 67 (literal -> TRUE .)
    NUMERIC_LITERAL reduce using rule 67 (literal -> TRUE .)
    LEFT_CURLY_BRACE reduce using rule 67 (literal -> TRUE .)
    NOT_EQUALS      reduce using rule 67 (literal -> TRUE .)
    NOT             reduce using rule 67 (literal -> TRUE .)
    $end            reduce using rule 67 (literal -> TRUE .)
    COMMA           reduce using rule 67 (literal -> TRUE .)
    ENDWHILE        reduce using rule 67 (literal -> TRUE .)
    ENDIF           reduce using rule 67 (literal -> TRUE .)
    RIGHT_PAREN     reduce using rule 67 (literal -> TRUE .)
    ENDFUNCTION     reduce using rule 67 (literal -> TRUE .)
    OTHERWISE       reduce using rule 67 (literal -> TRUE .)
    ELIF            reduce using rule 67 (literal -> TRUE .)
    ENDFOR          reduce using rule 67 (literal -> TRUE .)
    COLON           reduce using rule 67 (literal -> TRUE .)
    RIGHT_CURLY_BRACE reduce using rule 67 (literal -> TRUE .)



state 12

    (32) statement_simple -> stmt_s_control_flow .

    FUNCTION        reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    FOR             reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    WHILE           reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    IMPORT          reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    CONTINUE        reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    BREAK           reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    PASS            reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    RETURN          reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    LEFT_PAREN      reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    IDENTIFIER      reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    THIS            reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    IF              reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    BLANK           reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    NULL            reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    TRUE            reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    FALSE           reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    STRING_LITERAL  reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    NUMERIC_LITERAL reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    LEFT_BOX        reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    LEFT_CURLY_BRACE reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    NOT_EQUALS      reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    NOT             reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    ELIF            reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    OTHERWISE       reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    ENDIF           reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    $end            reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    ENDFUNCTION     reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    ENDWHILE        reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    ENDFOR          reduce using rule 32 (statement_simple -> stmt_s_control_flow .)



state 13

    (40) stmt_s_break -> BREAK .

    FUNCTION        reduce using rule 40 (stmt_s_break -> BREAK .)
    FOR             reduce using rule 40 (stmt_s_break -> BREAK .)
    WHILE           reduce using rule 40 (stmt_s_break -> BREAK .)
    IMPORT          reduce using rule 40 (stmt_s_break -> BREAK .)
    CONTINUE        reduce using rule 40 (stmt_s_break -> BREAK .)
    BREAK           reduce using rule 40 (stmt_s_break -> BREAK .)
    PASS            reduce using rule 40 (stmt_s_break -> BREAK .)
    RETURN          reduce using rule 40 (stmt_s_break -> BREAK .)
    LEFT_PAREN      reduce using rule 40 (stmt_s_break -> BREAK .)
    IDENTIFIER      reduce using rule 40 (stmt_s_break -> BREAK .)
    THIS            reduce using rule 40 (stmt_s_break -> BREAK .)
    IF              reduce using rule 40 (stmt_s_break -> BREAK .)
    BLANK           reduce using rule 40 (stmt_s_break -> BREAK .)
    NULL            reduce using rule 40 (stmt_s_break -> BREAK .)
    TRUE            reduce using rule 40 (stmt_s_break -> BREAK .)
    FALSE           reduce using rule 40 (stmt_s_break -> BREAK .)
    STRING_LITERAL  reduce using rule 40 (stmt_s_break -> BREAK .)
    NUMERIC_LITERAL reduce using rule 40 (stmt_s_break -> BREAK .)
    LEFT_BOX        reduce using rule 40 (stmt_s_break -> BREAK .)
    LEFT_CURLY_BRACE reduce using rule 40 (stmt_s_break -> BREAK .)
    NOT_EQUALS      reduce using rule 40 (stmt_s_break -> BREAK .)
    NOT             reduce using rule 40 (stmt_s_break -> BREAK .)
    $end            reduce using rule 40 (stmt_s_break -> BREAK .)
    ENDWHILE        reduce using rule 40 (stmt_s_break -> BREAK .)
    ENDFUNCTION     reduce using rule 40 (stmt_s_break -> BREAK .)
    ENDIF           reduce using rule 40 (stmt_s_break -> BREAK .)
    OTHERWISE       reduce using rule 40 (stmt_s_break -> BREAK .)
    ELIF            reduce using rule 40 (stmt_s_break -> BREAK .)
    ENDFOR          reduce using rule 40 (stmt_s_break -> BREAK .)



state 14

    (33) statement_simple -> stmt_s_import .

    FUNCTION        reduce using rule 33 (statement_simple -> stmt_s_import .)
    FOR             reduce using rule 33 (statement_simple -> stmt_s_import .)
    WHILE           reduce using rule 33 (statement_simple -> stmt_s_import .)
    IMPORT          reduce using rule 33 (statement_simple -> stmt_s_import .)
    CONTINUE        reduce using rule 33 (statement_simple -> stmt_s_import .)
    BREAK           reduce using rule 33 (statement_simple -> stmt_s_import .)
    PASS            reduce using rule 33 (statement_simple -> stmt_s_import .)
    RETURN          reduce using rule 33 (statement_simple -> stmt_s_import .)
    LEFT_PAREN      reduce using rule 33 (statement_simple -> stmt_s_import .)
    IDENTIFIER      reduce using rule 33 (statement_simple -> stmt_s_import .)
    THIS            reduce using rule 33 (statement_simple -> stmt_s_import .)
    IF              reduce using rule 33 (statement_simple -> stmt_s_import .)
    BLANK           reduce using rule 33 (statement_simple -> stmt_s_import .)
    NULL            reduce using rule 33 (statement_simple -> stmt_s_import .)
    TRUE            reduce using rule 33 (statement_simple -> stmt_s_import .)
    FALSE           reduce using rule 33 (statement_simple -> stmt_s_import .)
    STRING_LITERAL  reduce using rule 33 (statement_simple -> stmt_s_import .)
    NUMERIC_LITERAL reduce using rule 33 (statement_simple -> stmt_s_import .)
    LEFT_BOX        reduce using rule 33 (statement_simple -> stmt_s_import .)
    LEFT_CURLY_BRACE reduce using rule 33 (statement_simple -> stmt_s_import .)
    NOT_EQUALS      reduce using rule 33 (statement_simple -> stmt_s_import .)
    NOT             reduce using rule 33 (statement_simple -> stmt_s_import .)
    ELIF            reduce using rule 33 (statement_simple -> stmt_s_import .)
    OTHERWISE       reduce using rule 33 (statement_simple -> stmt_s_import .)
    ENDIF           reduce using rule 33 (statement_simple -> stmt_s_import .)
    $end            reduce using rule 33 (statement_simple -> stmt_s_import .)
    ENDFUNCTION     reduce using rule 33 (statement_simple -> stmt_s_import .)
    ENDWHILE        reduce using rule 33 (statement_simple -> stmt_s_import .)
    ENDFOR          reduce using rule 33 (statement_simple -> stmt_s_import .)



state 15

    (52) expression -> LEFT_PAREN . expression RIGHT_PAREN
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    FUNCTION        shift and go to state 53
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    operator_unary_lhs_computation shift and go to state 43
    expression                     shift and go to state 58
    array_literal                  shift and go to state 27
    function_call                  shift and go to state 29
    operator_unary_lhs             shift and go to state 26
    literal                        shift and go to state 16
    object_literal                 shift and go to state 42
    operator_unary_lhs_assignment  shift and go to state 8
    function_anonymous             shift and go to state 54

state 16

    (49) expression -> literal .

    COLON           reduce using rule 49 (expression -> literal .)
    LEFT_BOX        reduce using rule 49 (expression -> literal .)
    ASSIGN_EQUALS   reduce using rule 49 (expression -> literal .)
    DOT_EQUALS      reduce using rule 49 (expression -> literal .)
    PLUS_EQUALS     reduce using rule 49 (expression -> literal .)
    MINUS_EQUALS    reduce using rule 49 (expression -> literal .)
    TIMES_EQUALS    reduce using rule 49 (expression -> literal .)
    DIVIDE_EQUALS   reduce using rule 49 (expression -> literal .)
    MODULUS_EQUALS  reduce using rule 49 (expression -> literal .)
    EXPONENT_EQUALS reduce using rule 49 (expression -> literal .)
    AND_EQUALS      reduce using rule 49 (expression -> literal .)
    OR_EQUALS       reduce using rule 49 (expression -> literal .)
    DOT             reduce using rule 49 (expression -> literal .)
    PLUS            reduce using rule 49 (expression -> literal .)
    MINUS           reduce using rule 49 (expression -> literal .)
    TIMES           reduce using rule 49 (expression -> literal .)
    DIVIDE          reduce using rule 49 (expression -> literal .)
    MODULUS         reduce using rule 49 (expression -> literal .)
    EXPONENT        reduce using rule 49 (expression -> literal .)
    AND             reduce using rule 49 (expression -> literal .)
    OR              reduce using rule 49 (expression -> literal .)
    IN              reduce using rule 49 (expression -> literal .)
    HAS             reduce using rule 49 (expression -> literal .)
    EQUIVALENCE_EQUAL reduce using rule 49 (expression -> literal .)
    COMPARE_GT      reduce using rule 49 (expression -> literal .)
    COMPARE_GTET    reduce using rule 49 (expression -> literal .)
    COMPARE_LT      reduce using rule 49 (expression -> literal .)
    COMPARE_LTET    reduce using rule 49 (expression -> literal .)
    FOR             reduce using rule 49 (expression -> literal .)
    COMMA           reduce using rule 49 (expression -> literal .)
    RIGHT_BOX       reduce using rule 49 (expression -> literal .)
    FUNCTION        reduce using rule 49 (expression -> literal .)
    WHILE           reduce using rule 49 (expression -> literal .)
    IMPORT          reduce using rule 49 (expression -> literal .)
    CONTINUE        reduce using rule 49 (expression -> literal .)
    BREAK           reduce using rule 49 (expression -> literal .)
    PASS            reduce using rule 49 (expression -> literal .)
    RETURN          reduce using rule 49 (expression -> literal .)
    LEFT_PAREN      reduce using rule 49 (expression -> literal .)
    IDENTIFIER      reduce using rule 49 (expression -> literal .)
    THIS            reduce using rule 49 (expression -> literal .)
    IF              reduce using rule 49 (expression -> literal .)
    BLANK           reduce using rule 49 (expression -> literal .)
    NULL            reduce using rule 49 (expression -> literal .)
    TRUE            reduce using rule 49 (expression -> literal .)
    FALSE           reduce using rule 49 (expression -> literal .)
    STRING_LITERAL  reduce using rule 49 (expression -> literal .)
    NUMERIC_LITERAL reduce using rule 49 (expression -> literal .)
    LEFT_CURLY_BRACE reduce using rule 49 (expression -> literal .)
    NOT_EQUALS      reduce using rule 49 (expression -> literal .)
    NOT             reduce using rule 49 (expression -> literal .)
    $end            reduce using rule 49 (expression -> literal .)
    ENDWHILE        reduce using rule 49 (expression -> literal .)
    ENDIF           reduce using rule 49 (expression -> literal .)
    RIGHT_PAREN     reduce using rule 49 (expression -> literal .)
    ENDFOR          reduce using rule 49 (expression -> literal .)
    ENDFUNCTION     reduce using rule 49 (expression -> literal .)
    OTHERWISE       reduce using rule 49 (expression -> literal .)
    ELIF            reduce using rule 49 (expression -> literal .)
    RIGHT_CURLY_BRACE reduce using rule 49 (expression -> literal .)



state 17

    (8) function_definition -> function_anonymous .
    (50) expression -> function_anonymous .

  ! reduce/reduce conflict for LEFT_BOX resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for FUNCTION resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for FOR resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for WHILE resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for IMPORT resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for CONTINUE resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for BREAK resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for PASS resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for RETURN resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for LEFT_PAREN resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for THIS resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for IF resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for BLANK resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for NULL resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for TRUE resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for FALSE resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for STRING_LITERAL resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for NUMERIC_LITERAL resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for LEFT_CURLY_BRACE resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for NOT resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for $end resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for ENDWHILE resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for ENDIF resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for ENDFOR resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for ENDFUNCTION resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for OTHERWISE resolved using rule 8 (function_definition -> function_anonymous .).
  ! reduce/reduce conflict for ELIF resolved using rule 8 (function_definition -> function_anonymous .).
    FUNCTION        reduce using rule 8 (function_definition -> function_anonymous .)
    FOR             reduce using rule 8 (function_definition -> function_anonymous .)
    WHILE           reduce using rule 8 (function_definition -> function_anonymous .)
    IMPORT          reduce using rule 8 (function_definition -> function_anonymous .)
    CONTINUE        reduce using rule 8 (function_definition -> function_anonymous .)
    BREAK           reduce using rule 8 (function_definition -> function_anonymous .)
    PASS            reduce using rule 8 (function_definition -> function_anonymous .)
    RETURN          reduce using rule 8 (function_definition -> function_anonymous .)
    LEFT_PAREN      reduce using rule 8 (function_definition -> function_anonymous .)
    IDENTIFIER      reduce using rule 8 (function_definition -> function_anonymous .)
    THIS            reduce using rule 8 (function_definition -> function_anonymous .)
    IF              reduce using rule 8 (function_definition -> function_anonymous .)
    BLANK           reduce using rule 8 (function_definition -> function_anonymous .)
    NULL            reduce using rule 8 (function_definition -> function_anonymous .)
    TRUE            reduce using rule 8 (function_definition -> function_anonymous .)
    FALSE           reduce using rule 8 (function_definition -> function_anonymous .)
    STRING_LITERAL  reduce using rule 8 (function_definition -> function_anonymous .)
    NUMERIC_LITERAL reduce using rule 8 (function_definition -> function_anonymous .)
    LEFT_BOX        reduce using rule 8 (function_definition -> function_anonymous .)
    LEFT_CURLY_BRACE reduce using rule 8 (function_definition -> function_anonymous .)
    NOT_EQUALS      reduce using rule 8 (function_definition -> function_anonymous .)
    NOT             reduce using rule 8 (function_definition -> function_anonymous .)
    ENDFOR          reduce using rule 8 (function_definition -> function_anonymous .)
    OTHERWISE       reduce using rule 8 (function_definition -> function_anonymous .)
    ELIF            reduce using rule 8 (function_definition -> function_anonymous .)
    ENDIF           reduce using rule 8 (function_definition -> function_anonymous .)
    $end            reduce using rule 8 (function_definition -> function_anonymous .)
    ENDWHILE        reduce using rule 8 (function_definition -> function_anonymous .)
    ENDFUNCTION     reduce using rule 8 (function_definition -> function_anonymous .)
    ASSIGN_EQUALS   reduce using rule 50 (expression -> function_anonymous .)
    DOT_EQUALS      reduce using rule 50 (expression -> function_anonymous .)
    PLUS_EQUALS     reduce using rule 50 (expression -> function_anonymous .)
    MINUS_EQUALS    reduce using rule 50 (expression -> function_anonymous .)
    TIMES_EQUALS    reduce using rule 50 (expression -> function_anonymous .)
    DIVIDE_EQUALS   reduce using rule 50 (expression -> function_anonymous .)
    MODULUS_EQUALS  reduce using rule 50 (expression -> function_anonymous .)
    EXPONENT_EQUALS reduce using rule 50 (expression -> function_anonymous .)
    AND_EQUALS      reduce using rule 50 (expression -> function_anonymous .)
    OR_EQUALS       reduce using rule 50 (expression -> function_anonymous .)
    DOT             reduce using rule 50 (expression -> function_anonymous .)
    PLUS            reduce using rule 50 (expression -> function_anonymous .)
    MINUS           reduce using rule 50 (expression -> function_anonymous .)
    TIMES           reduce using rule 50 (expression -> function_anonymous .)
    DIVIDE          reduce using rule 50 (expression -> function_anonymous .)
    MODULUS         reduce using rule 50 (expression -> function_anonymous .)
    EXPONENT        reduce using rule 50 (expression -> function_anonymous .)
    AND             reduce using rule 50 (expression -> function_anonymous .)
    OR              reduce using rule 50 (expression -> function_anonymous .)
    IN              reduce using rule 50 (expression -> function_anonymous .)
    HAS             reduce using rule 50 (expression -> function_anonymous .)
    EQUIVALENCE_EQUAL reduce using rule 50 (expression -> function_anonymous .)
    COMPARE_GT      reduce using rule 50 (expression -> function_anonymous .)
    COMPARE_GTET    reduce using rule 50 (expression -> function_anonymous .)
    COMPARE_LT      reduce using rule 50 (expression -> function_anonymous .)
    COMPARE_LTET    reduce using rule 50 (expression -> function_anonymous .)

  ! LEFT_BOX        [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! FUNCTION        [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! FOR             [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! WHILE           [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! IMPORT          [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! CONTINUE        [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! BREAK           [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! PASS            [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! RETURN          [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! LEFT_PAREN      [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! IDENTIFIER      [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! THIS            [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! IF              [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! BLANK           [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! NULL            [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! TRUE            [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! FALSE           [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! STRING_LITERAL  [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! NUMERIC_LITERAL [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! LEFT_CURLY_BRACE [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! NOT_EQUALS      [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! NOT             [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! $end            [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! ENDWHILE        [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! ENDIF           [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! ENDFOR          [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! ENDFUNCTION     [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! OTHERWISE       [ reduce using rule 50 (expression -> function_anonymous .) ]
  ! ELIF            [ reduce using rule 50 (expression -> function_anonymous .) ]


state 18

    (44) stmt_s_import -> IMPORT . dotted_identifier
    (45) dotted_identifier -> . IDENTIFIER
    (46) dotted_identifier -> . TIMES
    (47) dotted_identifier -> . IDENTIFIER DOT dotted_identifier

    IDENTIFIER      shift and go to state 59
    TIMES           shift and go to state 61


    dotted_identifier              shift and go to state 60

state 19

    (56) expression -> IDENTIFIER .
    (58) function_call -> IDENTIFIER . arguments
    (59) arguments -> . LEFT_PAREN exp_list RIGHT_PAREN

  ! shift/reduce conflict for LEFT_PAREN resolved as shift.
    COLON           reduce using rule 56 (expression -> IDENTIFIER .)
    LEFT_BOX        reduce using rule 56 (expression -> IDENTIFIER .)
    ASSIGN_EQUALS   reduce using rule 56 (expression -> IDENTIFIER .)
    DOT_EQUALS      reduce using rule 56 (expression -> IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 56 (expression -> IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 56 (expression -> IDENTIFIER .)
    TIMES_EQUALS    reduce using rule 56 (expression -> IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 56 (expression -> IDENTIFIER .)
    MODULUS_EQUALS  reduce using rule 56 (expression -> IDENTIFIER .)
    EXPONENT_EQUALS reduce using rule 56 (expression -> IDENTIFIER .)
    AND_EQUALS      reduce using rule 56 (expression -> IDENTIFIER .)
    OR_EQUALS       reduce using rule 56 (expression -> IDENTIFIER .)
    DOT             reduce using rule 56 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 56 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 56 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 56 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 56 (expression -> IDENTIFIER .)
    MODULUS         reduce using rule 56 (expression -> IDENTIFIER .)
    EXPONENT        reduce using rule 56 (expression -> IDENTIFIER .)
    AND             reduce using rule 56 (expression -> IDENTIFIER .)
    OR              reduce using rule 56 (expression -> IDENTIFIER .)
    IN              reduce using rule 56 (expression -> IDENTIFIER .)
    HAS             reduce using rule 56 (expression -> IDENTIFIER .)
    EQUIVALENCE_EQUAL reduce using rule 56 (expression -> IDENTIFIER .)
    COMPARE_GT      reduce using rule 56 (expression -> IDENTIFIER .)
    COMPARE_GTET    reduce using rule 56 (expression -> IDENTIFIER .)
    COMPARE_LT      reduce using rule 56 (expression -> IDENTIFIER .)
    COMPARE_LTET    reduce using rule 56 (expression -> IDENTIFIER .)
    FOR             reduce using rule 56 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 56 (expression -> IDENTIFIER .)
    RIGHT_BOX       reduce using rule 56 (expression -> IDENTIFIER .)
    FUNCTION        reduce using rule 56 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 56 (expression -> IDENTIFIER .)
    IMPORT          reduce using rule 56 (expression -> IDENTIFIER .)
    CONTINUE        reduce using rule 56 (expression -> IDENTIFIER .)
    BREAK           reduce using rule 56 (expression -> IDENTIFIER .)
    PASS            reduce using rule 56 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 56 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 56 (expression -> IDENTIFIER .)
    THIS            reduce using rule 56 (expression -> IDENTIFIER .)
    IF              reduce using rule 56 (expression -> IDENTIFIER .)
    BLANK           reduce using rule 56 (expression -> IDENTIFIER .)
    NULL            reduce using rule 56 (expression -> IDENTIFIER .)
    TRUE            reduce using rule 56 (expression -> IDENTIFIER .)
    FALSE           reduce using rule 56 (expression -> IDENTIFIER .)
    STRING_LITERAL  reduce using rule 56 (expression -> IDENTIFIER .)
    NUMERIC_LITERAL reduce using rule 56 (expression -> IDENTIFIER .)
    LEFT_CURLY_BRACE reduce using rule 56 (expression -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 56 (expression -> IDENTIFIER .)
    NOT             reduce using rule 56 (expression -> IDENTIFIER .)
    $end            reduce using rule 56 (expression -> IDENTIFIER .)
    ENDWHILE        reduce using rule 56 (expression -> IDENTIFIER .)
    ENDIF           reduce using rule 56 (expression -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 56 (expression -> IDENTIFIER .)
    ENDFOR          reduce using rule 56 (expression -> IDENTIFIER .)
    ENDFUNCTION     reduce using rule 56 (expression -> IDENTIFIER .)
    OTHERWISE       reduce using rule 56 (expression -> IDENTIFIER .)
    ELIF            reduce using rule 56 (expression -> IDENTIFIER .)
    RIGHT_CURLY_BRACE reduce using rule 56 (expression -> IDENTIFIER .)
    LEFT_PAREN      shift and go to state 62

  ! LEFT_PAREN      [ reduce using rule 56 (expression -> IDENTIFIER .) ]

    arguments                      shift and go to state 63

state 20

    (7) function_definition -> FUNCTION . IDENTIFIER parameters COLON ks ENDFUNCTION
    (9) function_anonymous -> FUNCTION . parameters COLON ks ENDFUNCTION
    (10) parameters -> . LEFT_PAREN param_list RIGHT_PAREN

    IDENTIFIER      shift and go to state 66
    LEFT_PAREN      shift and go to state 65


    parameters                     shift and go to state 64

state 21

    (37) stmt_s_control_flow -> stmt_s_pass .

    FUNCTION        reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    FOR             reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    WHILE           reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    IMPORT          reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    CONTINUE        reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    BREAK           reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    PASS            reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    RETURN          reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    LEFT_PAREN      reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    IDENTIFIER      reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    THIS            reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    IF              reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    BLANK           reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    NULL            reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    TRUE            reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    FALSE           reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    STRING_LITERAL  reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    NUMERIC_LITERAL reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    LEFT_BOX        reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    LEFT_CURLY_BRACE reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    NOT_EQUALS      reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    NOT             reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    ENDFUNCTION     reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    ENDWHILE        reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    ENDFOR          reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    OTHERWISE       reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    ELIF            reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    ENDIF           reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    $end            reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)



state 22

    (25) stmt_c_for -> FOR . IDENTIFIER IN expression COLON ks ENDFOR

    IDENTIFIER      shift and go to state 67



state 23

    (2) ks -> epsilon .

    ENDFOR          reduce using rule 2 (ks -> epsilon .)
    $end            reduce using rule 2 (ks -> epsilon .)
    ENDWHILE        reduce using rule 2 (ks -> epsilon .)
    ENDFUNCTION     reduce using rule 2 (ks -> epsilon .)
    ENDIF           reduce using rule 2 (ks -> epsilon .)
    OTHERWISE       reduce using rule 2 (ks -> epsilon .)
    ELIF            reduce using rule 2 (ks -> epsilon .)



state 24

    (35) stmt_s_control_flow -> stmt_s_continue .

    FUNCTION        reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    FOR             reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    WHILE           reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    IMPORT          reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    CONTINUE        reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    BREAK           reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    PASS            reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    RETURN          reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    LEFT_PAREN      reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    IDENTIFIER      reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    THIS            reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    IF              reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    BLANK           reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    NULL            reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    TRUE            reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    FALSE           reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    STRING_LITERAL  reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    NUMERIC_LITERAL reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    LEFT_BOX        reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    LEFT_CURLY_BRACE reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    NOT_EQUALS      reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    NOT             reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    ENDFUNCTION     reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    ENDWHILE        reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    ENDFOR          reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    OTHERWISE       reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    ELIF            reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    ENDIF           reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    $end            reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)



state 25

    (20) stmt_c_if_group -> stmt_c_if_FEO .

    ENDIF           reduce using rule 20 (stmt_c_if_group -> stmt_c_if_FEO .)



state 26

    (53) expression -> operator_unary_lhs . expression
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    FUNCTION        shift and go to state 53
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    operator_unary_lhs_computation shift and go to state 43
    expression                     shift and go to state 68
    array_literal                  shift and go to state 27
    function_call                  shift and go to state 29
    function_anonymous             shift and go to state 54
    literal                        shift and go to state 16
    object_literal                 shift and go to state 42
    operator_unary_lhs_assignment  shift and go to state 8
    operator_unary_lhs             shift and go to state 26

state 27

    (63) literal -> array_literal .

    LEFT_BOX        reduce using rule 63 (literal -> array_literal .)
    ASSIGN_EQUALS   reduce using rule 63 (literal -> array_literal .)
    DOT_EQUALS      reduce using rule 63 (literal -> array_literal .)
    PLUS_EQUALS     reduce using rule 63 (literal -> array_literal .)
    MINUS_EQUALS    reduce using rule 63 (literal -> array_literal .)
    TIMES_EQUALS    reduce using rule 63 (literal -> array_literal .)
    DIVIDE_EQUALS   reduce using rule 63 (literal -> array_literal .)
    MODULUS_EQUALS  reduce using rule 63 (literal -> array_literal .)
    EXPONENT_EQUALS reduce using rule 63 (literal -> array_literal .)
    AND_EQUALS      reduce using rule 63 (literal -> array_literal .)
    OR_EQUALS       reduce using rule 63 (literal -> array_literal .)
    DOT             reduce using rule 63 (literal -> array_literal .)
    PLUS            reduce using rule 63 (literal -> array_literal .)
    MINUS           reduce using rule 63 (literal -> array_literal .)
    TIMES           reduce using rule 63 (literal -> array_literal .)
    DIVIDE          reduce using rule 63 (literal -> array_literal .)
    MODULUS         reduce using rule 63 (literal -> array_literal .)
    EXPONENT        reduce using rule 63 (literal -> array_literal .)
    AND             reduce using rule 63 (literal -> array_literal .)
    OR              reduce using rule 63 (literal -> array_literal .)
    IN              reduce using rule 63 (literal -> array_literal .)
    HAS             reduce using rule 63 (literal -> array_literal .)
    EQUIVALENCE_EQUAL reduce using rule 63 (literal -> array_literal .)
    COMPARE_GT      reduce using rule 63 (literal -> array_literal .)
    COMPARE_GTET    reduce using rule 63 (literal -> array_literal .)
    COMPARE_LT      reduce using rule 63 (literal -> array_literal .)
    COMPARE_LTET    reduce using rule 63 (literal -> array_literal .)
    RIGHT_BOX       reduce using rule 63 (literal -> array_literal .)
    FUNCTION        reduce using rule 63 (literal -> array_literal .)
    FOR             reduce using rule 63 (literal -> array_literal .)
    WHILE           reduce using rule 63 (literal -> array_literal .)
    IMPORT          reduce using rule 63 (literal -> array_literal .)
    CONTINUE        reduce using rule 63 (literal -> array_literal .)
    BREAK           reduce using rule 63 (literal -> array_literal .)
    PASS            reduce using rule 63 (literal -> array_literal .)
    RETURN          reduce using rule 63 (literal -> array_literal .)
    LEFT_PAREN      reduce using rule 63 (literal -> array_literal .)
    IDENTIFIER      reduce using rule 63 (literal -> array_literal .)
    THIS            reduce using rule 63 (literal -> array_literal .)
    IF              reduce using rule 63 (literal -> array_literal .)
    BLANK           reduce using rule 63 (literal -> array_literal .)
    NULL            reduce using rule 63 (literal -> array_literal .)
    TRUE            reduce using rule 63 (literal -> array_literal .)
    FALSE           reduce using rule 63 (literal -> array_literal .)
    STRING_LITERAL  reduce using rule 63 (literal -> array_literal .)
    NUMERIC_LITERAL reduce using rule 63 (literal -> array_literal .)
    LEFT_CURLY_BRACE reduce using rule 63 (literal -> array_literal .)
    NOT_EQUALS      reduce using rule 63 (literal -> array_literal .)
    NOT             reduce using rule 63 (literal -> array_literal .)
    $end            reduce using rule 63 (literal -> array_literal .)
    COMMA           reduce using rule 63 (literal -> array_literal .)
    ENDWHILE        reduce using rule 63 (literal -> array_literal .)
    ENDIF           reduce using rule 63 (literal -> array_literal .)
    RIGHT_PAREN     reduce using rule 63 (literal -> array_literal .)
    ENDFUNCTION     reduce using rule 63 (literal -> array_literal .)
    OTHERWISE       reduce using rule 63 (literal -> array_literal .)
    ELIF            reduce using rule 63 (literal -> array_literal .)
    ENDFOR          reduce using rule 63 (literal -> array_literal .)
    COLON           reduce using rule 63 (literal -> array_literal .)
    RIGHT_CURLY_BRACE reduce using rule 63 (literal -> array_literal .)



state 28

    (21) stmt_c_if_F -> stmt_c_if .
    (22) stmt_c_if_FO -> stmt_c_if . stmt_c_otherwise
    (23) stmt_c_if_FE -> stmt_c_if . stmt_c_elif_block
    (24) stmt_c_if_FEO -> stmt_c_if . stmt_c_elif_block stmt_c_otherwise
    (28) stmt_c_otherwise -> . OTHERWISE COLON ks
    (29) stmt_c_elif_block -> . stmt_c_elif
    (30) stmt_c_elif_block -> . stmt_c_elif stmt_c_elif_block
    (31) stmt_c_elif -> . ELIF expression COLON ks

    ENDIF           reduce using rule 21 (stmt_c_if_F -> stmt_c_if .)
    OTHERWISE       shift and go to state 73
    ELIF            shift and go to state 71


    stmt_c_elif                    shift and go to state 69
    stmt_c_elif_block              shift and go to state 70
    stmt_c_otherwise               shift and go to state 72

state 29

    (51) expression -> function_call .

    COLON           reduce using rule 51 (expression -> function_call .)
    LEFT_BOX        reduce using rule 51 (expression -> function_call .)
    ASSIGN_EQUALS   reduce using rule 51 (expression -> function_call .)
    DOT_EQUALS      reduce using rule 51 (expression -> function_call .)
    PLUS_EQUALS     reduce using rule 51 (expression -> function_call .)
    MINUS_EQUALS    reduce using rule 51 (expression -> function_call .)
    TIMES_EQUALS    reduce using rule 51 (expression -> function_call .)
    DIVIDE_EQUALS   reduce using rule 51 (expression -> function_call .)
    MODULUS_EQUALS  reduce using rule 51 (expression -> function_call .)
    EXPONENT_EQUALS reduce using rule 51 (expression -> function_call .)
    AND_EQUALS      reduce using rule 51 (expression -> function_call .)
    OR_EQUALS       reduce using rule 51 (expression -> function_call .)
    DOT             reduce using rule 51 (expression -> function_call .)
    PLUS            reduce using rule 51 (expression -> function_call .)
    MINUS           reduce using rule 51 (expression -> function_call .)
    TIMES           reduce using rule 51 (expression -> function_call .)
    DIVIDE          reduce using rule 51 (expression -> function_call .)
    MODULUS         reduce using rule 51 (expression -> function_call .)
    EXPONENT        reduce using rule 51 (expression -> function_call .)
    AND             reduce using rule 51 (expression -> function_call .)
    OR              reduce using rule 51 (expression -> function_call .)
    IN              reduce using rule 51 (expression -> function_call .)
    HAS             reduce using rule 51 (expression -> function_call .)
    EQUIVALENCE_EQUAL reduce using rule 51 (expression -> function_call .)
    COMPARE_GT      reduce using rule 51 (expression -> function_call .)
    COMPARE_GTET    reduce using rule 51 (expression -> function_call .)
    COMPARE_LT      reduce using rule 51 (expression -> function_call .)
    COMPARE_LTET    reduce using rule 51 (expression -> function_call .)
    FOR             reduce using rule 51 (expression -> function_call .)
    COMMA           reduce using rule 51 (expression -> function_call .)
    RIGHT_BOX       reduce using rule 51 (expression -> function_call .)
    FUNCTION        reduce using rule 51 (expression -> function_call .)
    WHILE           reduce using rule 51 (expression -> function_call .)
    IMPORT          reduce using rule 51 (expression -> function_call .)
    CONTINUE        reduce using rule 51 (expression -> function_call .)
    BREAK           reduce using rule 51 (expression -> function_call .)
    PASS            reduce using rule 51 (expression -> function_call .)
    RETURN          reduce using rule 51 (expression -> function_call .)
    LEFT_PAREN      reduce using rule 51 (expression -> function_call .)
    IDENTIFIER      reduce using rule 51 (expression -> function_call .)
    THIS            reduce using rule 51 (expression -> function_call .)
    IF              reduce using rule 51 (expression -> function_call .)
    BLANK           reduce using rule 51 (expression -> function_call .)
    NULL            reduce using rule 51 (expression -> function_call .)
    TRUE            reduce using rule 51 (expression -> function_call .)
    FALSE           reduce using rule 51 (expression -> function_call .)
    STRING_LITERAL  reduce using rule 51 (expression -> function_call .)
    NUMERIC_LITERAL reduce using rule 51 (expression -> function_call .)
    LEFT_CURLY_BRACE reduce using rule 51 (expression -> function_call .)
    NOT_EQUALS      reduce using rule 51 (expression -> function_call .)
    NOT             reduce using rule 51 (expression -> function_call .)
    $end            reduce using rule 51 (expression -> function_call .)
    ENDWHILE        reduce using rule 51 (expression -> function_call .)
    ENDIF           reduce using rule 51 (expression -> function_call .)
    RIGHT_PAREN     reduce using rule 51 (expression -> function_call .)
    ENDFOR          reduce using rule 51 (expression -> function_call .)
    ENDFUNCTION     reduce using rule 51 (expression -> function_call .)
    OTHERWISE       reduce using rule 51 (expression -> function_call .)
    ELIF            reduce using rule 51 (expression -> function_call .)
    RIGHT_CURLY_BRACE reduce using rule 51 (expression -> function_call .)



state 30

    (19) stmt_c_if_group -> stmt_c_if_FE .

    ENDIF           reduce using rule 19 (stmt_c_if_group -> stmt_c_if_FE .)



state 31

    (68) literal -> FALSE .

    LEFT_BOX        reduce using rule 68 (literal -> FALSE .)
    ASSIGN_EQUALS   reduce using rule 68 (literal -> FALSE .)
    DOT_EQUALS      reduce using rule 68 (literal -> FALSE .)
    PLUS_EQUALS     reduce using rule 68 (literal -> FALSE .)
    MINUS_EQUALS    reduce using rule 68 (literal -> FALSE .)
    TIMES_EQUALS    reduce using rule 68 (literal -> FALSE .)
    DIVIDE_EQUALS   reduce using rule 68 (literal -> FALSE .)
    MODULUS_EQUALS  reduce using rule 68 (literal -> FALSE .)
    EXPONENT_EQUALS reduce using rule 68 (literal -> FALSE .)
    AND_EQUALS      reduce using rule 68 (literal -> FALSE .)
    OR_EQUALS       reduce using rule 68 (literal -> FALSE .)
    DOT             reduce using rule 68 (literal -> FALSE .)
    PLUS            reduce using rule 68 (literal -> FALSE .)
    MINUS           reduce using rule 68 (literal -> FALSE .)
    TIMES           reduce using rule 68 (literal -> FALSE .)
    DIVIDE          reduce using rule 68 (literal -> FALSE .)
    MODULUS         reduce using rule 68 (literal -> FALSE .)
    EXPONENT        reduce using rule 68 (literal -> FALSE .)
    AND             reduce using rule 68 (literal -> FALSE .)
    OR              reduce using rule 68 (literal -> FALSE .)
    IN              reduce using rule 68 (literal -> FALSE .)
    HAS             reduce using rule 68 (literal -> FALSE .)
    EQUIVALENCE_EQUAL reduce using rule 68 (literal -> FALSE .)
    COMPARE_GT      reduce using rule 68 (literal -> FALSE .)
    COMPARE_GTET    reduce using rule 68 (literal -> FALSE .)
    COMPARE_LT      reduce using rule 68 (literal -> FALSE .)
    COMPARE_LTET    reduce using rule 68 (literal -> FALSE .)
    RIGHT_BOX       reduce using rule 68 (literal -> FALSE .)
    FUNCTION        reduce using rule 68 (literal -> FALSE .)
    FOR             reduce using rule 68 (literal -> FALSE .)
    WHILE           reduce using rule 68 (literal -> FALSE .)
    IMPORT          reduce using rule 68 (literal -> FALSE .)
    CONTINUE        reduce using rule 68 (literal -> FALSE .)
    BREAK           reduce using rule 68 (literal -> FALSE .)
    PASS            reduce using rule 68 (literal -> FALSE .)
    RETURN          reduce using rule 68 (literal -> FALSE .)
    LEFT_PAREN      reduce using rule 68 (literal -> FALSE .)
    IDENTIFIER      reduce using rule 68 (literal -> FALSE .)
    THIS            reduce using rule 68 (literal -> FALSE .)
    IF              reduce using rule 68 (literal -> FALSE .)
    BLANK           reduce using rule 68 (literal -> FALSE .)
    NULL            reduce using rule 68 (literal -> FALSE .)
    TRUE            reduce using rule 68 (literal -> FALSE .)
    FALSE           reduce using rule 68 (literal -> FALSE .)
    STRING_LITERAL  reduce using rule 68 (literal -> FALSE .)
    NUMERIC_LITERAL reduce using rule 68 (literal -> FALSE .)
    LEFT_CURLY_BRACE reduce using rule 68 (literal -> FALSE .)
    NOT_EQUALS      reduce using rule 68 (literal -> FALSE .)
    NOT             reduce using rule 68 (literal -> FALSE .)
    $end            reduce using rule 68 (literal -> FALSE .)
    COMMA           reduce using rule 68 (literal -> FALSE .)
    ENDWHILE        reduce using rule 68 (literal -> FALSE .)
    ENDIF           reduce using rule 68 (literal -> FALSE .)
    RIGHT_PAREN     reduce using rule 68 (literal -> FALSE .)
    ENDFUNCTION     reduce using rule 68 (literal -> FALSE .)
    OTHERWISE       reduce using rule 68 (literal -> FALSE .)
    ELIF            reduce using rule 68 (literal -> FALSE .)
    ENDFOR          reduce using rule 68 (literal -> FALSE .)
    COLON           reduce using rule 68 (literal -> FALSE .)
    RIGHT_CURLY_BRACE reduce using rule 68 (literal -> FALSE .)



state 32

    (4) element -> statement_compound .

    FUNCTION        reduce using rule 4 (element -> statement_compound .)
    FOR             reduce using rule 4 (element -> statement_compound .)
    WHILE           reduce using rule 4 (element -> statement_compound .)
    IMPORT          reduce using rule 4 (element -> statement_compound .)
    CONTINUE        reduce using rule 4 (element -> statement_compound .)
    BREAK           reduce using rule 4 (element -> statement_compound .)
    PASS            reduce using rule 4 (element -> statement_compound .)
    RETURN          reduce using rule 4 (element -> statement_compound .)
    LEFT_PAREN      reduce using rule 4 (element -> statement_compound .)
    IDENTIFIER      reduce using rule 4 (element -> statement_compound .)
    THIS            reduce using rule 4 (element -> statement_compound .)
    IF              reduce using rule 4 (element -> statement_compound .)
    BLANK           reduce using rule 4 (element -> statement_compound .)
    NULL            reduce using rule 4 (element -> statement_compound .)
    TRUE            reduce using rule 4 (element -> statement_compound .)
    FALSE           reduce using rule 4 (element -> statement_compound .)
    STRING_LITERAL  reduce using rule 4 (element -> statement_compound .)
    NUMERIC_LITERAL reduce using rule 4 (element -> statement_compound .)
    LEFT_BOX        reduce using rule 4 (element -> statement_compound .)
    LEFT_CURLY_BRACE reduce using rule 4 (element -> statement_compound .)
    NOT_EQUALS      reduce using rule 4 (element -> statement_compound .)
    NOT             reduce using rule 4 (element -> statement_compound .)
    ENDIF           reduce using rule 4 (element -> statement_compound .)
    ELIF            reduce using rule 4 (element -> statement_compound .)
    OTHERWISE       reduce using rule 4 (element -> statement_compound .)
    ENDFUNCTION     reduce using rule 4 (element -> statement_compound .)
    $end            reduce using rule 4 (element -> statement_compound .)
    ENDWHILE        reduce using rule 4 (element -> statement_compound .)
    ENDFOR          reduce using rule 4 (element -> statement_compound .)



state 33

    (18) stmt_c_if_group -> stmt_c_if_FO .

    ENDIF           reduce using rule 18 (stmt_c_if_group -> stmt_c_if_FO .)



state 34

    (70) literal -> NUMERIC_LITERAL .

    LEFT_BOX        reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    ASSIGN_EQUALS   reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    DOT_EQUALS      reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    PLUS_EQUALS     reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    MINUS_EQUALS    reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    TIMES_EQUALS    reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    DIVIDE_EQUALS   reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    MODULUS_EQUALS  reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    EXPONENT_EQUALS reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    AND_EQUALS      reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    OR_EQUALS       reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    DOT             reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    PLUS            reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    MINUS           reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    TIMES           reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    DIVIDE          reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    MODULUS         reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    EXPONENT        reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    AND             reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    OR              reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    IN              reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    HAS             reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    EQUIVALENCE_EQUAL reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    COMPARE_GT      reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    COMPARE_GTET    reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    COMPARE_LT      reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    COMPARE_LTET    reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    RIGHT_BOX       reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    FUNCTION        reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    FOR             reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    WHILE           reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    IMPORT          reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    CONTINUE        reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    BREAK           reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    PASS            reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    RETURN          reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    LEFT_PAREN      reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    IDENTIFIER      reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    THIS            reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    IF              reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    BLANK           reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    NULL            reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    TRUE            reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    FALSE           reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    STRING_LITERAL  reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    NUMERIC_LITERAL reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    LEFT_CURLY_BRACE reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    NOT_EQUALS      reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    NOT             reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    $end            reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    COMMA           reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    ENDWHILE        reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    ENDIF           reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    RIGHT_PAREN     reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    ENDFUNCTION     reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    OTHERWISE       reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    ELIF            reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    ENDFOR          reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    COLON           reduce using rule 70 (literal -> NUMERIC_LITERAL .)
    RIGHT_CURLY_BRACE reduce using rule 70 (literal -> NUMERIC_LITERAL .)



state 35

    (27) stmt_c_if -> IF . expression COLON ks
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    FUNCTION        shift and go to state 53
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    operator_unary_lhs_computation shift and go to state 43
    array_literal                  shift and go to state 27
    function_call                  shift and go to state 29
    operator_unary_lhs             shift and go to state 26
    literal                        shift and go to state 16
    object_literal                 shift and go to state 42
    operator_unary_lhs_assignment  shift and go to state 8
    function_anonymous             shift and go to state 54
    expression                     shift and go to state 74

state 36

    (34) statement_simple -> stmt_s_expression .

    FUNCTION        reduce using rule 34 (statement_simple -> stmt_s_expression .)
    FOR             reduce using rule 34 (statement_simple -> stmt_s_expression .)
    WHILE           reduce using rule 34 (statement_simple -> stmt_s_expression .)
    IMPORT          reduce using rule 34 (statement_simple -> stmt_s_expression .)
    CONTINUE        reduce using rule 34 (statement_simple -> stmt_s_expression .)
    BREAK           reduce using rule 34 (statement_simple -> stmt_s_expression .)
    PASS            reduce using rule 34 (statement_simple -> stmt_s_expression .)
    RETURN          reduce using rule 34 (statement_simple -> stmt_s_expression .)
    LEFT_PAREN      reduce using rule 34 (statement_simple -> stmt_s_expression .)
    IDENTIFIER      reduce using rule 34 (statement_simple -> stmt_s_expression .)
    THIS            reduce using rule 34 (statement_simple -> stmt_s_expression .)
    IF              reduce using rule 34 (statement_simple -> stmt_s_expression .)
    BLANK           reduce using rule 34 (statement_simple -> stmt_s_expression .)
    NULL            reduce using rule 34 (statement_simple -> stmt_s_expression .)
    TRUE            reduce using rule 34 (statement_simple -> stmt_s_expression .)
    FALSE           reduce using rule 34 (statement_simple -> stmt_s_expression .)
    STRING_LITERAL  reduce using rule 34 (statement_simple -> stmt_s_expression .)
    NUMERIC_LITERAL reduce using rule 34 (statement_simple -> stmt_s_expression .)
    LEFT_BOX        reduce using rule 34 (statement_simple -> stmt_s_expression .)
    LEFT_CURLY_BRACE reduce using rule 34 (statement_simple -> stmt_s_expression .)
    NOT_EQUALS      reduce using rule 34 (statement_simple -> stmt_s_expression .)
    NOT             reduce using rule 34 (statement_simple -> stmt_s_expression .)
    ELIF            reduce using rule 34 (statement_simple -> stmt_s_expression .)
    OTHERWISE       reduce using rule 34 (statement_simple -> stmt_s_expression .)
    ENDIF           reduce using rule 34 (statement_simple -> stmt_s_expression .)
    $end            reduce using rule 34 (statement_simple -> stmt_s_expression .)
    ENDFUNCTION     reduce using rule 34 (statement_simple -> stmt_s_expression .)
    ENDWHILE        reduce using rule 34 (statement_simple -> stmt_s_expression .)
    ENDFOR          reduce using rule 34 (statement_simple -> stmt_s_expression .)



state 37

    (3) element -> function_definition .

    FUNCTION        reduce using rule 3 (element -> function_definition .)
    FOR             reduce using rule 3 (element -> function_definition .)
    WHILE           reduce using rule 3 (element -> function_definition .)
    IMPORT          reduce using rule 3 (element -> function_definition .)
    CONTINUE        reduce using rule 3 (element -> function_definition .)
    BREAK           reduce using rule 3 (element -> function_definition .)
    PASS            reduce using rule 3 (element -> function_definition .)
    RETURN          reduce using rule 3 (element -> function_definition .)
    LEFT_PAREN      reduce using rule 3 (element -> function_definition .)
    IDENTIFIER      reduce using rule 3 (element -> function_definition .)
    THIS            reduce using rule 3 (element -> function_definition .)
    IF              reduce using rule 3 (element -> function_definition .)
    BLANK           reduce using rule 3 (element -> function_definition .)
    NULL            reduce using rule 3 (element -> function_definition .)
    TRUE            reduce using rule 3 (element -> function_definition .)
    FALSE           reduce using rule 3 (element -> function_definition .)
    STRING_LITERAL  reduce using rule 3 (element -> function_definition .)
    NUMERIC_LITERAL reduce using rule 3 (element -> function_definition .)
    LEFT_BOX        reduce using rule 3 (element -> function_definition .)
    LEFT_CURLY_BRACE reduce using rule 3 (element -> function_definition .)
    NOT_EQUALS      reduce using rule 3 (element -> function_definition .)
    NOT             reduce using rule 3 (element -> function_definition .)
    ENDIF           reduce using rule 3 (element -> function_definition .)
    ELIF            reduce using rule 3 (element -> function_definition .)
    OTHERWISE       reduce using rule 3 (element -> function_definition .)
    ENDFUNCTION     reduce using rule 3 (element -> function_definition .)
    $end            reduce using rule 3 (element -> function_definition .)
    ENDWHILE        reduce using rule 3 (element -> function_definition .)
    ENDFOR          reduce using rule 3 (element -> function_definition .)



state 38

    (5) element -> statement_simple .

    FUNCTION        reduce using rule 5 (element -> statement_simple .)
    FOR             reduce using rule 5 (element -> statement_simple .)
    WHILE           reduce using rule 5 (element -> statement_simple .)
    IMPORT          reduce using rule 5 (element -> statement_simple .)
    CONTINUE        reduce using rule 5 (element -> statement_simple .)
    BREAK           reduce using rule 5 (element -> statement_simple .)
    PASS            reduce using rule 5 (element -> statement_simple .)
    RETURN          reduce using rule 5 (element -> statement_simple .)
    LEFT_PAREN      reduce using rule 5 (element -> statement_simple .)
    IDENTIFIER      reduce using rule 5 (element -> statement_simple .)
    THIS            reduce using rule 5 (element -> statement_simple .)
    IF              reduce using rule 5 (element -> statement_simple .)
    BLANK           reduce using rule 5 (element -> statement_simple .)
    NULL            reduce using rule 5 (element -> statement_simple .)
    TRUE            reduce using rule 5 (element -> statement_simple .)
    FALSE           reduce using rule 5 (element -> statement_simple .)
    STRING_LITERAL  reduce using rule 5 (element -> statement_simple .)
    NUMERIC_LITERAL reduce using rule 5 (element -> statement_simple .)
    LEFT_BOX        reduce using rule 5 (element -> statement_simple .)
    LEFT_CURLY_BRACE reduce using rule 5 (element -> statement_simple .)
    NOT_EQUALS      reduce using rule 5 (element -> statement_simple .)
    NOT             reduce using rule 5 (element -> statement_simple .)
    ENDIF           reduce using rule 5 (element -> statement_simple .)
    ELIF            reduce using rule 5 (element -> statement_simple .)
    OTHERWISE       reduce using rule 5 (element -> statement_simple .)
    ENDFUNCTION     reduce using rule 5 (element -> statement_simple .)
    $end            reduce using rule 5 (element -> statement_simple .)
    ENDWHILE        reduce using rule 5 (element -> statement_simple .)
    ENDFOR          reduce using rule 5 (element -> statement_simple .)



state 39

    (69) literal -> STRING_LITERAL .

    LEFT_BOX        reduce using rule 69 (literal -> STRING_LITERAL .)
    ASSIGN_EQUALS   reduce using rule 69 (literal -> STRING_LITERAL .)
    DOT_EQUALS      reduce using rule 69 (literal -> STRING_LITERAL .)
    PLUS_EQUALS     reduce using rule 69 (literal -> STRING_LITERAL .)
    MINUS_EQUALS    reduce using rule 69 (literal -> STRING_LITERAL .)
    TIMES_EQUALS    reduce using rule 69 (literal -> STRING_LITERAL .)
    DIVIDE_EQUALS   reduce using rule 69 (literal -> STRING_LITERAL .)
    MODULUS_EQUALS  reduce using rule 69 (literal -> STRING_LITERAL .)
    EXPONENT_EQUALS reduce using rule 69 (literal -> STRING_LITERAL .)
    AND_EQUALS      reduce using rule 69 (literal -> STRING_LITERAL .)
    OR_EQUALS       reduce using rule 69 (literal -> STRING_LITERAL .)
    DOT             reduce using rule 69 (literal -> STRING_LITERAL .)
    PLUS            reduce using rule 69 (literal -> STRING_LITERAL .)
    MINUS           reduce using rule 69 (literal -> STRING_LITERAL .)
    TIMES           reduce using rule 69 (literal -> STRING_LITERAL .)
    DIVIDE          reduce using rule 69 (literal -> STRING_LITERAL .)
    MODULUS         reduce using rule 69 (literal -> STRING_LITERAL .)
    EXPONENT        reduce using rule 69 (literal -> STRING_LITERAL .)
    AND             reduce using rule 69 (literal -> STRING_LITERAL .)
    OR              reduce using rule 69 (literal -> STRING_LITERAL .)
    IN              reduce using rule 69 (literal -> STRING_LITERAL .)
    HAS             reduce using rule 69 (literal -> STRING_LITERAL .)
    EQUIVALENCE_EQUAL reduce using rule 69 (literal -> STRING_LITERAL .)
    COMPARE_GT      reduce using rule 69 (literal -> STRING_LITERAL .)
    COMPARE_GTET    reduce using rule 69 (literal -> STRING_LITERAL .)
    COMPARE_LT      reduce using rule 69 (literal -> STRING_LITERAL .)
    COMPARE_LTET    reduce using rule 69 (literal -> STRING_LITERAL .)
    RIGHT_BOX       reduce using rule 69 (literal -> STRING_LITERAL .)
    FUNCTION        reduce using rule 69 (literal -> STRING_LITERAL .)
    FOR             reduce using rule 69 (literal -> STRING_LITERAL .)
    WHILE           reduce using rule 69 (literal -> STRING_LITERAL .)
    IMPORT          reduce using rule 69 (literal -> STRING_LITERAL .)
    CONTINUE        reduce using rule 69 (literal -> STRING_LITERAL .)
    BREAK           reduce using rule 69 (literal -> STRING_LITERAL .)
    PASS            reduce using rule 69 (literal -> STRING_LITERAL .)
    RETURN          reduce using rule 69 (literal -> STRING_LITERAL .)
    LEFT_PAREN      reduce using rule 69 (literal -> STRING_LITERAL .)
    IDENTIFIER      reduce using rule 69 (literal -> STRING_LITERAL .)
    THIS            reduce using rule 69 (literal -> STRING_LITERAL .)
    IF              reduce using rule 69 (literal -> STRING_LITERAL .)
    BLANK           reduce using rule 69 (literal -> STRING_LITERAL .)
    NULL            reduce using rule 69 (literal -> STRING_LITERAL .)
    TRUE            reduce using rule 69 (literal -> STRING_LITERAL .)
    FALSE           reduce using rule 69 (literal -> STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 69 (literal -> STRING_LITERAL .)
    NUMERIC_LITERAL reduce using rule 69 (literal -> STRING_LITERAL .)
    LEFT_CURLY_BRACE reduce using rule 69 (literal -> STRING_LITERAL .)
    NOT_EQUALS      reduce using rule 69 (literal -> STRING_LITERAL .)
    NOT             reduce using rule 69 (literal -> STRING_LITERAL .)
    $end            reduce using rule 69 (literal -> STRING_LITERAL .)
    COMMA           reduce using rule 69 (literal -> STRING_LITERAL .)
    ENDWHILE        reduce using rule 69 (literal -> STRING_LITERAL .)
    ENDIF           reduce using rule 69 (literal -> STRING_LITERAL .)
    RIGHT_PAREN     reduce using rule 69 (literal -> STRING_LITERAL .)
    ENDFUNCTION     reduce using rule 69 (literal -> STRING_LITERAL .)
    OTHERWISE       reduce using rule 69 (literal -> STRING_LITERAL .)
    ELIF            reduce using rule 69 (literal -> STRING_LITERAL .)
    ENDFOR          reduce using rule 69 (literal -> STRING_LITERAL .)
    COLON           reduce using rule 69 (literal -> STRING_LITERAL .)
    RIGHT_CURLY_BRACE reduce using rule 69 (literal -> STRING_LITERAL .)



state 40

    (36) stmt_s_control_flow -> stmt_s_break .

    FUNCTION        reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    FOR             reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    WHILE           reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    IMPORT          reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    CONTINUE        reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    BREAK           reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    PASS            reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    RETURN          reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    LEFT_PAREN      reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    IDENTIFIER      reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    THIS            reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    IF              reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    BLANK           reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    NULL            reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    TRUE            reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    FALSE           reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    STRING_LITERAL  reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    NUMERIC_LITERAL reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    LEFT_BOX        reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    LEFT_CURLY_BRACE reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    NOT_EQUALS      reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    NOT             reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    ENDFUNCTION     reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    ENDWHILE        reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    ENDFOR          reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    OTHERWISE       reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    ELIF            reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    ENDIF           reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    $end            reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)



state 41

    (80) operator_unary_lhs_assignment -> NOT_EQUALS .

    LEFT_PAREN      reduce using rule 80 (operator_unary_lhs_assignment -> NOT_EQUALS .)
    IDENTIFIER      reduce using rule 80 (operator_unary_lhs_assignment -> NOT_EQUALS .)
    THIS            reduce using rule 80 (operator_unary_lhs_assignment -> NOT_EQUALS .)
    BLANK           reduce using rule 80 (operator_unary_lhs_assignment -> NOT_EQUALS .)
    NULL            reduce using rule 80 (operator_unary_lhs_assignment -> NOT_EQUALS .)
    TRUE            reduce using rule 80 (operator_unary_lhs_assignment -> NOT_EQUALS .)
    FALSE           reduce using rule 80 (operator_unary_lhs_assignment -> NOT_EQUALS .)
    STRING_LITERAL  reduce using rule 80 (operator_unary_lhs_assignment -> NOT_EQUALS .)
    NUMERIC_LITERAL reduce using rule 80 (operator_unary_lhs_assignment -> NOT_EQUALS .)
    FUNCTION        reduce using rule 80 (operator_unary_lhs_assignment -> NOT_EQUALS .)
    LEFT_BOX        reduce using rule 80 (operator_unary_lhs_assignment -> NOT_EQUALS .)
    LEFT_CURLY_BRACE reduce using rule 80 (operator_unary_lhs_assignment -> NOT_EQUALS .)
    NOT_EQUALS      reduce using rule 80 (operator_unary_lhs_assignment -> NOT_EQUALS .)
    NOT             reduce using rule 80 (operator_unary_lhs_assignment -> NOT_EQUALS .)



state 42

    (64) literal -> object_literal .

    LEFT_BOX        reduce using rule 64 (literal -> object_literal .)
    ASSIGN_EQUALS   reduce using rule 64 (literal -> object_literal .)
    DOT_EQUALS      reduce using rule 64 (literal -> object_literal .)
    PLUS_EQUALS     reduce using rule 64 (literal -> object_literal .)
    MINUS_EQUALS    reduce using rule 64 (literal -> object_literal .)
    TIMES_EQUALS    reduce using rule 64 (literal -> object_literal .)
    DIVIDE_EQUALS   reduce using rule 64 (literal -> object_literal .)
    MODULUS_EQUALS  reduce using rule 64 (literal -> object_literal .)
    EXPONENT_EQUALS reduce using rule 64 (literal -> object_literal .)
    AND_EQUALS      reduce using rule 64 (literal -> object_literal .)
    OR_EQUALS       reduce using rule 64 (literal -> object_literal .)
    DOT             reduce using rule 64 (literal -> object_literal .)
    PLUS            reduce using rule 64 (literal -> object_literal .)
    MINUS           reduce using rule 64 (literal -> object_literal .)
    TIMES           reduce using rule 64 (literal -> object_literal .)
    DIVIDE          reduce using rule 64 (literal -> object_literal .)
    MODULUS         reduce using rule 64 (literal -> object_literal .)
    EXPONENT        reduce using rule 64 (literal -> object_literal .)
    AND             reduce using rule 64 (literal -> object_literal .)
    OR              reduce using rule 64 (literal -> object_literal .)
    IN              reduce using rule 64 (literal -> object_literal .)
    HAS             reduce using rule 64 (literal -> object_literal .)
    EQUIVALENCE_EQUAL reduce using rule 64 (literal -> object_literal .)
    COMPARE_GT      reduce using rule 64 (literal -> object_literal .)
    COMPARE_GTET    reduce using rule 64 (literal -> object_literal .)
    COMPARE_LT      reduce using rule 64 (literal -> object_literal .)
    COMPARE_LTET    reduce using rule 64 (literal -> object_literal .)
    RIGHT_BOX       reduce using rule 64 (literal -> object_literal .)
    FUNCTION        reduce using rule 64 (literal -> object_literal .)
    FOR             reduce using rule 64 (literal -> object_literal .)
    WHILE           reduce using rule 64 (literal -> object_literal .)
    IMPORT          reduce using rule 64 (literal -> object_literal .)
    CONTINUE        reduce using rule 64 (literal -> object_literal .)
    BREAK           reduce using rule 64 (literal -> object_literal .)
    PASS            reduce using rule 64 (literal -> object_literal .)
    RETURN          reduce using rule 64 (literal -> object_literal .)
    LEFT_PAREN      reduce using rule 64 (literal -> object_literal .)
    IDENTIFIER      reduce using rule 64 (literal -> object_literal .)
    THIS            reduce using rule 64 (literal -> object_literal .)
    IF              reduce using rule 64 (literal -> object_literal .)
    BLANK           reduce using rule 64 (literal -> object_literal .)
    NULL            reduce using rule 64 (literal -> object_literal .)
    TRUE            reduce using rule 64 (literal -> object_literal .)
    FALSE           reduce using rule 64 (literal -> object_literal .)
    STRING_LITERAL  reduce using rule 64 (literal -> object_literal .)
    NUMERIC_LITERAL reduce using rule 64 (literal -> object_literal .)
    LEFT_CURLY_BRACE reduce using rule 64 (literal -> object_literal .)
    NOT_EQUALS      reduce using rule 64 (literal -> object_literal .)
    NOT             reduce using rule 64 (literal -> object_literal .)
    $end            reduce using rule 64 (literal -> object_literal .)
    COMMA           reduce using rule 64 (literal -> object_literal .)
    ENDWHILE        reduce using rule 64 (literal -> object_literal .)
    ENDIF           reduce using rule 64 (literal -> object_literal .)
    RIGHT_PAREN     reduce using rule 64 (literal -> object_literal .)
    ENDFUNCTION     reduce using rule 64 (literal -> object_literal .)
    OTHERWISE       reduce using rule 64 (literal -> object_literal .)
    ELIF            reduce using rule 64 (literal -> object_literal .)
    ENDFOR          reduce using rule 64 (literal -> object_literal .)
    COLON           reduce using rule 64 (literal -> object_literal .)
    RIGHT_CURLY_BRACE reduce using rule 64 (literal -> object_literal .)



state 43

    (79) operator_unary_lhs -> operator_unary_lhs_computation .

    LEFT_PAREN      reduce using rule 79 (operator_unary_lhs -> operator_unary_lhs_computation .)
    IDENTIFIER      reduce using rule 79 (operator_unary_lhs -> operator_unary_lhs_computation .)
    THIS            reduce using rule 79 (operator_unary_lhs -> operator_unary_lhs_computation .)
    BLANK           reduce using rule 79 (operator_unary_lhs -> operator_unary_lhs_computation .)
    NULL            reduce using rule 79 (operator_unary_lhs -> operator_unary_lhs_computation .)
    TRUE            reduce using rule 79 (operator_unary_lhs -> operator_unary_lhs_computation .)
    FALSE           reduce using rule 79 (operator_unary_lhs -> operator_unary_lhs_computation .)
    STRING_LITERAL  reduce using rule 79 (operator_unary_lhs -> operator_unary_lhs_computation .)
    NUMERIC_LITERAL reduce using rule 79 (operator_unary_lhs -> operator_unary_lhs_computation .)
    FUNCTION        reduce using rule 79 (operator_unary_lhs -> operator_unary_lhs_computation .)
    LEFT_BOX        reduce using rule 79 (operator_unary_lhs -> operator_unary_lhs_computation .)
    LEFT_CURLY_BRACE reduce using rule 79 (operator_unary_lhs -> operator_unary_lhs_computation .)
    NOT_EQUALS      reduce using rule 79 (operator_unary_lhs -> operator_unary_lhs_computation .)
    NOT             reduce using rule 79 (operator_unary_lhs -> operator_unary_lhs_computation .)



state 44

    (1) ks -> element . ks
    (1) ks -> . element ks
    (2) ks -> . epsilon
    (3) element -> . function_definition
    (4) element -> . statement_compound
    (5) element -> . statement_simple
    (6) epsilon -> .
    (7) function_definition -> . FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (14) statement_compound -> . stmt_c_for
    (15) statement_compound -> . stmt_c_while
    (16) statement_compound -> . stmt_c_if_group ENDIF
    (32) statement_simple -> . stmt_s_control_flow
    (33) statement_simple -> . stmt_s_import
    (34) statement_simple -> . stmt_s_expression
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (25) stmt_c_for -> . FOR IDENTIFIER IN expression COLON ks ENDFOR
    (26) stmt_c_while -> . WHILE expression COLON ks ENDWHILE
    (17) stmt_c_if_group -> . stmt_c_if_F
    (18) stmt_c_if_group -> . stmt_c_if_FO
    (19) stmt_c_if_group -> . stmt_c_if_FE
    (20) stmt_c_if_group -> . stmt_c_if_FEO
    (35) stmt_s_control_flow -> . stmt_s_continue
    (36) stmt_s_control_flow -> . stmt_s_break
    (37) stmt_s_control_flow -> . stmt_s_pass
    (38) stmt_s_control_flow -> . stmt_s_return
    (44) stmt_s_import -> . IMPORT dotted_identifier
    (48) stmt_s_expression -> . expression
    (21) stmt_c_if_F -> . stmt_c_if
    (22) stmt_c_if_FO -> . stmt_c_if stmt_c_otherwise
    (23) stmt_c_if_FE -> . stmt_c_if stmt_c_elif_block
    (24) stmt_c_if_FEO -> . stmt_c_if stmt_c_elif_block stmt_c_otherwise
    (39) stmt_s_continue -> . CONTINUE
    (40) stmt_s_break -> . BREAK
    (41) stmt_s_pass -> . PASS
    (42) stmt_s_return -> . RETURN expression
    (43) stmt_s_return -> . RETURN
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (27) stmt_c_if -> . IF expression COLON ks
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    $end            reduce using rule 6 (epsilon -> .)
    ENDWHILE        reduce using rule 6 (epsilon -> .)
    ENDFUNCTION     reduce using rule 6 (epsilon -> .)
    ENDIF           reduce using rule 6 (epsilon -> .)
    OTHERWISE       reduce using rule 6 (epsilon -> .)
    ELIF            reduce using rule 6 (epsilon -> .)
    ENDFOR          reduce using rule 6 (epsilon -> .)
    FUNCTION        shift and go to state 20
    FOR             shift and go to state 22
    WHILE           shift and go to state 7
    IMPORT          shift and go to state 18
    CONTINUE        shift and go to state 47
    BREAK           shift and go to state 13
    PASS            shift and go to state 9
    RETURN          shift and go to state 2
    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    IF              shift and go to state 35
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    stmt_c_for                     shift and go to state 1
    stmt_c_while                   shift and go to state 4
    stmt_s_return                  shift and go to state 5
    stmt_c_if_group                shift and go to state 6
    operator_unary_lhs_assignment  shift and go to state 8
    stmt_s_control_flow            shift and go to state 12
    operator_unary_lhs_computation shift and go to state 43
    stmt_s_import                  shift and go to state 14
    literal                        shift and go to state 16
    function_anonymous             shift and go to state 17
    stmt_s_continue                shift and go to state 24
    epsilon                        shift and go to state 23
    stmt_s_pass                    shift and go to state 21
    stmt_c_if_FEO                  shift and go to state 25
    operator_unary_lhs             shift and go to state 26
    array_literal                  shift and go to state 27
    stmt_c_if                      shift and go to state 28
    function_call                  shift and go to state 29
    stmt_c_if_FE                   shift and go to state 30
    statement_compound             shift and go to state 32
    stmt_c_if_FO                   shift and go to state 33
    stmt_s_expression              shift and go to state 36
    function_definition            shift and go to state 37
    statement_simple               shift and go to state 38
    expression                     shift and go to state 50
    object_literal                 shift and go to state 42
    element                        shift and go to state 44
    ks                             shift and go to state 75
    stmt_s_break                   shift and go to state 40
    stmt_c_if_F                    shift and go to state 51

state 45

    (0) S' -> ks .




state 46

    (57) expression -> THIS .

    COLON           reduce using rule 57 (expression -> THIS .)
    LEFT_BOX        reduce using rule 57 (expression -> THIS .)
    ASSIGN_EQUALS   reduce using rule 57 (expression -> THIS .)
    DOT_EQUALS      reduce using rule 57 (expression -> THIS .)
    PLUS_EQUALS     reduce using rule 57 (expression -> THIS .)
    MINUS_EQUALS    reduce using rule 57 (expression -> THIS .)
    TIMES_EQUALS    reduce using rule 57 (expression -> THIS .)
    DIVIDE_EQUALS   reduce using rule 57 (expression -> THIS .)
    MODULUS_EQUALS  reduce using rule 57 (expression -> THIS .)
    EXPONENT_EQUALS reduce using rule 57 (expression -> THIS .)
    AND_EQUALS      reduce using rule 57 (expression -> THIS .)
    OR_EQUALS       reduce using rule 57 (expression -> THIS .)
    DOT             reduce using rule 57 (expression -> THIS .)
    PLUS            reduce using rule 57 (expression -> THIS .)
    MINUS           reduce using rule 57 (expression -> THIS .)
    TIMES           reduce using rule 57 (expression -> THIS .)
    DIVIDE          reduce using rule 57 (expression -> THIS .)
    MODULUS         reduce using rule 57 (expression -> THIS .)
    EXPONENT        reduce using rule 57 (expression -> THIS .)
    AND             reduce using rule 57 (expression -> THIS .)
    OR              reduce using rule 57 (expression -> THIS .)
    IN              reduce using rule 57 (expression -> THIS .)
    HAS             reduce using rule 57 (expression -> THIS .)
    EQUIVALENCE_EQUAL reduce using rule 57 (expression -> THIS .)
    COMPARE_GT      reduce using rule 57 (expression -> THIS .)
    COMPARE_GTET    reduce using rule 57 (expression -> THIS .)
    COMPARE_LT      reduce using rule 57 (expression -> THIS .)
    COMPARE_LTET    reduce using rule 57 (expression -> THIS .)
    FOR             reduce using rule 57 (expression -> THIS .)
    COMMA           reduce using rule 57 (expression -> THIS .)
    RIGHT_BOX       reduce using rule 57 (expression -> THIS .)
    FUNCTION        reduce using rule 57 (expression -> THIS .)
    WHILE           reduce using rule 57 (expression -> THIS .)
    IMPORT          reduce using rule 57 (expression -> THIS .)
    CONTINUE        reduce using rule 57 (expression -> THIS .)
    BREAK           reduce using rule 57 (expression -> THIS .)
    PASS            reduce using rule 57 (expression -> THIS .)
    RETURN          reduce using rule 57 (expression -> THIS .)
    LEFT_PAREN      reduce using rule 57 (expression -> THIS .)
    IDENTIFIER      reduce using rule 57 (expression -> THIS .)
    THIS            reduce using rule 57 (expression -> THIS .)
    IF              reduce using rule 57 (expression -> THIS .)
    BLANK           reduce using rule 57 (expression -> THIS .)
    NULL            reduce using rule 57 (expression -> THIS .)
    TRUE            reduce using rule 57 (expression -> THIS .)
    FALSE           reduce using rule 57 (expression -> THIS .)
    STRING_LITERAL  reduce using rule 57 (expression -> THIS .)
    NUMERIC_LITERAL reduce using rule 57 (expression -> THIS .)
    LEFT_CURLY_BRACE reduce using rule 57 (expression -> THIS .)
    NOT_EQUALS      reduce using rule 57 (expression -> THIS .)
    NOT             reduce using rule 57 (expression -> THIS .)
    $end            reduce using rule 57 (expression -> THIS .)
    ENDWHILE        reduce using rule 57 (expression -> THIS .)
    ENDIF           reduce using rule 57 (expression -> THIS .)
    RIGHT_PAREN     reduce using rule 57 (expression -> THIS .)
    ENDFOR          reduce using rule 57 (expression -> THIS .)
    ENDFUNCTION     reduce using rule 57 (expression -> THIS .)
    OTHERWISE       reduce using rule 57 (expression -> THIS .)
    ELIF            reduce using rule 57 (expression -> THIS .)
    RIGHT_CURLY_BRACE reduce using rule 57 (expression -> THIS .)



state 47

    (39) stmt_s_continue -> CONTINUE .

    FUNCTION        reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    FOR             reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    WHILE           reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    IMPORT          reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    CONTINUE        reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    BREAK           reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    PASS            reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    RETURN          reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    LEFT_PAREN      reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    IDENTIFIER      reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    THIS            reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    IF              reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    BLANK           reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    NULL            reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    TRUE            reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    FALSE           reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    STRING_LITERAL  reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    NUMERIC_LITERAL reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    LEFT_BOX        reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    LEFT_CURLY_BRACE reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    NOT_EQUALS      reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    NOT             reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    ELIF            reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    OTHERWISE       reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    ENDIF           reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    $end            reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    ENDWHILE        reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    ENDFUNCTION     reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    ENDFOR          reduce using rule 39 (stmt_s_continue -> CONTINUE .)



state 48

    (73) object_literal -> LEFT_CURLY_BRACE . pair_list RIGHT_CURLY_BRACE
    (74) pair_list -> . epsilon
    (75) pair_list -> . key_value_pair
    (76) pair_list -> . key_value_pair COMMA pair_list
    (6) epsilon -> .
    (77) key_value_pair -> . IDENTIFIER COLON expression

    RIGHT_CURLY_BRACE reduce using rule 6 (epsilon -> .)
    IDENTIFIER      shift and go to state 79


    key_value_pair                 shift and go to state 76
    epsilon                        shift and go to state 78
    pair_list                      shift and go to state 77

state 49

    (81) operator_unary_lhs_computation -> NOT .

    LEFT_PAREN      reduce using rule 81 (operator_unary_lhs_computation -> NOT .)
    IDENTIFIER      reduce using rule 81 (operator_unary_lhs_computation -> NOT .)
    THIS            reduce using rule 81 (operator_unary_lhs_computation -> NOT .)
    BLANK           reduce using rule 81 (operator_unary_lhs_computation -> NOT .)
    NULL            reduce using rule 81 (operator_unary_lhs_computation -> NOT .)
    TRUE            reduce using rule 81 (operator_unary_lhs_computation -> NOT .)
    FALSE           reduce using rule 81 (operator_unary_lhs_computation -> NOT .)
    STRING_LITERAL  reduce using rule 81 (operator_unary_lhs_computation -> NOT .)
    NUMERIC_LITERAL reduce using rule 81 (operator_unary_lhs_computation -> NOT .)
    FUNCTION        reduce using rule 81 (operator_unary_lhs_computation -> NOT .)
    LEFT_BOX        reduce using rule 81 (operator_unary_lhs_computation -> NOT .)
    LEFT_CURLY_BRACE reduce using rule 81 (operator_unary_lhs_computation -> NOT .)
    NOT_EQUALS      reduce using rule 81 (operator_unary_lhs_computation -> NOT .)
    NOT             reduce using rule 81 (operator_unary_lhs_computation -> NOT .)



state 50

    (48) stmt_s_expression -> expression .
    (54) expression -> expression . operator_rhs_array
    (55) expression -> expression . operator_binary expression
    (82) operator_rhs_array -> . LEFT_BOX array_operator_insides RIGHT_BOX
    (86) operator_binary -> . operator_binary_assignment
    (87) operator_binary -> . operator_binary_computation
    (88) operator_binary -> . operator_binary_comparison
    (89) operator_binary_assignment -> . ASSIGN_EQUALS
    (90) operator_binary_assignment -> . DOT_EQUALS
    (91) operator_binary_assignment -> . PLUS_EQUALS
    (92) operator_binary_assignment -> . MINUS_EQUALS
    (93) operator_binary_assignment -> . TIMES_EQUALS
    (94) operator_binary_assignment -> . DIVIDE_EQUALS
    (95) operator_binary_assignment -> . MODULUS_EQUALS
    (96) operator_binary_assignment -> . EXPONENT_EQUALS
    (97) operator_binary_assignment -> . AND_EQUALS
    (98) operator_binary_assignment -> . OR_EQUALS
    (99) operator_binary_computation -> . DOT
    (100) operator_binary_computation -> . PLUS
    (101) operator_binary_computation -> . MINUS
    (102) operator_binary_computation -> . TIMES
    (103) operator_binary_computation -> . DIVIDE
    (104) operator_binary_computation -> . MODULUS
    (105) operator_binary_computation -> . EXPONENT
    (106) operator_binary_computation -> . AND
    (107) operator_binary_computation -> . OR
    (108) operator_binary_comparison -> . IN
    (109) operator_binary_comparison -> . HAS
    (110) operator_binary_comparison -> . EQUIVALENCE_EQUAL
    (111) operator_binary_comparison -> . COMPARE_GT
    (112) operator_binary_comparison -> . COMPARE_GTET
    (113) operator_binary_comparison -> . COMPARE_LT
    (114) operator_binary_comparison -> . COMPARE_LTET

  ! shift/reduce conflict for LEFT_BOX resolved as shift.
    FUNCTION        reduce using rule 48 (stmt_s_expression -> expression .)
    FOR             reduce using rule 48 (stmt_s_expression -> expression .)
    WHILE           reduce using rule 48 (stmt_s_expression -> expression .)
    IMPORT          reduce using rule 48 (stmt_s_expression -> expression .)
    CONTINUE        reduce using rule 48 (stmt_s_expression -> expression .)
    BREAK           reduce using rule 48 (stmt_s_expression -> expression .)
    PASS            reduce using rule 48 (stmt_s_expression -> expression .)
    RETURN          reduce using rule 48 (stmt_s_expression -> expression .)
    LEFT_PAREN      reduce using rule 48 (stmt_s_expression -> expression .)
    IDENTIFIER      reduce using rule 48 (stmt_s_expression -> expression .)
    THIS            reduce using rule 48 (stmt_s_expression -> expression .)
    IF              reduce using rule 48 (stmt_s_expression -> expression .)
    BLANK           reduce using rule 48 (stmt_s_expression -> expression .)
    NULL            reduce using rule 48 (stmt_s_expression -> expression .)
    TRUE            reduce using rule 48 (stmt_s_expression -> expression .)
    FALSE           reduce using rule 48 (stmt_s_expression -> expression .)
    STRING_LITERAL  reduce using rule 48 (stmt_s_expression -> expression .)
    NUMERIC_LITERAL reduce using rule 48 (stmt_s_expression -> expression .)
    LEFT_CURLY_BRACE reduce using rule 48 (stmt_s_expression -> expression .)
    NOT_EQUALS      reduce using rule 48 (stmt_s_expression -> expression .)
    NOT             reduce using rule 48 (stmt_s_expression -> expression .)
    ENDWHILE        reduce using rule 48 (stmt_s_expression -> expression .)
    $end            reduce using rule 48 (stmt_s_expression -> expression .)
    ENDFUNCTION     reduce using rule 48 (stmt_s_expression -> expression .)
    ENDIF           reduce using rule 48 (stmt_s_expression -> expression .)
    OTHERWISE       reduce using rule 48 (stmt_s_expression -> expression .)
    ELIF            reduce using rule 48 (stmt_s_expression -> expression .)
    ENDFOR          reduce using rule 48 (stmt_s_expression -> expression .)
    LEFT_BOX        shift and go to state 100
    ASSIGN_EQUALS   shift and go to state 106
    DOT_EQUALS      shift and go to state 80
    PLUS_EQUALS     shift and go to state 105
    MINUS_EQUALS    shift and go to state 87
    TIMES_EQUALS    shift and go to state 96
    DIVIDE_EQUALS   shift and go to state 108
    MODULUS_EQUALS  shift and go to state 94
    EXPONENT_EQUALS shift and go to state 109
    AND_EQUALS      shift and go to state 98
    OR_EQUALS       shift and go to state 99
    DOT             shift and go to state 86
    PLUS            shift and go to state 91
    MINUS           shift and go to state 85
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95
    MODULUS         shift and go to state 90
    EXPONENT        shift and go to state 89
    AND             shift and go to state 93
    OR              shift and go to state 111
    IN              shift and go to state 101
    HAS             shift and go to state 88
    EQUIVALENCE_EQUAL shift and go to state 81
    COMPARE_GT      shift and go to state 84
    COMPARE_GTET    shift and go to state 104
    COMPARE_LT      shift and go to state 97
    COMPARE_LTET    shift and go to state 83

  ! LEFT_BOX        [ reduce using rule 48 (stmt_s_expression -> expression .) ]

    operator_binary                shift and go to state 107
    operator_binary_computation    shift and go to state 82
    operator_binary_comparison     shift and go to state 110
    operator_rhs_array             shift and go to state 103
    operator_binary_assignment     shift and go to state 92

state 51

    (17) stmt_c_if_group -> stmt_c_if_F .

    ENDIF           reduce using rule 17 (stmt_c_if_group -> stmt_c_if_F .)



state 52

    (71) array_literal -> LEFT_BOX . exp_list RIGHT_BOX
    (72) array_literal -> LEFT_BOX . expression FOR IDENTIFIER IN expression RIGHT_BOX
    (60) exp_list -> . epsilon
    (61) exp_list -> . expression
    (62) exp_list -> . expression COMMA exp_list
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (6) epsilon -> .
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    RIGHT_BOX       reduce using rule 6 (epsilon -> .)
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    FUNCTION        shift and go to state 53
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    exp_list                       shift and go to state 112
    operator_unary_lhs_computation shift and go to state 43
    epsilon                        shift and go to state 113
    array_literal                  shift and go to state 27
    function_call                  shift and go to state 29
    operator_unary_lhs             shift and go to state 26
    literal                        shift and go to state 16
    object_literal                 shift and go to state 42
    operator_unary_lhs_assignment  shift and go to state 8
    function_anonymous             shift and go to state 54
    expression                     shift and go to state 114

state 53

    (9) function_anonymous -> FUNCTION . parameters COLON ks ENDFUNCTION
    (10) parameters -> . LEFT_PAREN param_list RIGHT_PAREN

    LEFT_PAREN      shift and go to state 65


    parameters                     shift and go to state 64

state 54

    (50) expression -> function_anonymous .

    COLON           reduce using rule 50 (expression -> function_anonymous .)
    LEFT_BOX        reduce using rule 50 (expression -> function_anonymous .)
    ASSIGN_EQUALS   reduce using rule 50 (expression -> function_anonymous .)
    DOT_EQUALS      reduce using rule 50 (expression -> function_anonymous .)
    PLUS_EQUALS     reduce using rule 50 (expression -> function_anonymous .)
    MINUS_EQUALS    reduce using rule 50 (expression -> function_anonymous .)
    TIMES_EQUALS    reduce using rule 50 (expression -> function_anonymous .)
    DIVIDE_EQUALS   reduce using rule 50 (expression -> function_anonymous .)
    MODULUS_EQUALS  reduce using rule 50 (expression -> function_anonymous .)
    EXPONENT_EQUALS reduce using rule 50 (expression -> function_anonymous .)
    AND_EQUALS      reduce using rule 50 (expression -> function_anonymous .)
    OR_EQUALS       reduce using rule 50 (expression -> function_anonymous .)
    DOT             reduce using rule 50 (expression -> function_anonymous .)
    PLUS            reduce using rule 50 (expression -> function_anonymous .)
    MINUS           reduce using rule 50 (expression -> function_anonymous .)
    TIMES           reduce using rule 50 (expression -> function_anonymous .)
    DIVIDE          reduce using rule 50 (expression -> function_anonymous .)
    MODULUS         reduce using rule 50 (expression -> function_anonymous .)
    EXPONENT        reduce using rule 50 (expression -> function_anonymous .)
    AND             reduce using rule 50 (expression -> function_anonymous .)
    OR              reduce using rule 50 (expression -> function_anonymous .)
    IN              reduce using rule 50 (expression -> function_anonymous .)
    HAS             reduce using rule 50 (expression -> function_anonymous .)
    EQUIVALENCE_EQUAL reduce using rule 50 (expression -> function_anonymous .)
    COMPARE_GT      reduce using rule 50 (expression -> function_anonymous .)
    COMPARE_GTET    reduce using rule 50 (expression -> function_anonymous .)
    COMPARE_LT      reduce using rule 50 (expression -> function_anonymous .)
    COMPARE_LTET    reduce using rule 50 (expression -> function_anonymous .)
    FOR             reduce using rule 50 (expression -> function_anonymous .)
    COMMA           reduce using rule 50 (expression -> function_anonymous .)
    RIGHT_BOX       reduce using rule 50 (expression -> function_anonymous .)
    RIGHT_PAREN     reduce using rule 50 (expression -> function_anonymous .)
    FUNCTION        reduce using rule 50 (expression -> function_anonymous .)
    WHILE           reduce using rule 50 (expression -> function_anonymous .)
    IMPORT          reduce using rule 50 (expression -> function_anonymous .)
    CONTINUE        reduce using rule 50 (expression -> function_anonymous .)
    BREAK           reduce using rule 50 (expression -> function_anonymous .)
    PASS            reduce using rule 50 (expression -> function_anonymous .)
    RETURN          reduce using rule 50 (expression -> function_anonymous .)
    LEFT_PAREN      reduce using rule 50 (expression -> function_anonymous .)
    IDENTIFIER      reduce using rule 50 (expression -> function_anonymous .)
    THIS            reduce using rule 50 (expression -> function_anonymous .)
    IF              reduce using rule 50 (expression -> function_anonymous .)
    BLANK           reduce using rule 50 (expression -> function_anonymous .)
    NULL            reduce using rule 50 (expression -> function_anonymous .)
    TRUE            reduce using rule 50 (expression -> function_anonymous .)
    FALSE           reduce using rule 50 (expression -> function_anonymous .)
    STRING_LITERAL  reduce using rule 50 (expression -> function_anonymous .)
    NUMERIC_LITERAL reduce using rule 50 (expression -> function_anonymous .)
    LEFT_CURLY_BRACE reduce using rule 50 (expression -> function_anonymous .)
    NOT_EQUALS      reduce using rule 50 (expression -> function_anonymous .)
    NOT             reduce using rule 50 (expression -> function_anonymous .)
    $end            reduce using rule 50 (expression -> function_anonymous .)
    ENDWHILE        reduce using rule 50 (expression -> function_anonymous .)
    ENDFUNCTION     reduce using rule 50 (expression -> function_anonymous .)
    ENDIF           reduce using rule 50 (expression -> function_anonymous .)
    OTHERWISE       reduce using rule 50 (expression -> function_anonymous .)
    ELIF            reduce using rule 50 (expression -> function_anonymous .)
    ENDFOR          reduce using rule 50 (expression -> function_anonymous .)
    RIGHT_CURLY_BRACE reduce using rule 50 (expression -> function_anonymous .)



state 55

    (42) stmt_s_return -> RETURN expression .
    (54) expression -> expression . operator_rhs_array
    (55) expression -> expression . operator_binary expression
    (82) operator_rhs_array -> . LEFT_BOX array_operator_insides RIGHT_BOX
    (86) operator_binary -> . operator_binary_assignment
    (87) operator_binary -> . operator_binary_computation
    (88) operator_binary -> . operator_binary_comparison
    (89) operator_binary_assignment -> . ASSIGN_EQUALS
    (90) operator_binary_assignment -> . DOT_EQUALS
    (91) operator_binary_assignment -> . PLUS_EQUALS
    (92) operator_binary_assignment -> . MINUS_EQUALS
    (93) operator_binary_assignment -> . TIMES_EQUALS
    (94) operator_binary_assignment -> . DIVIDE_EQUALS
    (95) operator_binary_assignment -> . MODULUS_EQUALS
    (96) operator_binary_assignment -> . EXPONENT_EQUALS
    (97) operator_binary_assignment -> . AND_EQUALS
    (98) operator_binary_assignment -> . OR_EQUALS
    (99) operator_binary_computation -> . DOT
    (100) operator_binary_computation -> . PLUS
    (101) operator_binary_computation -> . MINUS
    (102) operator_binary_computation -> . TIMES
    (103) operator_binary_computation -> . DIVIDE
    (104) operator_binary_computation -> . MODULUS
    (105) operator_binary_computation -> . EXPONENT
    (106) operator_binary_computation -> . AND
    (107) operator_binary_computation -> . OR
    (108) operator_binary_comparison -> . IN
    (109) operator_binary_comparison -> . HAS
    (110) operator_binary_comparison -> . EQUIVALENCE_EQUAL
    (111) operator_binary_comparison -> . COMPARE_GT
    (112) operator_binary_comparison -> . COMPARE_GTET
    (113) operator_binary_comparison -> . COMPARE_LT
    (114) operator_binary_comparison -> . COMPARE_LTET

  ! shift/reduce conflict for LEFT_BOX resolved as shift.
    FUNCTION        reduce using rule 42 (stmt_s_return -> RETURN expression .)
    FOR             reduce using rule 42 (stmt_s_return -> RETURN expression .)
    WHILE           reduce using rule 42 (stmt_s_return -> RETURN expression .)
    IMPORT          reduce using rule 42 (stmt_s_return -> RETURN expression .)
    CONTINUE        reduce using rule 42 (stmt_s_return -> RETURN expression .)
    BREAK           reduce using rule 42 (stmt_s_return -> RETURN expression .)
    PASS            reduce using rule 42 (stmt_s_return -> RETURN expression .)
    RETURN          reduce using rule 42 (stmt_s_return -> RETURN expression .)
    LEFT_PAREN      reduce using rule 42 (stmt_s_return -> RETURN expression .)
    IDENTIFIER      reduce using rule 42 (stmt_s_return -> RETURN expression .)
    THIS            reduce using rule 42 (stmt_s_return -> RETURN expression .)
    IF              reduce using rule 42 (stmt_s_return -> RETURN expression .)
    BLANK           reduce using rule 42 (stmt_s_return -> RETURN expression .)
    NULL            reduce using rule 42 (stmt_s_return -> RETURN expression .)
    TRUE            reduce using rule 42 (stmt_s_return -> RETURN expression .)
    FALSE           reduce using rule 42 (stmt_s_return -> RETURN expression .)
    STRING_LITERAL  reduce using rule 42 (stmt_s_return -> RETURN expression .)
    NUMERIC_LITERAL reduce using rule 42 (stmt_s_return -> RETURN expression .)
    LEFT_CURLY_BRACE reduce using rule 42 (stmt_s_return -> RETURN expression .)
    NOT_EQUALS      reduce using rule 42 (stmt_s_return -> RETURN expression .)
    NOT             reduce using rule 42 (stmt_s_return -> RETURN expression .)
    ENDIF           reduce using rule 42 (stmt_s_return -> RETURN expression .)
    ENDFUNCTION     reduce using rule 42 (stmt_s_return -> RETURN expression .)
    $end            reduce using rule 42 (stmt_s_return -> RETURN expression .)
    ENDWHILE        reduce using rule 42 (stmt_s_return -> RETURN expression .)
    OTHERWISE       reduce using rule 42 (stmt_s_return -> RETURN expression .)
    ELIF            reduce using rule 42 (stmt_s_return -> RETURN expression .)
    ENDFOR          reduce using rule 42 (stmt_s_return -> RETURN expression .)
    LEFT_BOX        shift and go to state 100
    ASSIGN_EQUALS   shift and go to state 106
    DOT_EQUALS      shift and go to state 80
    PLUS_EQUALS     shift and go to state 105
    MINUS_EQUALS    shift and go to state 87
    TIMES_EQUALS    shift and go to state 96
    DIVIDE_EQUALS   shift and go to state 108
    MODULUS_EQUALS  shift and go to state 94
    EXPONENT_EQUALS shift and go to state 109
    AND_EQUALS      shift and go to state 98
    OR_EQUALS       shift and go to state 99
    DOT             shift and go to state 86
    PLUS            shift and go to state 91
    MINUS           shift and go to state 85
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95
    MODULUS         shift and go to state 90
    EXPONENT        shift and go to state 89
    AND             shift and go to state 93
    OR              shift and go to state 111
    IN              shift and go to state 101
    HAS             shift and go to state 88
    EQUIVALENCE_EQUAL shift and go to state 81
    COMPARE_GT      shift and go to state 84
    COMPARE_GTET    shift and go to state 104
    COMPARE_LT      shift and go to state 97
    COMPARE_LTET    shift and go to state 83

  ! LEFT_BOX        [ reduce using rule 42 (stmt_s_return -> RETURN expression .) ]

    operator_binary                shift and go to state 107
    operator_binary_computation    shift and go to state 82
    operator_binary_comparison     shift and go to state 110
    operator_rhs_array             shift and go to state 103
    operator_binary_assignment     shift and go to state 92

state 56

    (16) statement_compound -> stmt_c_if_group ENDIF .

    FUNCTION        reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    FOR             reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    WHILE           reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    IMPORT          reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    CONTINUE        reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    BREAK           reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    PASS            reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    RETURN          reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    LEFT_PAREN      reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    IDENTIFIER      reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    THIS            reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    IF              reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    BLANK           reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    NULL            reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    TRUE            reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    FALSE           reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    STRING_LITERAL  reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    NUMERIC_LITERAL reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    LEFT_BOX        reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    LEFT_CURLY_BRACE reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    NOT_EQUALS      reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    NOT             reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    ENDWHILE        reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    OTHERWISE       reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    ELIF            reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    ENDIF           reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    ENDFUNCTION     reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    ENDFOR          reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    $end            reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)



state 57

    (26) stmt_c_while -> WHILE expression . COLON ks ENDWHILE
    (54) expression -> expression . operator_rhs_array
    (55) expression -> expression . operator_binary expression
    (82) operator_rhs_array -> . LEFT_BOX array_operator_insides RIGHT_BOX
    (86) operator_binary -> . operator_binary_assignment
    (87) operator_binary -> . operator_binary_computation
    (88) operator_binary -> . operator_binary_comparison
    (89) operator_binary_assignment -> . ASSIGN_EQUALS
    (90) operator_binary_assignment -> . DOT_EQUALS
    (91) operator_binary_assignment -> . PLUS_EQUALS
    (92) operator_binary_assignment -> . MINUS_EQUALS
    (93) operator_binary_assignment -> . TIMES_EQUALS
    (94) operator_binary_assignment -> . DIVIDE_EQUALS
    (95) operator_binary_assignment -> . MODULUS_EQUALS
    (96) operator_binary_assignment -> . EXPONENT_EQUALS
    (97) operator_binary_assignment -> . AND_EQUALS
    (98) operator_binary_assignment -> . OR_EQUALS
    (99) operator_binary_computation -> . DOT
    (100) operator_binary_computation -> . PLUS
    (101) operator_binary_computation -> . MINUS
    (102) operator_binary_computation -> . TIMES
    (103) operator_binary_computation -> . DIVIDE
    (104) operator_binary_computation -> . MODULUS
    (105) operator_binary_computation -> . EXPONENT
    (106) operator_binary_computation -> . AND
    (107) operator_binary_computation -> . OR
    (108) operator_binary_comparison -> . IN
    (109) operator_binary_comparison -> . HAS
    (110) operator_binary_comparison -> . EQUIVALENCE_EQUAL
    (111) operator_binary_comparison -> . COMPARE_GT
    (112) operator_binary_comparison -> . COMPARE_GTET
    (113) operator_binary_comparison -> . COMPARE_LT
    (114) operator_binary_comparison -> . COMPARE_LTET

    COLON           shift and go to state 115
    LEFT_BOX        shift and go to state 100
    ASSIGN_EQUALS   shift and go to state 106
    DOT_EQUALS      shift and go to state 80
    PLUS_EQUALS     shift and go to state 105
    MINUS_EQUALS    shift and go to state 87
    TIMES_EQUALS    shift and go to state 96
    DIVIDE_EQUALS   shift and go to state 108
    MODULUS_EQUALS  shift and go to state 94
    EXPONENT_EQUALS shift and go to state 109
    AND_EQUALS      shift and go to state 98
    OR_EQUALS       shift and go to state 99
    DOT             shift and go to state 86
    PLUS            shift and go to state 91
    MINUS           shift and go to state 85
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95
    MODULUS         shift and go to state 90
    EXPONENT        shift and go to state 89
    AND             shift and go to state 93
    OR              shift and go to state 111
    IN              shift and go to state 101
    HAS             shift and go to state 88
    EQUIVALENCE_EQUAL shift and go to state 81
    COMPARE_GT      shift and go to state 84
    COMPARE_GTET    shift and go to state 104
    COMPARE_LT      shift and go to state 97
    COMPARE_LTET    shift and go to state 83


    operator_binary                shift and go to state 107
    operator_binary_computation    shift and go to state 82
    operator_binary_comparison     shift and go to state 110
    operator_rhs_array             shift and go to state 103
    operator_binary_assignment     shift and go to state 92

state 58

    (52) expression -> LEFT_PAREN expression . RIGHT_PAREN
    (54) expression -> expression . operator_rhs_array
    (55) expression -> expression . operator_binary expression
    (82) operator_rhs_array -> . LEFT_BOX array_operator_insides RIGHT_BOX
    (86) operator_binary -> . operator_binary_assignment
    (87) operator_binary -> . operator_binary_computation
    (88) operator_binary -> . operator_binary_comparison
    (89) operator_binary_assignment -> . ASSIGN_EQUALS
    (90) operator_binary_assignment -> . DOT_EQUALS
    (91) operator_binary_assignment -> . PLUS_EQUALS
    (92) operator_binary_assignment -> . MINUS_EQUALS
    (93) operator_binary_assignment -> . TIMES_EQUALS
    (94) operator_binary_assignment -> . DIVIDE_EQUALS
    (95) operator_binary_assignment -> . MODULUS_EQUALS
    (96) operator_binary_assignment -> . EXPONENT_EQUALS
    (97) operator_binary_assignment -> . AND_EQUALS
    (98) operator_binary_assignment -> . OR_EQUALS
    (99) operator_binary_computation -> . DOT
    (100) operator_binary_computation -> . PLUS
    (101) operator_binary_computation -> . MINUS
    (102) operator_binary_computation -> . TIMES
    (103) operator_binary_computation -> . DIVIDE
    (104) operator_binary_computation -> . MODULUS
    (105) operator_binary_computation -> . EXPONENT
    (106) operator_binary_computation -> . AND
    (107) operator_binary_computation -> . OR
    (108) operator_binary_comparison -> . IN
    (109) operator_binary_comparison -> . HAS
    (110) operator_binary_comparison -> . EQUIVALENCE_EQUAL
    (111) operator_binary_comparison -> . COMPARE_GT
    (112) operator_binary_comparison -> . COMPARE_GTET
    (113) operator_binary_comparison -> . COMPARE_LT
    (114) operator_binary_comparison -> . COMPARE_LTET

    RIGHT_PAREN     shift and go to state 116
    LEFT_BOX        shift and go to state 100
    ASSIGN_EQUALS   shift and go to state 106
    DOT_EQUALS      shift and go to state 80
    PLUS_EQUALS     shift and go to state 105
    MINUS_EQUALS    shift and go to state 87
    TIMES_EQUALS    shift and go to state 96
    DIVIDE_EQUALS   shift and go to state 108
    MODULUS_EQUALS  shift and go to state 94
    EXPONENT_EQUALS shift and go to state 109
    AND_EQUALS      shift and go to state 98
    OR_EQUALS       shift and go to state 99
    DOT             shift and go to state 86
    PLUS            shift and go to state 91
    MINUS           shift and go to state 85
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95
    MODULUS         shift and go to state 90
    EXPONENT        shift and go to state 89
    AND             shift and go to state 93
    OR              shift and go to state 111
    IN              shift and go to state 101
    HAS             shift and go to state 88
    EQUIVALENCE_EQUAL shift and go to state 81
    COMPARE_GT      shift and go to state 84
    COMPARE_GTET    shift and go to state 104
    COMPARE_LT      shift and go to state 97
    COMPARE_LTET    shift and go to state 83


    operator_binary                shift and go to state 107
    operator_binary_computation    shift and go to state 82
    operator_binary_comparison     shift and go to state 110
    operator_rhs_array             shift and go to state 103
    operator_binary_assignment     shift and go to state 92

state 59

    (45) dotted_identifier -> IDENTIFIER .
    (47) dotted_identifier -> IDENTIFIER . DOT dotted_identifier

    FUNCTION        reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    FOR             reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    WHILE           reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    IMPORT          reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    CONTINUE        reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    BREAK           reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    PASS            reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    RETURN          reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    LEFT_PAREN      reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    THIS            reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    IF              reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    BLANK           reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    NULL            reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    TRUE            reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    FALSE           reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    STRING_LITERAL  reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    NUMERIC_LITERAL reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    LEFT_BOX        reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    LEFT_CURLY_BRACE reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    NOT             reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    $end            reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    ENDWHILE        reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    ENDFUNCTION     reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    ENDIF           reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    OTHERWISE       reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    ELIF            reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    ENDFOR          reduce using rule 45 (dotted_identifier -> IDENTIFIER .)
    DOT             shift and go to state 117



state 60

    (44) stmt_s_import -> IMPORT dotted_identifier .

    FUNCTION        reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    FOR             reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    WHILE           reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    IMPORT          reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    CONTINUE        reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    BREAK           reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    PASS            reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    RETURN          reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    LEFT_PAREN      reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    IDENTIFIER      reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    THIS            reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    IF              reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    BLANK           reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    NULL            reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    TRUE            reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    FALSE           reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    STRING_LITERAL  reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    NUMERIC_LITERAL reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    LEFT_BOX        reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    LEFT_CURLY_BRACE reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    NOT_EQUALS      reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    NOT             reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    ENDFOR          reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    ENDFUNCTION     reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    ENDWHILE        reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    OTHERWISE       reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    ELIF            reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    ENDIF           reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    $end            reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)



state 61

    (46) dotted_identifier -> TIMES .

    FUNCTION        reduce using rule 46 (dotted_identifier -> TIMES .)
    FOR             reduce using rule 46 (dotted_identifier -> TIMES .)
    WHILE           reduce using rule 46 (dotted_identifier -> TIMES .)
    IMPORT          reduce using rule 46 (dotted_identifier -> TIMES .)
    CONTINUE        reduce using rule 46 (dotted_identifier -> TIMES .)
    BREAK           reduce using rule 46 (dotted_identifier -> TIMES .)
    PASS            reduce using rule 46 (dotted_identifier -> TIMES .)
    RETURN          reduce using rule 46 (dotted_identifier -> TIMES .)
    LEFT_PAREN      reduce using rule 46 (dotted_identifier -> TIMES .)
    IDENTIFIER      reduce using rule 46 (dotted_identifier -> TIMES .)
    THIS            reduce using rule 46 (dotted_identifier -> TIMES .)
    IF              reduce using rule 46 (dotted_identifier -> TIMES .)
    BLANK           reduce using rule 46 (dotted_identifier -> TIMES .)
    NULL            reduce using rule 46 (dotted_identifier -> TIMES .)
    TRUE            reduce using rule 46 (dotted_identifier -> TIMES .)
    FALSE           reduce using rule 46 (dotted_identifier -> TIMES .)
    STRING_LITERAL  reduce using rule 46 (dotted_identifier -> TIMES .)
    NUMERIC_LITERAL reduce using rule 46 (dotted_identifier -> TIMES .)
    LEFT_BOX        reduce using rule 46 (dotted_identifier -> TIMES .)
    LEFT_CURLY_BRACE reduce using rule 46 (dotted_identifier -> TIMES .)
    NOT_EQUALS      reduce using rule 46 (dotted_identifier -> TIMES .)
    NOT             reduce using rule 46 (dotted_identifier -> TIMES .)
    $end            reduce using rule 46 (dotted_identifier -> TIMES .)
    ENDWHILE        reduce using rule 46 (dotted_identifier -> TIMES .)
    ENDFUNCTION     reduce using rule 46 (dotted_identifier -> TIMES .)
    ENDIF           reduce using rule 46 (dotted_identifier -> TIMES .)
    OTHERWISE       reduce using rule 46 (dotted_identifier -> TIMES .)
    ELIF            reduce using rule 46 (dotted_identifier -> TIMES .)
    ENDFOR          reduce using rule 46 (dotted_identifier -> TIMES .)



state 62

    (59) arguments -> LEFT_PAREN . exp_list RIGHT_PAREN
    (60) exp_list -> . epsilon
    (61) exp_list -> . expression
    (62) exp_list -> . expression COMMA exp_list
    (6) epsilon -> .
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    RIGHT_PAREN     reduce using rule 6 (epsilon -> .)
    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    FUNCTION        shift and go to state 53
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    exp_list                       shift and go to state 118
    operator_unary_lhs_computation shift and go to state 43
    epsilon                        shift and go to state 113
    array_literal                  shift and go to state 27
    function_call                  shift and go to state 29
    operator_unary_lhs             shift and go to state 26
    literal                        shift and go to state 16
    object_literal                 shift and go to state 42
    operator_unary_lhs_assignment  shift and go to state 8
    function_anonymous             shift and go to state 54
    expression                     shift and go to state 119

state 63

    (58) function_call -> IDENTIFIER arguments .

    COLON           reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    LEFT_BOX        reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    ASSIGN_EQUALS   reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    DOT_EQUALS      reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    PLUS_EQUALS     reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    MINUS_EQUALS    reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    TIMES_EQUALS    reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    DIVIDE_EQUALS   reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    MODULUS_EQUALS  reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    EXPONENT_EQUALS reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    AND_EQUALS      reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    OR_EQUALS       reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    DOT             reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    PLUS            reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    MINUS           reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    TIMES           reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    DIVIDE          reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    MODULUS         reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    EXPONENT        reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    AND             reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    OR              reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    IN              reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    HAS             reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    EQUIVALENCE_EQUAL reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    COMPARE_GT      reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    COMPARE_GTET    reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    COMPARE_LT      reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    COMPARE_LTET    reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    COMMA           reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    RIGHT_BOX       reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    RIGHT_PAREN     reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    FUNCTION        reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    FOR             reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    WHILE           reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    IMPORT          reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    CONTINUE        reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    BREAK           reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    PASS            reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    RETURN          reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    LEFT_PAREN      reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    IDENTIFIER      reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    THIS            reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    IF              reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    BLANK           reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    NULL            reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    TRUE            reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    FALSE           reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    STRING_LITERAL  reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    NUMERIC_LITERAL reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    LEFT_CURLY_BRACE reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    NOT_EQUALS      reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    NOT             reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    ENDWHILE        reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    ENDFUNCTION     reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    RIGHT_CURLY_BRACE reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    $end            reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    ENDIF           reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    OTHERWISE       reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    ELIF            reduce using rule 58 (function_call -> IDENTIFIER arguments .)
    ENDFOR          reduce using rule 58 (function_call -> IDENTIFIER arguments .)



state 64

    (9) function_anonymous -> FUNCTION parameters . COLON ks ENDFUNCTION

    COLON           shift and go to state 120



state 65

    (10) parameters -> LEFT_PAREN . param_list RIGHT_PAREN
    (11) param_list -> . epsilon
    (12) param_list -> . IDENTIFIER
    (13) param_list -> . IDENTIFIER COMMA param_list
    (6) epsilon -> .

    IDENTIFIER      shift and go to state 123
    RIGHT_PAREN     reduce using rule 6 (epsilon -> .)


    param_list                     shift and go to state 121
    epsilon                        shift and go to state 122

state 66

    (7) function_definition -> FUNCTION IDENTIFIER . parameters COLON ks ENDFUNCTION
    (10) parameters -> . LEFT_PAREN param_list RIGHT_PAREN

    LEFT_PAREN      shift and go to state 65


    parameters                     shift and go to state 124

state 67

    (25) stmt_c_for -> FOR IDENTIFIER . IN expression COLON ks ENDFOR

    IN              shift and go to state 125



state 68

    (53) expression -> operator_unary_lhs expression .
    (54) expression -> expression . operator_rhs_array
    (55) expression -> expression . operator_binary expression
    (82) operator_rhs_array -> . LEFT_BOX array_operator_insides RIGHT_BOX
    (86) operator_binary -> . operator_binary_assignment
    (87) operator_binary -> . operator_binary_computation
    (88) operator_binary -> . operator_binary_comparison
    (89) operator_binary_assignment -> . ASSIGN_EQUALS
    (90) operator_binary_assignment -> . DOT_EQUALS
    (91) operator_binary_assignment -> . PLUS_EQUALS
    (92) operator_binary_assignment -> . MINUS_EQUALS
    (93) operator_binary_assignment -> . TIMES_EQUALS
    (94) operator_binary_assignment -> . DIVIDE_EQUALS
    (95) operator_binary_assignment -> . MODULUS_EQUALS
    (96) operator_binary_assignment -> . EXPONENT_EQUALS
    (97) operator_binary_assignment -> . AND_EQUALS
    (98) operator_binary_assignment -> . OR_EQUALS
    (99) operator_binary_computation -> . DOT
    (100) operator_binary_computation -> . PLUS
    (101) operator_binary_computation -> . MINUS
    (102) operator_binary_computation -> . TIMES
    (103) operator_binary_computation -> . DIVIDE
    (104) operator_binary_computation -> . MODULUS
    (105) operator_binary_computation -> . EXPONENT
    (106) operator_binary_computation -> . AND
    (107) operator_binary_computation -> . OR
    (108) operator_binary_comparison -> . IN
    (109) operator_binary_comparison -> . HAS
    (110) operator_binary_comparison -> . EQUIVALENCE_EQUAL
    (111) operator_binary_comparison -> . COMPARE_GT
    (112) operator_binary_comparison -> . COMPARE_GTET
    (113) operator_binary_comparison -> . COMPARE_LT
    (114) operator_binary_comparison -> . COMPARE_LTET

  ! shift/reduce conflict for LEFT_BOX resolved as shift.
  ! shift/reduce conflict for ASSIGN_EQUALS resolved as shift.
  ! shift/reduce conflict for DOT_EQUALS resolved as shift.
  ! shift/reduce conflict for PLUS_EQUALS resolved as shift.
  ! shift/reduce conflict for MINUS_EQUALS resolved as shift.
  ! shift/reduce conflict for TIMES_EQUALS resolved as shift.
  ! shift/reduce conflict for DIVIDE_EQUALS resolved as shift.
  ! shift/reduce conflict for MODULUS_EQUALS resolved as shift.
  ! shift/reduce conflict for EXPONENT_EQUALS resolved as shift.
  ! shift/reduce conflict for AND_EQUALS resolved as shift.
  ! shift/reduce conflict for OR_EQUALS resolved as shift.
  ! shift/reduce conflict for DOT resolved as shift.
  ! shift/reduce conflict for PLUS resolved as shift.
  ! shift/reduce conflict for MINUS resolved as shift.
  ! shift/reduce conflict for TIMES resolved as shift.
  ! shift/reduce conflict for DIVIDE resolved as shift.
  ! shift/reduce conflict for MODULUS resolved as shift.
  ! shift/reduce conflict for EXPONENT resolved as shift.
  ! shift/reduce conflict for AND resolved as shift.
  ! shift/reduce conflict for OR resolved as shift.
  ! shift/reduce conflict for IN resolved as shift.
  ! shift/reduce conflict for HAS resolved as shift.
  ! shift/reduce conflict for EQUIVALENCE_EQUAL resolved as shift.
  ! shift/reduce conflict for COMPARE_GT resolved as shift.
  ! shift/reduce conflict for COMPARE_GTET resolved as shift.
  ! shift/reduce conflict for COMPARE_LT resolved as shift.
  ! shift/reduce conflict for COMPARE_LTET resolved as shift.
    COLON           reduce using rule 53 (expression -> operator_unary_lhs expression .)
    FOR             reduce using rule 53 (expression -> operator_unary_lhs expression .)
    COMMA           reduce using rule 53 (expression -> operator_unary_lhs expression .)
    RIGHT_BOX       reduce using rule 53 (expression -> operator_unary_lhs expression .)
    FUNCTION        reduce using rule 53 (expression -> operator_unary_lhs expression .)
    WHILE           reduce using rule 53 (expression -> operator_unary_lhs expression .)
    IMPORT          reduce using rule 53 (expression -> operator_unary_lhs expression .)
    CONTINUE        reduce using rule 53 (expression -> operator_unary_lhs expression .)
    BREAK           reduce using rule 53 (expression -> operator_unary_lhs expression .)
    PASS            reduce using rule 53 (expression -> operator_unary_lhs expression .)
    RETURN          reduce using rule 53 (expression -> operator_unary_lhs expression .)
    LEFT_PAREN      reduce using rule 53 (expression -> operator_unary_lhs expression .)
    IDENTIFIER      reduce using rule 53 (expression -> operator_unary_lhs expression .)
    THIS            reduce using rule 53 (expression -> operator_unary_lhs expression .)
    IF              reduce using rule 53 (expression -> operator_unary_lhs expression .)
    BLANK           reduce using rule 53 (expression -> operator_unary_lhs expression .)
    NULL            reduce using rule 53 (expression -> operator_unary_lhs expression .)
    TRUE            reduce using rule 53 (expression -> operator_unary_lhs expression .)
    FALSE           reduce using rule 53 (expression -> operator_unary_lhs expression .)
    STRING_LITERAL  reduce using rule 53 (expression -> operator_unary_lhs expression .)
    NUMERIC_LITERAL reduce using rule 53 (expression -> operator_unary_lhs expression .)
    LEFT_CURLY_BRACE reduce using rule 53 (expression -> operator_unary_lhs expression .)
    NOT_EQUALS      reduce using rule 53 (expression -> operator_unary_lhs expression .)
    NOT             reduce using rule 53 (expression -> operator_unary_lhs expression .)
    $end            reduce using rule 53 (expression -> operator_unary_lhs expression .)
    ENDWHILE        reduce using rule 53 (expression -> operator_unary_lhs expression .)
    ENDIF           reduce using rule 53 (expression -> operator_unary_lhs expression .)
    RIGHT_PAREN     reduce using rule 53 (expression -> operator_unary_lhs expression .)
    ENDFOR          reduce using rule 53 (expression -> operator_unary_lhs expression .)
    ENDFUNCTION     reduce using rule 53 (expression -> operator_unary_lhs expression .)
    OTHERWISE       reduce using rule 53 (expression -> operator_unary_lhs expression .)
    ELIF            reduce using rule 53 (expression -> operator_unary_lhs expression .)
    RIGHT_CURLY_BRACE reduce using rule 53 (expression -> operator_unary_lhs expression .)
    LEFT_BOX        shift and go to state 100
    ASSIGN_EQUALS   shift and go to state 106
    DOT_EQUALS      shift and go to state 80
    PLUS_EQUALS     shift and go to state 105
    MINUS_EQUALS    shift and go to state 87
    TIMES_EQUALS    shift and go to state 96
    DIVIDE_EQUALS   shift and go to state 108
    MODULUS_EQUALS  shift and go to state 94
    EXPONENT_EQUALS shift and go to state 109
    AND_EQUALS      shift and go to state 98
    OR_EQUALS       shift and go to state 99
    DOT             shift and go to state 86
    PLUS            shift and go to state 91
    MINUS           shift and go to state 85
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95
    MODULUS         shift and go to state 90
    EXPONENT        shift and go to state 89
    AND             shift and go to state 93
    OR              shift and go to state 111
    IN              shift and go to state 101
    HAS             shift and go to state 88
    EQUIVALENCE_EQUAL shift and go to state 81
    COMPARE_GT      shift and go to state 84
    COMPARE_GTET    shift and go to state 104
    COMPARE_LT      shift and go to state 97
    COMPARE_LTET    shift and go to state 83

  ! LEFT_BOX        [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! ASSIGN_EQUALS   [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! DOT_EQUALS      [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! PLUS_EQUALS     [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! MINUS_EQUALS    [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! TIMES_EQUALS    [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! DIVIDE_EQUALS   [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! MODULUS_EQUALS  [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! EXPONENT_EQUALS [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! AND_EQUALS      [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! OR_EQUALS       [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! DOT             [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! PLUS            [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! TIMES           [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! DIVIDE          [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! MODULUS         [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! EXPONENT        [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! AND             [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! OR              [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! IN              [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! HAS             [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! EQUIVALENCE_EQUAL [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! COMPARE_GT      [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! COMPARE_GTET    [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! COMPARE_LT      [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]
  ! COMPARE_LTET    [ reduce using rule 53 (expression -> operator_unary_lhs expression .) ]

    operator_binary                shift and go to state 107
    operator_binary_computation    shift and go to state 82
    operator_binary_comparison     shift and go to state 110
    operator_rhs_array             shift and go to state 103
    operator_binary_assignment     shift and go to state 92

state 69

    (29) stmt_c_elif_block -> stmt_c_elif .
    (30) stmt_c_elif_block -> stmt_c_elif . stmt_c_elif_block
    (29) stmt_c_elif_block -> . stmt_c_elif
    (30) stmt_c_elif_block -> . stmt_c_elif stmt_c_elif_block
    (31) stmt_c_elif -> . ELIF expression COLON ks

    OTHERWISE       reduce using rule 29 (stmt_c_elif_block -> stmt_c_elif .)
    ENDIF           reduce using rule 29 (stmt_c_elif_block -> stmt_c_elif .)
    ELIF            shift and go to state 71


    stmt_c_elif                    shift and go to state 69
    stmt_c_elif_block              shift and go to state 126

state 70

    (23) stmt_c_if_FE -> stmt_c_if stmt_c_elif_block .
    (24) stmt_c_if_FEO -> stmt_c_if stmt_c_elif_block . stmt_c_otherwise
    (28) stmt_c_otherwise -> . OTHERWISE COLON ks

    ENDIF           reduce using rule 23 (stmt_c_if_FE -> stmt_c_if stmt_c_elif_block .)
    OTHERWISE       shift and go to state 73


    stmt_c_otherwise               shift and go to state 127

state 71

    (31) stmt_c_elif -> ELIF . expression COLON ks
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    FUNCTION        shift and go to state 53
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    operator_unary_lhs_computation shift and go to state 43
    array_literal                  shift and go to state 27
    function_call                  shift and go to state 29
    operator_unary_lhs             shift and go to state 26
    literal                        shift and go to state 16
    object_literal                 shift and go to state 42
    operator_unary_lhs_assignment  shift and go to state 8
    function_anonymous             shift and go to state 54
    expression                     shift and go to state 128

state 72

    (22) stmt_c_if_FO -> stmt_c_if stmt_c_otherwise .

    ENDIF           reduce using rule 22 (stmt_c_if_FO -> stmt_c_if stmt_c_otherwise .)



state 73

    (28) stmt_c_otherwise -> OTHERWISE . COLON ks

    COLON           shift and go to state 129



state 74

    (27) stmt_c_if -> IF expression . COLON ks
    (54) expression -> expression . operator_rhs_array
    (55) expression -> expression . operator_binary expression
    (82) operator_rhs_array -> . LEFT_BOX array_operator_insides RIGHT_BOX
    (86) operator_binary -> . operator_binary_assignment
    (87) operator_binary -> . operator_binary_computation
    (88) operator_binary -> . operator_binary_comparison
    (89) operator_binary_assignment -> . ASSIGN_EQUALS
    (90) operator_binary_assignment -> . DOT_EQUALS
    (91) operator_binary_assignment -> . PLUS_EQUALS
    (92) operator_binary_assignment -> . MINUS_EQUALS
    (93) operator_binary_assignment -> . TIMES_EQUALS
    (94) operator_binary_assignment -> . DIVIDE_EQUALS
    (95) operator_binary_assignment -> . MODULUS_EQUALS
    (96) operator_binary_assignment -> . EXPONENT_EQUALS
    (97) operator_binary_assignment -> . AND_EQUALS
    (98) operator_binary_assignment -> . OR_EQUALS
    (99) operator_binary_computation -> . DOT
    (100) operator_binary_computation -> . PLUS
    (101) operator_binary_computation -> . MINUS
    (102) operator_binary_computation -> . TIMES
    (103) operator_binary_computation -> . DIVIDE
    (104) operator_binary_computation -> . MODULUS
    (105) operator_binary_computation -> . EXPONENT
    (106) operator_binary_computation -> . AND
    (107) operator_binary_computation -> . OR
    (108) operator_binary_comparison -> . IN
    (109) operator_binary_comparison -> . HAS
    (110) operator_binary_comparison -> . EQUIVALENCE_EQUAL
    (111) operator_binary_comparison -> . COMPARE_GT
    (112) operator_binary_comparison -> . COMPARE_GTET
    (113) operator_binary_comparison -> . COMPARE_LT
    (114) operator_binary_comparison -> . COMPARE_LTET

    COLON           shift and go to state 130
    LEFT_BOX        shift and go to state 100
    ASSIGN_EQUALS   shift and go to state 106
    DOT_EQUALS      shift and go to state 80
    PLUS_EQUALS     shift and go to state 105
    MINUS_EQUALS    shift and go to state 87
    TIMES_EQUALS    shift and go to state 96
    DIVIDE_EQUALS   shift and go to state 108
    MODULUS_EQUALS  shift and go to state 94
    EXPONENT_EQUALS shift and go to state 109
    AND_EQUALS      shift and go to state 98
    OR_EQUALS       shift and go to state 99
    DOT             shift and go to state 86
    PLUS            shift and go to state 91
    MINUS           shift and go to state 85
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95
    MODULUS         shift and go to state 90
    EXPONENT        shift and go to state 89
    AND             shift and go to state 93
    OR              shift and go to state 111
    IN              shift and go to state 101
    HAS             shift and go to state 88
    EQUIVALENCE_EQUAL shift and go to state 81
    COMPARE_GT      shift and go to state 84
    COMPARE_GTET    shift and go to state 104
    COMPARE_LT      shift and go to state 97
    COMPARE_LTET    shift and go to state 83


    operator_binary                shift and go to state 107
    operator_binary_computation    shift and go to state 82
    operator_binary_comparison     shift and go to state 110
    operator_rhs_array             shift and go to state 103
    operator_binary_assignment     shift and go to state 92

state 75

    (1) ks -> element ks .

    ENDFOR          reduce using rule 1 (ks -> element ks .)
    $end            reduce using rule 1 (ks -> element ks .)
    ENDWHILE        reduce using rule 1 (ks -> element ks .)
    ENDFUNCTION     reduce using rule 1 (ks -> element ks .)
    ENDIF           reduce using rule 1 (ks -> element ks .)
    OTHERWISE       reduce using rule 1 (ks -> element ks .)
    ELIF            reduce using rule 1 (ks -> element ks .)



state 76

    (75) pair_list -> key_value_pair .
    (76) pair_list -> key_value_pair . COMMA pair_list

    RIGHT_CURLY_BRACE reduce using rule 75 (pair_list -> key_value_pair .)
    COMMA           shift and go to state 131



state 77

    (73) object_literal -> LEFT_CURLY_BRACE pair_list . RIGHT_CURLY_BRACE

    RIGHT_CURLY_BRACE shift and go to state 132



state 78

    (74) pair_list -> epsilon .

    RIGHT_CURLY_BRACE reduce using rule 74 (pair_list -> epsilon .)



state 79

    (77) key_value_pair -> IDENTIFIER . COLON expression

    COLON           shift and go to state 133



state 80

    (90) operator_binary_assignment -> DOT_EQUALS .

    LEFT_PAREN      reduce using rule 90 (operator_binary_assignment -> DOT_EQUALS .)
    IDENTIFIER      reduce using rule 90 (operator_binary_assignment -> DOT_EQUALS .)
    THIS            reduce using rule 90 (operator_binary_assignment -> DOT_EQUALS .)
    BLANK           reduce using rule 90 (operator_binary_assignment -> DOT_EQUALS .)
    NULL            reduce using rule 90 (operator_binary_assignment -> DOT_EQUALS .)
    TRUE            reduce using rule 90 (operator_binary_assignment -> DOT_EQUALS .)
    FALSE           reduce using rule 90 (operator_binary_assignment -> DOT_EQUALS .)
    STRING_LITERAL  reduce using rule 90 (operator_binary_assignment -> DOT_EQUALS .)
    NUMERIC_LITERAL reduce using rule 90 (operator_binary_assignment -> DOT_EQUALS .)
    FUNCTION        reduce using rule 90 (operator_binary_assignment -> DOT_EQUALS .)
    LEFT_BOX        reduce using rule 90 (operator_binary_assignment -> DOT_EQUALS .)
    LEFT_CURLY_BRACE reduce using rule 90 (operator_binary_assignment -> DOT_EQUALS .)
    NOT_EQUALS      reduce using rule 90 (operator_binary_assignment -> DOT_EQUALS .)
    NOT             reduce using rule 90 (operator_binary_assignment -> DOT_EQUALS .)



state 81

    (110) operator_binary_comparison -> EQUIVALENCE_EQUAL .

    LEFT_PAREN      reduce using rule 110 (operator_binary_comparison -> EQUIVALENCE_EQUAL .)
    IDENTIFIER      reduce using rule 110 (operator_binary_comparison -> EQUIVALENCE_EQUAL .)
    THIS            reduce using rule 110 (operator_binary_comparison -> EQUIVALENCE_EQUAL .)
    BLANK           reduce using rule 110 (operator_binary_comparison -> EQUIVALENCE_EQUAL .)
    NULL            reduce using rule 110 (operator_binary_comparison -> EQUIVALENCE_EQUAL .)
    TRUE            reduce using rule 110 (operator_binary_comparison -> EQUIVALENCE_EQUAL .)
    FALSE           reduce using rule 110 (operator_binary_comparison -> EQUIVALENCE_EQUAL .)
    STRING_LITERAL  reduce using rule 110 (operator_binary_comparison -> EQUIVALENCE_EQUAL .)
    NUMERIC_LITERAL reduce using rule 110 (operator_binary_comparison -> EQUIVALENCE_EQUAL .)
    FUNCTION        reduce using rule 110 (operator_binary_comparison -> EQUIVALENCE_EQUAL .)
    LEFT_BOX        reduce using rule 110 (operator_binary_comparison -> EQUIVALENCE_EQUAL .)
    LEFT_CURLY_BRACE reduce using rule 110 (operator_binary_comparison -> EQUIVALENCE_EQUAL .)
    NOT_EQUALS      reduce using rule 110 (operator_binary_comparison -> EQUIVALENCE_EQUAL .)
    NOT             reduce using rule 110 (operator_binary_comparison -> EQUIVALENCE_EQUAL .)



state 82

    (87) operator_binary -> operator_binary_computation .

    LEFT_PAREN      reduce using rule 87 (operator_binary -> operator_binary_computation .)
    IDENTIFIER      reduce using rule 87 (operator_binary -> operator_binary_computation .)
    THIS            reduce using rule 87 (operator_binary -> operator_binary_computation .)
    BLANK           reduce using rule 87 (operator_binary -> operator_binary_computation .)
    NULL            reduce using rule 87 (operator_binary -> operator_binary_computation .)
    TRUE            reduce using rule 87 (operator_binary -> operator_binary_computation .)
    FALSE           reduce using rule 87 (operator_binary -> operator_binary_computation .)
    STRING_LITERAL  reduce using rule 87 (operator_binary -> operator_binary_computation .)
    NUMERIC_LITERAL reduce using rule 87 (operator_binary -> operator_binary_computation .)
    FUNCTION        reduce using rule 87 (operator_binary -> operator_binary_computation .)
    LEFT_BOX        reduce using rule 87 (operator_binary -> operator_binary_computation .)
    LEFT_CURLY_BRACE reduce using rule 87 (operator_binary -> operator_binary_computation .)
    NOT_EQUALS      reduce using rule 87 (operator_binary -> operator_binary_computation .)
    NOT             reduce using rule 87 (operator_binary -> operator_binary_computation .)



state 83

    (114) operator_binary_comparison -> COMPARE_LTET .

    LEFT_PAREN      reduce using rule 114 (operator_binary_comparison -> COMPARE_LTET .)
    IDENTIFIER      reduce using rule 114 (operator_binary_comparison -> COMPARE_LTET .)
    THIS            reduce using rule 114 (operator_binary_comparison -> COMPARE_LTET .)
    BLANK           reduce using rule 114 (operator_binary_comparison -> COMPARE_LTET .)
    NULL            reduce using rule 114 (operator_binary_comparison -> COMPARE_LTET .)
    TRUE            reduce using rule 114 (operator_binary_comparison -> COMPARE_LTET .)
    FALSE           reduce using rule 114 (operator_binary_comparison -> COMPARE_LTET .)
    STRING_LITERAL  reduce using rule 114 (operator_binary_comparison -> COMPARE_LTET .)
    NUMERIC_LITERAL reduce using rule 114 (operator_binary_comparison -> COMPARE_LTET .)
    FUNCTION        reduce using rule 114 (operator_binary_comparison -> COMPARE_LTET .)
    LEFT_BOX        reduce using rule 114 (operator_binary_comparison -> COMPARE_LTET .)
    LEFT_CURLY_BRACE reduce using rule 114 (operator_binary_comparison -> COMPARE_LTET .)
    NOT_EQUALS      reduce using rule 114 (operator_binary_comparison -> COMPARE_LTET .)
    NOT             reduce using rule 114 (operator_binary_comparison -> COMPARE_LTET .)



state 84

    (111) operator_binary_comparison -> COMPARE_GT .

    LEFT_PAREN      reduce using rule 111 (operator_binary_comparison -> COMPARE_GT .)
    IDENTIFIER      reduce using rule 111 (operator_binary_comparison -> COMPARE_GT .)
    THIS            reduce using rule 111 (operator_binary_comparison -> COMPARE_GT .)
    BLANK           reduce using rule 111 (operator_binary_comparison -> COMPARE_GT .)
    NULL            reduce using rule 111 (operator_binary_comparison -> COMPARE_GT .)
    TRUE            reduce using rule 111 (operator_binary_comparison -> COMPARE_GT .)
    FALSE           reduce using rule 111 (operator_binary_comparison -> COMPARE_GT .)
    STRING_LITERAL  reduce using rule 111 (operator_binary_comparison -> COMPARE_GT .)
    NUMERIC_LITERAL reduce using rule 111 (operator_binary_comparison -> COMPARE_GT .)
    FUNCTION        reduce using rule 111 (operator_binary_comparison -> COMPARE_GT .)
    LEFT_BOX        reduce using rule 111 (operator_binary_comparison -> COMPARE_GT .)
    LEFT_CURLY_BRACE reduce using rule 111 (operator_binary_comparison -> COMPARE_GT .)
    NOT_EQUALS      reduce using rule 111 (operator_binary_comparison -> COMPARE_GT .)
    NOT             reduce using rule 111 (operator_binary_comparison -> COMPARE_GT .)



state 85

    (101) operator_binary_computation -> MINUS .

    LEFT_PAREN      reduce using rule 101 (operator_binary_computation -> MINUS .)
    IDENTIFIER      reduce using rule 101 (operator_binary_computation -> MINUS .)
    THIS            reduce using rule 101 (operator_binary_computation -> MINUS .)
    BLANK           reduce using rule 101 (operator_binary_computation -> MINUS .)
    NULL            reduce using rule 101 (operator_binary_computation -> MINUS .)
    TRUE            reduce using rule 101 (operator_binary_computation -> MINUS .)
    FALSE           reduce using rule 101 (operator_binary_computation -> MINUS .)
    STRING_LITERAL  reduce using rule 101 (operator_binary_computation -> MINUS .)
    NUMERIC_LITERAL reduce using rule 101 (operator_binary_computation -> MINUS .)
    FUNCTION        reduce using rule 101 (operator_binary_computation -> MINUS .)
    LEFT_BOX        reduce using rule 101 (operator_binary_computation -> MINUS .)
    LEFT_CURLY_BRACE reduce using rule 101 (operator_binary_computation -> MINUS .)
    NOT_EQUALS      reduce using rule 101 (operator_binary_computation -> MINUS .)
    NOT             reduce using rule 101 (operator_binary_computation -> MINUS .)



state 86

    (99) operator_binary_computation -> DOT .

    LEFT_PAREN      reduce using rule 99 (operator_binary_computation -> DOT .)
    IDENTIFIER      reduce using rule 99 (operator_binary_computation -> DOT .)
    THIS            reduce using rule 99 (operator_binary_computation -> DOT .)
    BLANK           reduce using rule 99 (operator_binary_computation -> DOT .)
    NULL            reduce using rule 99 (operator_binary_computation -> DOT .)
    TRUE            reduce using rule 99 (operator_binary_computation -> DOT .)
    FALSE           reduce using rule 99 (operator_binary_computation -> DOT .)
    STRING_LITERAL  reduce using rule 99 (operator_binary_computation -> DOT .)
    NUMERIC_LITERAL reduce using rule 99 (operator_binary_computation -> DOT .)
    FUNCTION        reduce using rule 99 (operator_binary_computation -> DOT .)
    LEFT_BOX        reduce using rule 99 (operator_binary_computation -> DOT .)
    LEFT_CURLY_BRACE reduce using rule 99 (operator_binary_computation -> DOT .)
    NOT_EQUALS      reduce using rule 99 (operator_binary_computation -> DOT .)
    NOT             reduce using rule 99 (operator_binary_computation -> DOT .)



state 87

    (92) operator_binary_assignment -> MINUS_EQUALS .

    LEFT_PAREN      reduce using rule 92 (operator_binary_assignment -> MINUS_EQUALS .)
    IDENTIFIER      reduce using rule 92 (operator_binary_assignment -> MINUS_EQUALS .)
    THIS            reduce using rule 92 (operator_binary_assignment -> MINUS_EQUALS .)
    BLANK           reduce using rule 92 (operator_binary_assignment -> MINUS_EQUALS .)
    NULL            reduce using rule 92 (operator_binary_assignment -> MINUS_EQUALS .)
    TRUE            reduce using rule 92 (operator_binary_assignment -> MINUS_EQUALS .)
    FALSE           reduce using rule 92 (operator_binary_assignment -> MINUS_EQUALS .)
    STRING_LITERAL  reduce using rule 92 (operator_binary_assignment -> MINUS_EQUALS .)
    NUMERIC_LITERAL reduce using rule 92 (operator_binary_assignment -> MINUS_EQUALS .)
    FUNCTION        reduce using rule 92 (operator_binary_assignment -> MINUS_EQUALS .)
    LEFT_BOX        reduce using rule 92 (operator_binary_assignment -> MINUS_EQUALS .)
    LEFT_CURLY_BRACE reduce using rule 92 (operator_binary_assignment -> MINUS_EQUALS .)
    NOT_EQUALS      reduce using rule 92 (operator_binary_assignment -> MINUS_EQUALS .)
    NOT             reduce using rule 92 (operator_binary_assignment -> MINUS_EQUALS .)



state 88

    (109) operator_binary_comparison -> HAS .

    LEFT_PAREN      reduce using rule 109 (operator_binary_comparison -> HAS .)
    IDENTIFIER      reduce using rule 109 (operator_binary_comparison -> HAS .)
    THIS            reduce using rule 109 (operator_binary_comparison -> HAS .)
    BLANK           reduce using rule 109 (operator_binary_comparison -> HAS .)
    NULL            reduce using rule 109 (operator_binary_comparison -> HAS .)
    TRUE            reduce using rule 109 (operator_binary_comparison -> HAS .)
    FALSE           reduce using rule 109 (operator_binary_comparison -> HAS .)
    STRING_LITERAL  reduce using rule 109 (operator_binary_comparison -> HAS .)
    NUMERIC_LITERAL reduce using rule 109 (operator_binary_comparison -> HAS .)
    FUNCTION        reduce using rule 109 (operator_binary_comparison -> HAS .)
    LEFT_BOX        reduce using rule 109 (operator_binary_comparison -> HAS .)
    LEFT_CURLY_BRACE reduce using rule 109 (operator_binary_comparison -> HAS .)
    NOT_EQUALS      reduce using rule 109 (operator_binary_comparison -> HAS .)
    NOT             reduce using rule 109 (operator_binary_comparison -> HAS .)



state 89

    (105) operator_binary_computation -> EXPONENT .

    LEFT_PAREN      reduce using rule 105 (operator_binary_computation -> EXPONENT .)
    IDENTIFIER      reduce using rule 105 (operator_binary_computation -> EXPONENT .)
    THIS            reduce using rule 105 (operator_binary_computation -> EXPONENT .)
    BLANK           reduce using rule 105 (operator_binary_computation -> EXPONENT .)
    NULL            reduce using rule 105 (operator_binary_computation -> EXPONENT .)
    TRUE            reduce using rule 105 (operator_binary_computation -> EXPONENT .)
    FALSE           reduce using rule 105 (operator_binary_computation -> EXPONENT .)
    STRING_LITERAL  reduce using rule 105 (operator_binary_computation -> EXPONENT .)
    NUMERIC_LITERAL reduce using rule 105 (operator_binary_computation -> EXPONENT .)
    FUNCTION        reduce using rule 105 (operator_binary_computation -> EXPONENT .)
    LEFT_BOX        reduce using rule 105 (operator_binary_computation -> EXPONENT .)
    LEFT_CURLY_BRACE reduce using rule 105 (operator_binary_computation -> EXPONENT .)
    NOT_EQUALS      reduce using rule 105 (operator_binary_computation -> EXPONENT .)
    NOT             reduce using rule 105 (operator_binary_computation -> EXPONENT .)



state 90

    (104) operator_binary_computation -> MODULUS .

    LEFT_PAREN      reduce using rule 104 (operator_binary_computation -> MODULUS .)
    IDENTIFIER      reduce using rule 104 (operator_binary_computation -> MODULUS .)
    THIS            reduce using rule 104 (operator_binary_computation -> MODULUS .)
    BLANK           reduce using rule 104 (operator_binary_computation -> MODULUS .)
    NULL            reduce using rule 104 (operator_binary_computation -> MODULUS .)
    TRUE            reduce using rule 104 (operator_binary_computation -> MODULUS .)
    FALSE           reduce using rule 104 (operator_binary_computation -> MODULUS .)
    STRING_LITERAL  reduce using rule 104 (operator_binary_computation -> MODULUS .)
    NUMERIC_LITERAL reduce using rule 104 (operator_binary_computation -> MODULUS .)
    FUNCTION        reduce using rule 104 (operator_binary_computation -> MODULUS .)
    LEFT_BOX        reduce using rule 104 (operator_binary_computation -> MODULUS .)
    LEFT_CURLY_BRACE reduce using rule 104 (operator_binary_computation -> MODULUS .)
    NOT_EQUALS      reduce using rule 104 (operator_binary_computation -> MODULUS .)
    NOT             reduce using rule 104 (operator_binary_computation -> MODULUS .)



state 91

    (100) operator_binary_computation -> PLUS .

    LEFT_PAREN      reduce using rule 100 (operator_binary_computation -> PLUS .)
    IDENTIFIER      reduce using rule 100 (operator_binary_computation -> PLUS .)
    THIS            reduce using rule 100 (operator_binary_computation -> PLUS .)
    BLANK           reduce using rule 100 (operator_binary_computation -> PLUS .)
    NULL            reduce using rule 100 (operator_binary_computation -> PLUS .)
    TRUE            reduce using rule 100 (operator_binary_computation -> PLUS .)
    FALSE           reduce using rule 100 (operator_binary_computation -> PLUS .)
    STRING_LITERAL  reduce using rule 100 (operator_binary_computation -> PLUS .)
    NUMERIC_LITERAL reduce using rule 100 (operator_binary_computation -> PLUS .)
    FUNCTION        reduce using rule 100 (operator_binary_computation -> PLUS .)
    LEFT_BOX        reduce using rule 100 (operator_binary_computation -> PLUS .)
    LEFT_CURLY_BRACE reduce using rule 100 (operator_binary_computation -> PLUS .)
    NOT_EQUALS      reduce using rule 100 (operator_binary_computation -> PLUS .)
    NOT             reduce using rule 100 (operator_binary_computation -> PLUS .)



state 92

    (86) operator_binary -> operator_binary_assignment .

    LEFT_PAREN      reduce using rule 86 (operator_binary -> operator_binary_assignment .)
    IDENTIFIER      reduce using rule 86 (operator_binary -> operator_binary_assignment .)
    THIS            reduce using rule 86 (operator_binary -> operator_binary_assignment .)
    BLANK           reduce using rule 86 (operator_binary -> operator_binary_assignment .)
    NULL            reduce using rule 86 (operator_binary -> operator_binary_assignment .)
    TRUE            reduce using rule 86 (operator_binary -> operator_binary_assignment .)
    FALSE           reduce using rule 86 (operator_binary -> operator_binary_assignment .)
    STRING_LITERAL  reduce using rule 86 (operator_binary -> operator_binary_assignment .)
    NUMERIC_LITERAL reduce using rule 86 (operator_binary -> operator_binary_assignment .)
    FUNCTION        reduce using rule 86 (operator_binary -> operator_binary_assignment .)
    LEFT_BOX        reduce using rule 86 (operator_binary -> operator_binary_assignment .)
    LEFT_CURLY_BRACE reduce using rule 86 (operator_binary -> operator_binary_assignment .)
    NOT_EQUALS      reduce using rule 86 (operator_binary -> operator_binary_assignment .)
    NOT             reduce using rule 86 (operator_binary -> operator_binary_assignment .)



state 93

    (106) operator_binary_computation -> AND .

    LEFT_PAREN      reduce using rule 106 (operator_binary_computation -> AND .)
    IDENTIFIER      reduce using rule 106 (operator_binary_computation -> AND .)
    THIS            reduce using rule 106 (operator_binary_computation -> AND .)
    BLANK           reduce using rule 106 (operator_binary_computation -> AND .)
    NULL            reduce using rule 106 (operator_binary_computation -> AND .)
    TRUE            reduce using rule 106 (operator_binary_computation -> AND .)
    FALSE           reduce using rule 106 (operator_binary_computation -> AND .)
    STRING_LITERAL  reduce using rule 106 (operator_binary_computation -> AND .)
    NUMERIC_LITERAL reduce using rule 106 (operator_binary_computation -> AND .)
    FUNCTION        reduce using rule 106 (operator_binary_computation -> AND .)
    LEFT_BOX        reduce using rule 106 (operator_binary_computation -> AND .)
    LEFT_CURLY_BRACE reduce using rule 106 (operator_binary_computation -> AND .)
    NOT_EQUALS      reduce using rule 106 (operator_binary_computation -> AND .)
    NOT             reduce using rule 106 (operator_binary_computation -> AND .)



state 94

    (95) operator_binary_assignment -> MODULUS_EQUALS .

    LEFT_PAREN      reduce using rule 95 (operator_binary_assignment -> MODULUS_EQUALS .)
    IDENTIFIER      reduce using rule 95 (operator_binary_assignment -> MODULUS_EQUALS .)
    THIS            reduce using rule 95 (operator_binary_assignment -> MODULUS_EQUALS .)
    BLANK           reduce using rule 95 (operator_binary_assignment -> MODULUS_EQUALS .)
    NULL            reduce using rule 95 (operator_binary_assignment -> MODULUS_EQUALS .)
    TRUE            reduce using rule 95 (operator_binary_assignment -> MODULUS_EQUALS .)
    FALSE           reduce using rule 95 (operator_binary_assignment -> MODULUS_EQUALS .)
    STRING_LITERAL  reduce using rule 95 (operator_binary_assignment -> MODULUS_EQUALS .)
    NUMERIC_LITERAL reduce using rule 95 (operator_binary_assignment -> MODULUS_EQUALS .)
    FUNCTION        reduce using rule 95 (operator_binary_assignment -> MODULUS_EQUALS .)
    LEFT_BOX        reduce using rule 95 (operator_binary_assignment -> MODULUS_EQUALS .)
    LEFT_CURLY_BRACE reduce using rule 95 (operator_binary_assignment -> MODULUS_EQUALS .)
    NOT_EQUALS      reduce using rule 95 (operator_binary_assignment -> MODULUS_EQUALS .)
    NOT             reduce using rule 95 (operator_binary_assignment -> MODULUS_EQUALS .)



state 95

    (103) operator_binary_computation -> DIVIDE .

    LEFT_PAREN      reduce using rule 103 (operator_binary_computation -> DIVIDE .)
    IDENTIFIER      reduce using rule 103 (operator_binary_computation -> DIVIDE .)
    THIS            reduce using rule 103 (operator_binary_computation -> DIVIDE .)
    BLANK           reduce using rule 103 (operator_binary_computation -> DIVIDE .)
    NULL            reduce using rule 103 (operator_binary_computation -> DIVIDE .)
    TRUE            reduce using rule 103 (operator_binary_computation -> DIVIDE .)
    FALSE           reduce using rule 103 (operator_binary_computation -> DIVIDE .)
    STRING_LITERAL  reduce using rule 103 (operator_binary_computation -> DIVIDE .)
    NUMERIC_LITERAL reduce using rule 103 (operator_binary_computation -> DIVIDE .)
    FUNCTION        reduce using rule 103 (operator_binary_computation -> DIVIDE .)
    LEFT_BOX        reduce using rule 103 (operator_binary_computation -> DIVIDE .)
    LEFT_CURLY_BRACE reduce using rule 103 (operator_binary_computation -> DIVIDE .)
    NOT_EQUALS      reduce using rule 103 (operator_binary_computation -> DIVIDE .)
    NOT             reduce using rule 103 (operator_binary_computation -> DIVIDE .)



state 96

    (93) operator_binary_assignment -> TIMES_EQUALS .

    LEFT_PAREN      reduce using rule 93 (operator_binary_assignment -> TIMES_EQUALS .)
    IDENTIFIER      reduce using rule 93 (operator_binary_assignment -> TIMES_EQUALS .)
    THIS            reduce using rule 93 (operator_binary_assignment -> TIMES_EQUALS .)
    BLANK           reduce using rule 93 (operator_binary_assignment -> TIMES_EQUALS .)
    NULL            reduce using rule 93 (operator_binary_assignment -> TIMES_EQUALS .)
    TRUE            reduce using rule 93 (operator_binary_assignment -> TIMES_EQUALS .)
    FALSE           reduce using rule 93 (operator_binary_assignment -> TIMES_EQUALS .)
    STRING_LITERAL  reduce using rule 93 (operator_binary_assignment -> TIMES_EQUALS .)
    NUMERIC_LITERAL reduce using rule 93 (operator_binary_assignment -> TIMES_EQUALS .)
    FUNCTION        reduce using rule 93 (operator_binary_assignment -> TIMES_EQUALS .)
    LEFT_BOX        reduce using rule 93 (operator_binary_assignment -> TIMES_EQUALS .)
    LEFT_CURLY_BRACE reduce using rule 93 (operator_binary_assignment -> TIMES_EQUALS .)
    NOT_EQUALS      reduce using rule 93 (operator_binary_assignment -> TIMES_EQUALS .)
    NOT             reduce using rule 93 (operator_binary_assignment -> TIMES_EQUALS .)



state 97

    (113) operator_binary_comparison -> COMPARE_LT .

    LEFT_PAREN      reduce using rule 113 (operator_binary_comparison -> COMPARE_LT .)
    IDENTIFIER      reduce using rule 113 (operator_binary_comparison -> COMPARE_LT .)
    THIS            reduce using rule 113 (operator_binary_comparison -> COMPARE_LT .)
    BLANK           reduce using rule 113 (operator_binary_comparison -> COMPARE_LT .)
    NULL            reduce using rule 113 (operator_binary_comparison -> COMPARE_LT .)
    TRUE            reduce using rule 113 (operator_binary_comparison -> COMPARE_LT .)
    FALSE           reduce using rule 113 (operator_binary_comparison -> COMPARE_LT .)
    STRING_LITERAL  reduce using rule 113 (operator_binary_comparison -> COMPARE_LT .)
    NUMERIC_LITERAL reduce using rule 113 (operator_binary_comparison -> COMPARE_LT .)
    FUNCTION        reduce using rule 113 (operator_binary_comparison -> COMPARE_LT .)
    LEFT_BOX        reduce using rule 113 (operator_binary_comparison -> COMPARE_LT .)
    LEFT_CURLY_BRACE reduce using rule 113 (operator_binary_comparison -> COMPARE_LT .)
    NOT_EQUALS      reduce using rule 113 (operator_binary_comparison -> COMPARE_LT .)
    NOT             reduce using rule 113 (operator_binary_comparison -> COMPARE_LT .)



state 98

    (97) operator_binary_assignment -> AND_EQUALS .

    LEFT_PAREN      reduce using rule 97 (operator_binary_assignment -> AND_EQUALS .)
    IDENTIFIER      reduce using rule 97 (operator_binary_assignment -> AND_EQUALS .)
    THIS            reduce using rule 97 (operator_binary_assignment -> AND_EQUALS .)
    BLANK           reduce using rule 97 (operator_binary_assignment -> AND_EQUALS .)
    NULL            reduce using rule 97 (operator_binary_assignment -> AND_EQUALS .)
    TRUE            reduce using rule 97 (operator_binary_assignment -> AND_EQUALS .)
    FALSE           reduce using rule 97 (operator_binary_assignment -> AND_EQUALS .)
    STRING_LITERAL  reduce using rule 97 (operator_binary_assignment -> AND_EQUALS .)
    NUMERIC_LITERAL reduce using rule 97 (operator_binary_assignment -> AND_EQUALS .)
    FUNCTION        reduce using rule 97 (operator_binary_assignment -> AND_EQUALS .)
    LEFT_BOX        reduce using rule 97 (operator_binary_assignment -> AND_EQUALS .)
    LEFT_CURLY_BRACE reduce using rule 97 (operator_binary_assignment -> AND_EQUALS .)
    NOT_EQUALS      reduce using rule 97 (operator_binary_assignment -> AND_EQUALS .)
    NOT             reduce using rule 97 (operator_binary_assignment -> AND_EQUALS .)



state 99

    (98) operator_binary_assignment -> OR_EQUALS .

    LEFT_PAREN      reduce using rule 98 (operator_binary_assignment -> OR_EQUALS .)
    IDENTIFIER      reduce using rule 98 (operator_binary_assignment -> OR_EQUALS .)
    THIS            reduce using rule 98 (operator_binary_assignment -> OR_EQUALS .)
    BLANK           reduce using rule 98 (operator_binary_assignment -> OR_EQUALS .)
    NULL            reduce using rule 98 (operator_binary_assignment -> OR_EQUALS .)
    TRUE            reduce using rule 98 (operator_binary_assignment -> OR_EQUALS .)
    FALSE           reduce using rule 98 (operator_binary_assignment -> OR_EQUALS .)
    STRING_LITERAL  reduce using rule 98 (operator_binary_assignment -> OR_EQUALS .)
    NUMERIC_LITERAL reduce using rule 98 (operator_binary_assignment -> OR_EQUALS .)
    FUNCTION        reduce using rule 98 (operator_binary_assignment -> OR_EQUALS .)
    LEFT_BOX        reduce using rule 98 (operator_binary_assignment -> OR_EQUALS .)
    LEFT_CURLY_BRACE reduce using rule 98 (operator_binary_assignment -> OR_EQUALS .)
    NOT_EQUALS      reduce using rule 98 (operator_binary_assignment -> OR_EQUALS .)
    NOT             reduce using rule 98 (operator_binary_assignment -> OR_EQUALS .)



state 100

    (82) operator_rhs_array -> LEFT_BOX . array_operator_insides RIGHT_BOX
    (83) array_operator_insides -> . expression
    (84) array_operator_insides -> . expression COLON expression
    (85) array_operator_insides -> . expression COLON expression COLON expression
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    FUNCTION        shift and go to state 53
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    operator_unary_lhs_computation shift and go to state 43
    array_operator_insides         shift and go to state 134
    array_literal                  shift and go to state 27
    function_call                  shift and go to state 29
    operator_unary_lhs             shift and go to state 26
    literal                        shift and go to state 16
    object_literal                 shift and go to state 42
    operator_unary_lhs_assignment  shift and go to state 8
    function_anonymous             shift and go to state 54
    expression                     shift and go to state 135

state 101

    (108) operator_binary_comparison -> IN .

    LEFT_PAREN      reduce using rule 108 (operator_binary_comparison -> IN .)
    IDENTIFIER      reduce using rule 108 (operator_binary_comparison -> IN .)
    THIS            reduce using rule 108 (operator_binary_comparison -> IN .)
    BLANK           reduce using rule 108 (operator_binary_comparison -> IN .)
    NULL            reduce using rule 108 (operator_binary_comparison -> IN .)
    TRUE            reduce using rule 108 (operator_binary_comparison -> IN .)
    FALSE           reduce using rule 108 (operator_binary_comparison -> IN .)
    STRING_LITERAL  reduce using rule 108 (operator_binary_comparison -> IN .)
    NUMERIC_LITERAL reduce using rule 108 (operator_binary_comparison -> IN .)
    FUNCTION        reduce using rule 108 (operator_binary_comparison -> IN .)
    LEFT_BOX        reduce using rule 108 (operator_binary_comparison -> IN .)
    LEFT_CURLY_BRACE reduce using rule 108 (operator_binary_comparison -> IN .)
    NOT_EQUALS      reduce using rule 108 (operator_binary_comparison -> IN .)
    NOT             reduce using rule 108 (operator_binary_comparison -> IN .)



state 102

    (102) operator_binary_computation -> TIMES .

    LEFT_PAREN      reduce using rule 102 (operator_binary_computation -> TIMES .)
    IDENTIFIER      reduce using rule 102 (operator_binary_computation -> TIMES .)
    THIS            reduce using rule 102 (operator_binary_computation -> TIMES .)
    BLANK           reduce using rule 102 (operator_binary_computation -> TIMES .)
    NULL            reduce using rule 102 (operator_binary_computation -> TIMES .)
    TRUE            reduce using rule 102 (operator_binary_computation -> TIMES .)
    FALSE           reduce using rule 102 (operator_binary_computation -> TIMES .)
    STRING_LITERAL  reduce using rule 102 (operator_binary_computation -> TIMES .)
    NUMERIC_LITERAL reduce using rule 102 (operator_binary_computation -> TIMES .)
    FUNCTION        reduce using rule 102 (operator_binary_computation -> TIMES .)
    LEFT_BOX        reduce using rule 102 (operator_binary_computation -> TIMES .)
    LEFT_CURLY_BRACE reduce using rule 102 (operator_binary_computation -> TIMES .)
    NOT_EQUALS      reduce using rule 102 (operator_binary_computation -> TIMES .)
    NOT             reduce using rule 102 (operator_binary_computation -> TIMES .)



state 103

    (54) expression -> expression operator_rhs_array .

    COLON           reduce using rule 54 (expression -> expression operator_rhs_array .)
    LEFT_BOX        reduce using rule 54 (expression -> expression operator_rhs_array .)
    ASSIGN_EQUALS   reduce using rule 54 (expression -> expression operator_rhs_array .)
    DOT_EQUALS      reduce using rule 54 (expression -> expression operator_rhs_array .)
    PLUS_EQUALS     reduce using rule 54 (expression -> expression operator_rhs_array .)
    MINUS_EQUALS    reduce using rule 54 (expression -> expression operator_rhs_array .)
    TIMES_EQUALS    reduce using rule 54 (expression -> expression operator_rhs_array .)
    DIVIDE_EQUALS   reduce using rule 54 (expression -> expression operator_rhs_array .)
    MODULUS_EQUALS  reduce using rule 54 (expression -> expression operator_rhs_array .)
    EXPONENT_EQUALS reduce using rule 54 (expression -> expression operator_rhs_array .)
    AND_EQUALS      reduce using rule 54 (expression -> expression operator_rhs_array .)
    OR_EQUALS       reduce using rule 54 (expression -> expression operator_rhs_array .)
    DOT             reduce using rule 54 (expression -> expression operator_rhs_array .)
    PLUS            reduce using rule 54 (expression -> expression operator_rhs_array .)
    MINUS           reduce using rule 54 (expression -> expression operator_rhs_array .)
    TIMES           reduce using rule 54 (expression -> expression operator_rhs_array .)
    DIVIDE          reduce using rule 54 (expression -> expression operator_rhs_array .)
    MODULUS         reduce using rule 54 (expression -> expression operator_rhs_array .)
    EXPONENT        reduce using rule 54 (expression -> expression operator_rhs_array .)
    AND             reduce using rule 54 (expression -> expression operator_rhs_array .)
    OR              reduce using rule 54 (expression -> expression operator_rhs_array .)
    IN              reduce using rule 54 (expression -> expression operator_rhs_array .)
    HAS             reduce using rule 54 (expression -> expression operator_rhs_array .)
    EQUIVALENCE_EQUAL reduce using rule 54 (expression -> expression operator_rhs_array .)
    COMPARE_GT      reduce using rule 54 (expression -> expression operator_rhs_array .)
    COMPARE_GTET    reduce using rule 54 (expression -> expression operator_rhs_array .)
    COMPARE_LT      reduce using rule 54 (expression -> expression operator_rhs_array .)
    COMPARE_LTET    reduce using rule 54 (expression -> expression operator_rhs_array .)
    FOR             reduce using rule 54 (expression -> expression operator_rhs_array .)
    COMMA           reduce using rule 54 (expression -> expression operator_rhs_array .)
    RIGHT_BOX       reduce using rule 54 (expression -> expression operator_rhs_array .)
    FUNCTION        reduce using rule 54 (expression -> expression operator_rhs_array .)
    WHILE           reduce using rule 54 (expression -> expression operator_rhs_array .)
    IMPORT          reduce using rule 54 (expression -> expression operator_rhs_array .)
    CONTINUE        reduce using rule 54 (expression -> expression operator_rhs_array .)
    BREAK           reduce using rule 54 (expression -> expression operator_rhs_array .)
    PASS            reduce using rule 54 (expression -> expression operator_rhs_array .)
    RETURN          reduce using rule 54 (expression -> expression operator_rhs_array .)
    LEFT_PAREN      reduce using rule 54 (expression -> expression operator_rhs_array .)
    IDENTIFIER      reduce using rule 54 (expression -> expression operator_rhs_array .)
    THIS            reduce using rule 54 (expression -> expression operator_rhs_array .)
    IF              reduce using rule 54 (expression -> expression operator_rhs_array .)
    BLANK           reduce using rule 54 (expression -> expression operator_rhs_array .)
    NULL            reduce using rule 54 (expression -> expression operator_rhs_array .)
    TRUE            reduce using rule 54 (expression -> expression operator_rhs_array .)
    FALSE           reduce using rule 54 (expression -> expression operator_rhs_array .)
    STRING_LITERAL  reduce using rule 54 (expression -> expression operator_rhs_array .)
    NUMERIC_LITERAL reduce using rule 54 (expression -> expression operator_rhs_array .)
    LEFT_CURLY_BRACE reduce using rule 54 (expression -> expression operator_rhs_array .)
    NOT_EQUALS      reduce using rule 54 (expression -> expression operator_rhs_array .)
    NOT             reduce using rule 54 (expression -> expression operator_rhs_array .)
    $end            reduce using rule 54 (expression -> expression operator_rhs_array .)
    ENDWHILE        reduce using rule 54 (expression -> expression operator_rhs_array .)
    ENDIF           reduce using rule 54 (expression -> expression operator_rhs_array .)
    RIGHT_PAREN     reduce using rule 54 (expression -> expression operator_rhs_array .)
    ENDFOR          reduce using rule 54 (expression -> expression operator_rhs_array .)
    ENDFUNCTION     reduce using rule 54 (expression -> expression operator_rhs_array .)
    OTHERWISE       reduce using rule 54 (expression -> expression operator_rhs_array .)
    ELIF            reduce using rule 54 (expression -> expression operator_rhs_array .)
    RIGHT_CURLY_BRACE reduce using rule 54 (expression -> expression operator_rhs_array .)



state 104

    (112) operator_binary_comparison -> COMPARE_GTET .

    LEFT_PAREN      reduce using rule 112 (operator_binary_comparison -> COMPARE_GTET .)
    IDENTIFIER      reduce using rule 112 (operator_binary_comparison -> COMPARE_GTET .)
    THIS            reduce using rule 112 (operator_binary_comparison -> COMPARE_GTET .)
    BLANK           reduce using rule 112 (operator_binary_comparison -> COMPARE_GTET .)
    NULL            reduce using rule 112 (operator_binary_comparison -> COMPARE_GTET .)
    TRUE            reduce using rule 112 (operator_binary_comparison -> COMPARE_GTET .)
    FALSE           reduce using rule 112 (operator_binary_comparison -> COMPARE_GTET .)
    STRING_LITERAL  reduce using rule 112 (operator_binary_comparison -> COMPARE_GTET .)
    NUMERIC_LITERAL reduce using rule 112 (operator_binary_comparison -> COMPARE_GTET .)
    FUNCTION        reduce using rule 112 (operator_binary_comparison -> COMPARE_GTET .)
    LEFT_BOX        reduce using rule 112 (operator_binary_comparison -> COMPARE_GTET .)
    LEFT_CURLY_BRACE reduce using rule 112 (operator_binary_comparison -> COMPARE_GTET .)
    NOT_EQUALS      reduce using rule 112 (operator_binary_comparison -> COMPARE_GTET .)
    NOT             reduce using rule 112 (operator_binary_comparison -> COMPARE_GTET .)



state 105

    (91) operator_binary_assignment -> PLUS_EQUALS .

    LEFT_PAREN      reduce using rule 91 (operator_binary_assignment -> PLUS_EQUALS .)
    IDENTIFIER      reduce using rule 91 (operator_binary_assignment -> PLUS_EQUALS .)
    THIS            reduce using rule 91 (operator_binary_assignment -> PLUS_EQUALS .)
    BLANK           reduce using rule 91 (operator_binary_assignment -> PLUS_EQUALS .)
    NULL            reduce using rule 91 (operator_binary_assignment -> PLUS_EQUALS .)
    TRUE            reduce using rule 91 (operator_binary_assignment -> PLUS_EQUALS .)
    FALSE           reduce using rule 91 (operator_binary_assignment -> PLUS_EQUALS .)
    STRING_LITERAL  reduce using rule 91 (operator_binary_assignment -> PLUS_EQUALS .)
    NUMERIC_LITERAL reduce using rule 91 (operator_binary_assignment -> PLUS_EQUALS .)
    FUNCTION        reduce using rule 91 (operator_binary_assignment -> PLUS_EQUALS .)
    LEFT_BOX        reduce using rule 91 (operator_binary_assignment -> PLUS_EQUALS .)
    LEFT_CURLY_BRACE reduce using rule 91 (operator_binary_assignment -> PLUS_EQUALS .)
    NOT_EQUALS      reduce using rule 91 (operator_binary_assignment -> PLUS_EQUALS .)
    NOT             reduce using rule 91 (operator_binary_assignment -> PLUS_EQUALS .)



state 106

    (89) operator_binary_assignment -> ASSIGN_EQUALS .

    LEFT_PAREN      reduce using rule 89 (operator_binary_assignment -> ASSIGN_EQUALS .)
    IDENTIFIER      reduce using rule 89 (operator_binary_assignment -> ASSIGN_EQUALS .)
    THIS            reduce using rule 89 (operator_binary_assignment -> ASSIGN_EQUALS .)
    BLANK           reduce using rule 89 (operator_binary_assignment -> ASSIGN_EQUALS .)
    NULL            reduce using rule 89 (operator_binary_assignment -> ASSIGN_EQUALS .)
    TRUE            reduce using rule 89 (operator_binary_assignment -> ASSIGN_EQUALS .)
    FALSE           reduce using rule 89 (operator_binary_assignment -> ASSIGN_EQUALS .)
    STRING_LITERAL  reduce using rule 89 (operator_binary_assignment -> ASSIGN_EQUALS .)
    NUMERIC_LITERAL reduce using rule 89 (operator_binary_assignment -> ASSIGN_EQUALS .)
    FUNCTION        reduce using rule 89 (operator_binary_assignment -> ASSIGN_EQUALS .)
    LEFT_BOX        reduce using rule 89 (operator_binary_assignment -> ASSIGN_EQUALS .)
    LEFT_CURLY_BRACE reduce using rule 89 (operator_binary_assignment -> ASSIGN_EQUALS .)
    NOT_EQUALS      reduce using rule 89 (operator_binary_assignment -> ASSIGN_EQUALS .)
    NOT             reduce using rule 89 (operator_binary_assignment -> ASSIGN_EQUALS .)



state 107

    (55) expression -> expression operator_binary . expression
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    FUNCTION        shift and go to state 53
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    operator_unary_lhs_computation shift and go to state 43
    array_literal                  shift and go to state 27
    function_call                  shift and go to state 29
    operator_unary_lhs             shift and go to state 26
    literal                        shift and go to state 16
    object_literal                 shift and go to state 42
    operator_unary_lhs_assignment  shift and go to state 8
    function_anonymous             shift and go to state 54
    expression                     shift and go to state 136

state 108

    (94) operator_binary_assignment -> DIVIDE_EQUALS .

    LEFT_PAREN      reduce using rule 94 (operator_binary_assignment -> DIVIDE_EQUALS .)
    IDENTIFIER      reduce using rule 94 (operator_binary_assignment -> DIVIDE_EQUALS .)
    THIS            reduce using rule 94 (operator_binary_assignment -> DIVIDE_EQUALS .)
    BLANK           reduce using rule 94 (operator_binary_assignment -> DIVIDE_EQUALS .)
    NULL            reduce using rule 94 (operator_binary_assignment -> DIVIDE_EQUALS .)
    TRUE            reduce using rule 94 (operator_binary_assignment -> DIVIDE_EQUALS .)
    FALSE           reduce using rule 94 (operator_binary_assignment -> DIVIDE_EQUALS .)
    STRING_LITERAL  reduce using rule 94 (operator_binary_assignment -> DIVIDE_EQUALS .)
    NUMERIC_LITERAL reduce using rule 94 (operator_binary_assignment -> DIVIDE_EQUALS .)
    FUNCTION        reduce using rule 94 (operator_binary_assignment -> DIVIDE_EQUALS .)
    LEFT_BOX        reduce using rule 94 (operator_binary_assignment -> DIVIDE_EQUALS .)
    LEFT_CURLY_BRACE reduce using rule 94 (operator_binary_assignment -> DIVIDE_EQUALS .)
    NOT_EQUALS      reduce using rule 94 (operator_binary_assignment -> DIVIDE_EQUALS .)
    NOT             reduce using rule 94 (operator_binary_assignment -> DIVIDE_EQUALS .)



state 109

    (96) operator_binary_assignment -> EXPONENT_EQUALS .

    LEFT_PAREN      reduce using rule 96 (operator_binary_assignment -> EXPONENT_EQUALS .)
    IDENTIFIER      reduce using rule 96 (operator_binary_assignment -> EXPONENT_EQUALS .)
    THIS            reduce using rule 96 (operator_binary_assignment -> EXPONENT_EQUALS .)
    BLANK           reduce using rule 96 (operator_binary_assignment -> EXPONENT_EQUALS .)
    NULL            reduce using rule 96 (operator_binary_assignment -> EXPONENT_EQUALS .)
    TRUE            reduce using rule 96 (operator_binary_assignment -> EXPONENT_EQUALS .)
    FALSE           reduce using rule 96 (operator_binary_assignment -> EXPONENT_EQUALS .)
    STRING_LITERAL  reduce using rule 96 (operator_binary_assignment -> EXPONENT_EQUALS .)
    NUMERIC_LITERAL reduce using rule 96 (operator_binary_assignment -> EXPONENT_EQUALS .)
    FUNCTION        reduce using rule 96 (operator_binary_assignment -> EXPONENT_EQUALS .)
    LEFT_BOX        reduce using rule 96 (operator_binary_assignment -> EXPONENT_EQUALS .)
    LEFT_CURLY_BRACE reduce using rule 96 (operator_binary_assignment -> EXPONENT_EQUALS .)
    NOT_EQUALS      reduce using rule 96 (operator_binary_assignment -> EXPONENT_EQUALS .)
    NOT             reduce using rule 96 (operator_binary_assignment -> EXPONENT_EQUALS .)



state 110

    (88) operator_binary -> operator_binary_comparison .

    LEFT_PAREN      reduce using rule 88 (operator_binary -> operator_binary_comparison .)
    IDENTIFIER      reduce using rule 88 (operator_binary -> operator_binary_comparison .)
    THIS            reduce using rule 88 (operator_binary -> operator_binary_comparison .)
    BLANK           reduce using rule 88 (operator_binary -> operator_binary_comparison .)
    NULL            reduce using rule 88 (operator_binary -> operator_binary_comparison .)
    TRUE            reduce using rule 88 (operator_binary -> operator_binary_comparison .)
    FALSE           reduce using rule 88 (operator_binary -> operator_binary_comparison .)
    STRING_LITERAL  reduce using rule 88 (operator_binary -> operator_binary_comparison .)
    NUMERIC_LITERAL reduce using rule 88 (operator_binary -> operator_binary_comparison .)
    FUNCTION        reduce using rule 88 (operator_binary -> operator_binary_comparison .)
    LEFT_BOX        reduce using rule 88 (operator_binary -> operator_binary_comparison .)
    LEFT_CURLY_BRACE reduce using rule 88 (operator_binary -> operator_binary_comparison .)
    NOT_EQUALS      reduce using rule 88 (operator_binary -> operator_binary_comparison .)
    NOT             reduce using rule 88 (operator_binary -> operator_binary_comparison .)



state 111

    (107) operator_binary_computation -> OR .

    LEFT_PAREN      reduce using rule 107 (operator_binary_computation -> OR .)
    IDENTIFIER      reduce using rule 107 (operator_binary_computation -> OR .)
    THIS            reduce using rule 107 (operator_binary_computation -> OR .)
    BLANK           reduce using rule 107 (operator_binary_computation -> OR .)
    NULL            reduce using rule 107 (operator_binary_computation -> OR .)
    TRUE            reduce using rule 107 (operator_binary_computation -> OR .)
    FALSE           reduce using rule 107 (operator_binary_computation -> OR .)
    STRING_LITERAL  reduce using rule 107 (operator_binary_computation -> OR .)
    NUMERIC_LITERAL reduce using rule 107 (operator_binary_computation -> OR .)
    FUNCTION        reduce using rule 107 (operator_binary_computation -> OR .)
    LEFT_BOX        reduce using rule 107 (operator_binary_computation -> OR .)
    LEFT_CURLY_BRACE reduce using rule 107 (operator_binary_computation -> OR .)
    NOT_EQUALS      reduce using rule 107 (operator_binary_computation -> OR .)
    NOT             reduce using rule 107 (operator_binary_computation -> OR .)



state 112

    (71) array_literal -> LEFT_BOX exp_list . RIGHT_BOX

    RIGHT_BOX       shift and go to state 137



state 113

    (60) exp_list -> epsilon .

    RIGHT_BOX       reduce using rule 60 (exp_list -> epsilon .)
    RIGHT_PAREN     reduce using rule 60 (exp_list -> epsilon .)



state 114

    (72) array_literal -> LEFT_BOX expression . FOR IDENTIFIER IN expression RIGHT_BOX
    (61) exp_list -> expression .
    (62) exp_list -> expression . COMMA exp_list
    (54) expression -> expression . operator_rhs_array
    (55) expression -> expression . operator_binary expression
    (82) operator_rhs_array -> . LEFT_BOX array_operator_insides RIGHT_BOX
    (86) operator_binary -> . operator_binary_assignment
    (87) operator_binary -> . operator_binary_computation
    (88) operator_binary -> . operator_binary_comparison
    (89) operator_binary_assignment -> . ASSIGN_EQUALS
    (90) operator_binary_assignment -> . DOT_EQUALS
    (91) operator_binary_assignment -> . PLUS_EQUALS
    (92) operator_binary_assignment -> . MINUS_EQUALS
    (93) operator_binary_assignment -> . TIMES_EQUALS
    (94) operator_binary_assignment -> . DIVIDE_EQUALS
    (95) operator_binary_assignment -> . MODULUS_EQUALS
    (96) operator_binary_assignment -> . EXPONENT_EQUALS
    (97) operator_binary_assignment -> . AND_EQUALS
    (98) operator_binary_assignment -> . OR_EQUALS
    (99) operator_binary_computation -> . DOT
    (100) operator_binary_computation -> . PLUS
    (101) operator_binary_computation -> . MINUS
    (102) operator_binary_computation -> . TIMES
    (103) operator_binary_computation -> . DIVIDE
    (104) operator_binary_computation -> . MODULUS
    (105) operator_binary_computation -> . EXPONENT
    (106) operator_binary_computation -> . AND
    (107) operator_binary_computation -> . OR
    (108) operator_binary_comparison -> . IN
    (109) operator_binary_comparison -> . HAS
    (110) operator_binary_comparison -> . EQUIVALENCE_EQUAL
    (111) operator_binary_comparison -> . COMPARE_GT
    (112) operator_binary_comparison -> . COMPARE_GTET
    (113) operator_binary_comparison -> . COMPARE_LT
    (114) operator_binary_comparison -> . COMPARE_LTET

    FOR             shift and go to state 139
    RIGHT_BOX       reduce using rule 61 (exp_list -> expression .)
    COMMA           shift and go to state 138
    LEFT_BOX        shift and go to state 100
    ASSIGN_EQUALS   shift and go to state 106
    DOT_EQUALS      shift and go to state 80
    PLUS_EQUALS     shift and go to state 105
    MINUS_EQUALS    shift and go to state 87
    TIMES_EQUALS    shift and go to state 96
    DIVIDE_EQUALS   shift and go to state 108
    MODULUS_EQUALS  shift and go to state 94
    EXPONENT_EQUALS shift and go to state 109
    AND_EQUALS      shift and go to state 98
    OR_EQUALS       shift and go to state 99
    DOT             shift and go to state 86
    PLUS            shift and go to state 91
    MINUS           shift and go to state 85
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95
    MODULUS         shift and go to state 90
    EXPONENT        shift and go to state 89
    AND             shift and go to state 93
    OR              shift and go to state 111
    IN              shift and go to state 101
    HAS             shift and go to state 88
    EQUIVALENCE_EQUAL shift and go to state 81
    COMPARE_GT      shift and go to state 84
    COMPARE_GTET    shift and go to state 104
    COMPARE_LT      shift and go to state 97
    COMPARE_LTET    shift and go to state 83


    operator_binary                shift and go to state 107
    operator_binary_computation    shift and go to state 82
    operator_binary_comparison     shift and go to state 110
    operator_rhs_array             shift and go to state 103
    operator_binary_assignment     shift and go to state 92

state 115

    (26) stmt_c_while -> WHILE expression COLON . ks ENDWHILE
    (1) ks -> . element ks
    (2) ks -> . epsilon
    (3) element -> . function_definition
    (4) element -> . statement_compound
    (5) element -> . statement_simple
    (6) epsilon -> .
    (7) function_definition -> . FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (14) statement_compound -> . stmt_c_for
    (15) statement_compound -> . stmt_c_while
    (16) statement_compound -> . stmt_c_if_group ENDIF
    (32) statement_simple -> . stmt_s_control_flow
    (33) statement_simple -> . stmt_s_import
    (34) statement_simple -> . stmt_s_expression
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (25) stmt_c_for -> . FOR IDENTIFIER IN expression COLON ks ENDFOR
    (26) stmt_c_while -> . WHILE expression COLON ks ENDWHILE
    (17) stmt_c_if_group -> . stmt_c_if_F
    (18) stmt_c_if_group -> . stmt_c_if_FO
    (19) stmt_c_if_group -> . stmt_c_if_FE
    (20) stmt_c_if_group -> . stmt_c_if_FEO
    (35) stmt_s_control_flow -> . stmt_s_continue
    (36) stmt_s_control_flow -> . stmt_s_break
    (37) stmt_s_control_flow -> . stmt_s_pass
    (38) stmt_s_control_flow -> . stmt_s_return
    (44) stmt_s_import -> . IMPORT dotted_identifier
    (48) stmt_s_expression -> . expression
    (21) stmt_c_if_F -> . stmt_c_if
    (22) stmt_c_if_FO -> . stmt_c_if stmt_c_otherwise
    (23) stmt_c_if_FE -> . stmt_c_if stmt_c_elif_block
    (24) stmt_c_if_FEO -> . stmt_c_if stmt_c_elif_block stmt_c_otherwise
    (39) stmt_s_continue -> . CONTINUE
    (40) stmt_s_break -> . BREAK
    (41) stmt_s_pass -> . PASS
    (42) stmt_s_return -> . RETURN expression
    (43) stmt_s_return -> . RETURN
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (27) stmt_c_if -> . IF expression COLON ks
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    ENDWHILE        reduce using rule 6 (epsilon -> .)
    FUNCTION        shift and go to state 20
    FOR             shift and go to state 22
    WHILE           shift and go to state 7
    IMPORT          shift and go to state 18
    CONTINUE        shift and go to state 47
    BREAK           shift and go to state 13
    PASS            shift and go to state 9
    RETURN          shift and go to state 2
    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    IF              shift and go to state 35
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    stmt_c_for                     shift and go to state 1
    stmt_c_while                   shift and go to state 4
    stmt_s_return                  shift and go to state 5
    stmt_c_if_group                shift and go to state 6
    operator_unary_lhs_assignment  shift and go to state 8
    stmt_s_control_flow            shift and go to state 12
    operator_unary_lhs_computation shift and go to state 43
    stmt_s_import                  shift and go to state 14
    literal                        shift and go to state 16
    function_anonymous             shift and go to state 17
    stmt_s_continue                shift and go to state 24
    epsilon                        shift and go to state 23
    stmt_s_pass                    shift and go to state 21
    stmt_c_if_FEO                  shift and go to state 25
    operator_unary_lhs             shift and go to state 26
    array_literal                  shift and go to state 27
    stmt_c_if                      shift and go to state 28
    function_call                  shift and go to state 29
    stmt_c_if_FE                   shift and go to state 30
    statement_compound             shift and go to state 32
    stmt_c_if_FO                   shift and go to state 33
    stmt_s_expression              shift and go to state 36
    function_definition            shift and go to state 37
    statement_simple               shift and go to state 38
    expression                     shift and go to state 50
    object_literal                 shift and go to state 42
    element                        shift and go to state 44
    ks                             shift and go to state 140
    stmt_s_break                   shift and go to state 40
    stmt_c_if_F                    shift and go to state 51

state 116

    (52) expression -> LEFT_PAREN expression RIGHT_PAREN .

    COLON           reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    LEFT_BOX        reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    ASSIGN_EQUALS   reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    DOT_EQUALS      reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS_EQUALS     reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS_EQUALS    reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    TIMES_EQUALS    reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE_EQUALS   reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULUS_EQUALS  reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    EXPONENT_EQUALS reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    AND_EQUALS      reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    OR_EQUALS       reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    DOT             reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    TIMES           reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULUS         reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    EXPONENT        reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    AND             reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    OR              reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    IN              reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    HAS             reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUIVALENCE_EQUAL reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    COMPARE_GT      reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    COMPARE_GTET    reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    COMPARE_LT      reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    COMPARE_LTET    reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    FOR             reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_BOX       reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    FUNCTION        reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    WHILE           reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    IMPORT          reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    CONTINUE        reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    BREAK           reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    PASS            reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    RETURN          reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    THIS            reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    IF              reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    BLANK           reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    NULL            reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    TRUE            reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    FALSE           reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    STRING_LITERAL  reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    NUMERIC_LITERAL reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    LEFT_CURLY_BRACE reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT             reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    $end            reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    ENDWHILE        reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    ENDIF           reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    ENDFOR          reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    ENDFUNCTION     reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    OTHERWISE       reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    ELIF            reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_CURLY_BRACE reduce using rule 52 (expression -> LEFT_PAREN expression RIGHT_PAREN .)



state 117

    (47) dotted_identifier -> IDENTIFIER DOT . dotted_identifier
    (45) dotted_identifier -> . IDENTIFIER
    (46) dotted_identifier -> . TIMES
    (47) dotted_identifier -> . IDENTIFIER DOT dotted_identifier

    IDENTIFIER      shift and go to state 59
    TIMES           shift and go to state 61


    dotted_identifier              shift and go to state 141

state 118

    (59) arguments -> LEFT_PAREN exp_list . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 142



state 119

    (61) exp_list -> expression .
    (62) exp_list -> expression . COMMA exp_list
    (54) expression -> expression . operator_rhs_array
    (55) expression -> expression . operator_binary expression
    (82) operator_rhs_array -> . LEFT_BOX array_operator_insides RIGHT_BOX
    (86) operator_binary -> . operator_binary_assignment
    (87) operator_binary -> . operator_binary_computation
    (88) operator_binary -> . operator_binary_comparison
    (89) operator_binary_assignment -> . ASSIGN_EQUALS
    (90) operator_binary_assignment -> . DOT_EQUALS
    (91) operator_binary_assignment -> . PLUS_EQUALS
    (92) operator_binary_assignment -> . MINUS_EQUALS
    (93) operator_binary_assignment -> . TIMES_EQUALS
    (94) operator_binary_assignment -> . DIVIDE_EQUALS
    (95) operator_binary_assignment -> . MODULUS_EQUALS
    (96) operator_binary_assignment -> . EXPONENT_EQUALS
    (97) operator_binary_assignment -> . AND_EQUALS
    (98) operator_binary_assignment -> . OR_EQUALS
    (99) operator_binary_computation -> . DOT
    (100) operator_binary_computation -> . PLUS
    (101) operator_binary_computation -> . MINUS
    (102) operator_binary_computation -> . TIMES
    (103) operator_binary_computation -> . DIVIDE
    (104) operator_binary_computation -> . MODULUS
    (105) operator_binary_computation -> . EXPONENT
    (106) operator_binary_computation -> . AND
    (107) operator_binary_computation -> . OR
    (108) operator_binary_comparison -> . IN
    (109) operator_binary_comparison -> . HAS
    (110) operator_binary_comparison -> . EQUIVALENCE_EQUAL
    (111) operator_binary_comparison -> . COMPARE_GT
    (112) operator_binary_comparison -> . COMPARE_GTET
    (113) operator_binary_comparison -> . COMPARE_LT
    (114) operator_binary_comparison -> . COMPARE_LTET

    RIGHT_PAREN     reduce using rule 61 (exp_list -> expression .)
    RIGHT_BOX       reduce using rule 61 (exp_list -> expression .)
    COMMA           shift and go to state 138
    LEFT_BOX        shift and go to state 100
    ASSIGN_EQUALS   shift and go to state 106
    DOT_EQUALS      shift and go to state 80
    PLUS_EQUALS     shift and go to state 105
    MINUS_EQUALS    shift and go to state 87
    TIMES_EQUALS    shift and go to state 96
    DIVIDE_EQUALS   shift and go to state 108
    MODULUS_EQUALS  shift and go to state 94
    EXPONENT_EQUALS shift and go to state 109
    AND_EQUALS      shift and go to state 98
    OR_EQUALS       shift and go to state 99
    DOT             shift and go to state 86
    PLUS            shift and go to state 91
    MINUS           shift and go to state 85
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95
    MODULUS         shift and go to state 90
    EXPONENT        shift and go to state 89
    AND             shift and go to state 93
    OR              shift and go to state 111
    IN              shift and go to state 101
    HAS             shift and go to state 88
    EQUIVALENCE_EQUAL shift and go to state 81
    COMPARE_GT      shift and go to state 84
    COMPARE_GTET    shift and go to state 104
    COMPARE_LT      shift and go to state 97
    COMPARE_LTET    shift and go to state 83


    operator_binary                shift and go to state 107
    operator_binary_computation    shift and go to state 82
    operator_binary_comparison     shift and go to state 110
    operator_rhs_array             shift and go to state 103
    operator_binary_assignment     shift and go to state 92

state 120

    (9) function_anonymous -> FUNCTION parameters COLON . ks ENDFUNCTION
    (1) ks -> . element ks
    (2) ks -> . epsilon
    (3) element -> . function_definition
    (4) element -> . statement_compound
    (5) element -> . statement_simple
    (6) epsilon -> .
    (7) function_definition -> . FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (14) statement_compound -> . stmt_c_for
    (15) statement_compound -> . stmt_c_while
    (16) statement_compound -> . stmt_c_if_group ENDIF
    (32) statement_simple -> . stmt_s_control_flow
    (33) statement_simple -> . stmt_s_import
    (34) statement_simple -> . stmt_s_expression
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (25) stmt_c_for -> . FOR IDENTIFIER IN expression COLON ks ENDFOR
    (26) stmt_c_while -> . WHILE expression COLON ks ENDWHILE
    (17) stmt_c_if_group -> . stmt_c_if_F
    (18) stmt_c_if_group -> . stmt_c_if_FO
    (19) stmt_c_if_group -> . stmt_c_if_FE
    (20) stmt_c_if_group -> . stmt_c_if_FEO
    (35) stmt_s_control_flow -> . stmt_s_continue
    (36) stmt_s_control_flow -> . stmt_s_break
    (37) stmt_s_control_flow -> . stmt_s_pass
    (38) stmt_s_control_flow -> . stmt_s_return
    (44) stmt_s_import -> . IMPORT dotted_identifier
    (48) stmt_s_expression -> . expression
    (21) stmt_c_if_F -> . stmt_c_if
    (22) stmt_c_if_FO -> . stmt_c_if stmt_c_otherwise
    (23) stmt_c_if_FE -> . stmt_c_if stmt_c_elif_block
    (24) stmt_c_if_FEO -> . stmt_c_if stmt_c_elif_block stmt_c_otherwise
    (39) stmt_s_continue -> . CONTINUE
    (40) stmt_s_break -> . BREAK
    (41) stmt_s_pass -> . PASS
    (42) stmt_s_return -> . RETURN expression
    (43) stmt_s_return -> . RETURN
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (27) stmt_c_if -> . IF expression COLON ks
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    ENDFUNCTION     reduce using rule 6 (epsilon -> .)
    FUNCTION        shift and go to state 20
    FOR             shift and go to state 22
    WHILE           shift and go to state 7
    IMPORT          shift and go to state 18
    CONTINUE        shift and go to state 47
    BREAK           shift and go to state 13
    PASS            shift and go to state 9
    RETURN          shift and go to state 2
    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    IF              shift and go to state 35
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    stmt_c_for                     shift and go to state 1
    stmt_c_while                   shift and go to state 4
    stmt_s_return                  shift and go to state 5
    stmt_c_if_group                shift and go to state 6
    operator_unary_lhs_assignment  shift and go to state 8
    stmt_s_control_flow            shift and go to state 12
    operator_unary_lhs_computation shift and go to state 43
    stmt_s_import                  shift and go to state 14
    literal                        shift and go to state 16
    function_anonymous             shift and go to state 17
    stmt_s_continue                shift and go to state 24
    epsilon                        shift and go to state 23
    stmt_s_pass                    shift and go to state 21
    stmt_c_if_FEO                  shift and go to state 25
    operator_unary_lhs             shift and go to state 26
    array_literal                  shift and go to state 27
    stmt_c_if                      shift and go to state 28
    function_call                  shift and go to state 29
    stmt_c_if_FE                   shift and go to state 30
    statement_compound             shift and go to state 32
    stmt_c_if_FO                   shift and go to state 33
    stmt_s_expression              shift and go to state 36
    function_definition            shift and go to state 37
    statement_simple               shift and go to state 38
    expression                     shift and go to state 50
    object_literal                 shift and go to state 42
    element                        shift and go to state 44
    ks                             shift and go to state 143
    stmt_s_break                   shift and go to state 40
    stmt_c_if_F                    shift and go to state 51

state 121

    (10) parameters -> LEFT_PAREN param_list . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 144



state 122

    (11) param_list -> epsilon .

    RIGHT_PAREN     reduce using rule 11 (param_list -> epsilon .)



state 123

    (12) param_list -> IDENTIFIER .
    (13) param_list -> IDENTIFIER . COMMA param_list

    RIGHT_PAREN     reduce using rule 12 (param_list -> IDENTIFIER .)
    COMMA           shift and go to state 145



state 124

    (7) function_definition -> FUNCTION IDENTIFIER parameters . COLON ks ENDFUNCTION

    COLON           shift and go to state 146



state 125

    (25) stmt_c_for -> FOR IDENTIFIER IN . expression COLON ks ENDFOR
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    FUNCTION        shift and go to state 53
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    operator_unary_lhs_computation shift and go to state 43
    array_literal                  shift and go to state 27
    function_call                  shift and go to state 29
    operator_unary_lhs             shift and go to state 26
    literal                        shift and go to state 16
    object_literal                 shift and go to state 42
    operator_unary_lhs_assignment  shift and go to state 8
    function_anonymous             shift and go to state 54
    expression                     shift and go to state 147

state 126

    (30) stmt_c_elif_block -> stmt_c_elif stmt_c_elif_block .

    OTHERWISE       reduce using rule 30 (stmt_c_elif_block -> stmt_c_elif stmt_c_elif_block .)
    ENDIF           reduce using rule 30 (stmt_c_elif_block -> stmt_c_elif stmt_c_elif_block .)



state 127

    (24) stmt_c_if_FEO -> stmt_c_if stmt_c_elif_block stmt_c_otherwise .

    ENDIF           reduce using rule 24 (stmt_c_if_FEO -> stmt_c_if stmt_c_elif_block stmt_c_otherwise .)



state 128

    (31) stmt_c_elif -> ELIF expression . COLON ks
    (54) expression -> expression . operator_rhs_array
    (55) expression -> expression . operator_binary expression
    (82) operator_rhs_array -> . LEFT_BOX array_operator_insides RIGHT_BOX
    (86) operator_binary -> . operator_binary_assignment
    (87) operator_binary -> . operator_binary_computation
    (88) operator_binary -> . operator_binary_comparison
    (89) operator_binary_assignment -> . ASSIGN_EQUALS
    (90) operator_binary_assignment -> . DOT_EQUALS
    (91) operator_binary_assignment -> . PLUS_EQUALS
    (92) operator_binary_assignment -> . MINUS_EQUALS
    (93) operator_binary_assignment -> . TIMES_EQUALS
    (94) operator_binary_assignment -> . DIVIDE_EQUALS
    (95) operator_binary_assignment -> . MODULUS_EQUALS
    (96) operator_binary_assignment -> . EXPONENT_EQUALS
    (97) operator_binary_assignment -> . AND_EQUALS
    (98) operator_binary_assignment -> . OR_EQUALS
    (99) operator_binary_computation -> . DOT
    (100) operator_binary_computation -> . PLUS
    (101) operator_binary_computation -> . MINUS
    (102) operator_binary_computation -> . TIMES
    (103) operator_binary_computation -> . DIVIDE
    (104) operator_binary_computation -> . MODULUS
    (105) operator_binary_computation -> . EXPONENT
    (106) operator_binary_computation -> . AND
    (107) operator_binary_computation -> . OR
    (108) operator_binary_comparison -> . IN
    (109) operator_binary_comparison -> . HAS
    (110) operator_binary_comparison -> . EQUIVALENCE_EQUAL
    (111) operator_binary_comparison -> . COMPARE_GT
    (112) operator_binary_comparison -> . COMPARE_GTET
    (113) operator_binary_comparison -> . COMPARE_LT
    (114) operator_binary_comparison -> . COMPARE_LTET

    COLON           shift and go to state 148
    LEFT_BOX        shift and go to state 100
    ASSIGN_EQUALS   shift and go to state 106
    DOT_EQUALS      shift and go to state 80
    PLUS_EQUALS     shift and go to state 105
    MINUS_EQUALS    shift and go to state 87
    TIMES_EQUALS    shift and go to state 96
    DIVIDE_EQUALS   shift and go to state 108
    MODULUS_EQUALS  shift and go to state 94
    EXPONENT_EQUALS shift and go to state 109
    AND_EQUALS      shift and go to state 98
    OR_EQUALS       shift and go to state 99
    DOT             shift and go to state 86
    PLUS            shift and go to state 91
    MINUS           shift and go to state 85
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95
    MODULUS         shift and go to state 90
    EXPONENT        shift and go to state 89
    AND             shift and go to state 93
    OR              shift and go to state 111
    IN              shift and go to state 101
    HAS             shift and go to state 88
    EQUIVALENCE_EQUAL shift and go to state 81
    COMPARE_GT      shift and go to state 84
    COMPARE_GTET    shift and go to state 104
    COMPARE_LT      shift and go to state 97
    COMPARE_LTET    shift and go to state 83


    operator_binary                shift and go to state 107
    operator_binary_computation    shift and go to state 82
    operator_binary_comparison     shift and go to state 110
    operator_rhs_array             shift and go to state 103
    operator_binary_assignment     shift and go to state 92

state 129

    (28) stmt_c_otherwise -> OTHERWISE COLON . ks
    (1) ks -> . element ks
    (2) ks -> . epsilon
    (3) element -> . function_definition
    (4) element -> . statement_compound
    (5) element -> . statement_simple
    (6) epsilon -> .
    (7) function_definition -> . FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (14) statement_compound -> . stmt_c_for
    (15) statement_compound -> . stmt_c_while
    (16) statement_compound -> . stmt_c_if_group ENDIF
    (32) statement_simple -> . stmt_s_control_flow
    (33) statement_simple -> . stmt_s_import
    (34) statement_simple -> . stmt_s_expression
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (25) stmt_c_for -> . FOR IDENTIFIER IN expression COLON ks ENDFOR
    (26) stmt_c_while -> . WHILE expression COLON ks ENDWHILE
    (17) stmt_c_if_group -> . stmt_c_if_F
    (18) stmt_c_if_group -> . stmt_c_if_FO
    (19) stmt_c_if_group -> . stmt_c_if_FE
    (20) stmt_c_if_group -> . stmt_c_if_FEO
    (35) stmt_s_control_flow -> . stmt_s_continue
    (36) stmt_s_control_flow -> . stmt_s_break
    (37) stmt_s_control_flow -> . stmt_s_pass
    (38) stmt_s_control_flow -> . stmt_s_return
    (44) stmt_s_import -> . IMPORT dotted_identifier
    (48) stmt_s_expression -> . expression
    (21) stmt_c_if_F -> . stmt_c_if
    (22) stmt_c_if_FO -> . stmt_c_if stmt_c_otherwise
    (23) stmt_c_if_FE -> . stmt_c_if stmt_c_elif_block
    (24) stmt_c_if_FEO -> . stmt_c_if stmt_c_elif_block stmt_c_otherwise
    (39) stmt_s_continue -> . CONTINUE
    (40) stmt_s_break -> . BREAK
    (41) stmt_s_pass -> . PASS
    (42) stmt_s_return -> . RETURN expression
    (43) stmt_s_return -> . RETURN
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (27) stmt_c_if -> . IF expression COLON ks
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    ENDIF           reduce using rule 6 (epsilon -> .)
    FUNCTION        shift and go to state 20
    FOR             shift and go to state 22
    WHILE           shift and go to state 7
    IMPORT          shift and go to state 18
    CONTINUE        shift and go to state 47
    BREAK           shift and go to state 13
    PASS            shift and go to state 9
    RETURN          shift and go to state 2
    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    IF              shift and go to state 35
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    stmt_c_for                     shift and go to state 1
    stmt_c_while                   shift and go to state 4
    stmt_s_return                  shift and go to state 5
    stmt_c_if_group                shift and go to state 6
    operator_unary_lhs_assignment  shift and go to state 8
    stmt_s_control_flow            shift and go to state 12
    operator_unary_lhs_computation shift and go to state 43
    stmt_s_import                  shift and go to state 14
    literal                        shift and go to state 16
    function_anonymous             shift and go to state 17
    stmt_s_continue                shift and go to state 24
    epsilon                        shift and go to state 23
    stmt_s_pass                    shift and go to state 21
    stmt_c_if_FEO                  shift and go to state 25
    operator_unary_lhs             shift and go to state 26
    array_literal                  shift and go to state 27
    stmt_c_if                      shift and go to state 28
    function_call                  shift and go to state 29
    stmt_c_if_FE                   shift and go to state 30
    statement_compound             shift and go to state 32
    stmt_c_if_FO                   shift and go to state 33
    stmt_s_expression              shift and go to state 36
    function_definition            shift and go to state 37
    statement_simple               shift and go to state 38
    expression                     shift and go to state 50
    object_literal                 shift and go to state 42
    element                        shift and go to state 44
    ks                             shift and go to state 149
    stmt_s_break                   shift and go to state 40
    stmt_c_if_F                    shift and go to state 51

state 130

    (27) stmt_c_if -> IF expression COLON . ks
    (1) ks -> . element ks
    (2) ks -> . epsilon
    (3) element -> . function_definition
    (4) element -> . statement_compound
    (5) element -> . statement_simple
    (6) epsilon -> .
    (7) function_definition -> . FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (14) statement_compound -> . stmt_c_for
    (15) statement_compound -> . stmt_c_while
    (16) statement_compound -> . stmt_c_if_group ENDIF
    (32) statement_simple -> . stmt_s_control_flow
    (33) statement_simple -> . stmt_s_import
    (34) statement_simple -> . stmt_s_expression
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (25) stmt_c_for -> . FOR IDENTIFIER IN expression COLON ks ENDFOR
    (26) stmt_c_while -> . WHILE expression COLON ks ENDWHILE
    (17) stmt_c_if_group -> . stmt_c_if_F
    (18) stmt_c_if_group -> . stmt_c_if_FO
    (19) stmt_c_if_group -> . stmt_c_if_FE
    (20) stmt_c_if_group -> . stmt_c_if_FEO
    (35) stmt_s_control_flow -> . stmt_s_continue
    (36) stmt_s_control_flow -> . stmt_s_break
    (37) stmt_s_control_flow -> . stmt_s_pass
    (38) stmt_s_control_flow -> . stmt_s_return
    (44) stmt_s_import -> . IMPORT dotted_identifier
    (48) stmt_s_expression -> . expression
    (21) stmt_c_if_F -> . stmt_c_if
    (22) stmt_c_if_FO -> . stmt_c_if stmt_c_otherwise
    (23) stmt_c_if_FE -> . stmt_c_if stmt_c_elif_block
    (24) stmt_c_if_FEO -> . stmt_c_if stmt_c_elif_block stmt_c_otherwise
    (39) stmt_s_continue -> . CONTINUE
    (40) stmt_s_break -> . BREAK
    (41) stmt_s_pass -> . PASS
    (42) stmt_s_return -> . RETURN expression
    (43) stmt_s_return -> . RETURN
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (27) stmt_c_if -> . IF expression COLON ks
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    OTHERWISE       reduce using rule 6 (epsilon -> .)
    ELIF            reduce using rule 6 (epsilon -> .)
    ENDIF           reduce using rule 6 (epsilon -> .)
    FUNCTION        shift and go to state 20
    FOR             shift and go to state 22
    WHILE           shift and go to state 7
    IMPORT          shift and go to state 18
    CONTINUE        shift and go to state 47
    BREAK           shift and go to state 13
    PASS            shift and go to state 9
    RETURN          shift and go to state 2
    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    IF              shift and go to state 35
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    stmt_c_for                     shift and go to state 1
    stmt_c_while                   shift and go to state 4
    stmt_s_return                  shift and go to state 5
    stmt_c_if_group                shift and go to state 6
    operator_unary_lhs_assignment  shift and go to state 8
    stmt_s_control_flow            shift and go to state 12
    operator_unary_lhs_computation shift and go to state 43
    stmt_s_import                  shift and go to state 14
    literal                        shift and go to state 16
    function_anonymous             shift and go to state 17
    stmt_s_continue                shift and go to state 24
    epsilon                        shift and go to state 23
    stmt_s_pass                    shift and go to state 21
    stmt_c_if_FEO                  shift and go to state 25
    operator_unary_lhs             shift and go to state 26
    array_literal                  shift and go to state 27
    stmt_c_if                      shift and go to state 28
    function_call                  shift and go to state 29
    stmt_c_if_FE                   shift and go to state 30
    statement_compound             shift and go to state 32
    stmt_c_if_FO                   shift and go to state 33
    stmt_s_expression              shift and go to state 36
    function_definition            shift and go to state 37
    statement_simple               shift and go to state 38
    expression                     shift and go to state 50
    object_literal                 shift and go to state 42
    element                        shift and go to state 44
    ks                             shift and go to state 150
    stmt_s_break                   shift and go to state 40
    stmt_c_if_F                    shift and go to state 51

state 131

    (76) pair_list -> key_value_pair COMMA . pair_list
    (74) pair_list -> . epsilon
    (75) pair_list -> . key_value_pair
    (76) pair_list -> . key_value_pair COMMA pair_list
    (6) epsilon -> .
    (77) key_value_pair -> . IDENTIFIER COLON expression

    RIGHT_CURLY_BRACE reduce using rule 6 (epsilon -> .)
    IDENTIFIER      shift and go to state 79


    key_value_pair                 shift and go to state 76
    epsilon                        shift and go to state 78
    pair_list                      shift and go to state 151

state 132

    (73) object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .

    COLON           reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    LEFT_BOX        reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    ASSIGN_EQUALS   reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    DOT_EQUALS      reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    PLUS_EQUALS     reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    MINUS_EQUALS    reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    TIMES_EQUALS    reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    DIVIDE_EQUALS   reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    MODULUS_EQUALS  reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    EXPONENT_EQUALS reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    AND_EQUALS      reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    OR_EQUALS       reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    DOT             reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    PLUS            reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    MINUS           reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    TIMES           reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    DIVIDE          reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    MODULUS         reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    EXPONENT        reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    AND             reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    OR              reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    IN              reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    HAS             reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    EQUIVALENCE_EQUAL reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    COMPARE_GT      reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    COMPARE_GTET    reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    COMPARE_LT      reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    COMPARE_LTET    reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    RIGHT_BOX       reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    FOR             reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    COMMA           reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    FUNCTION        reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    WHILE           reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    IMPORT          reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    CONTINUE        reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    BREAK           reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    PASS            reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    RETURN          reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    LEFT_PAREN      reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    IDENTIFIER      reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    THIS            reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    IF              reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    BLANK           reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    NULL            reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    TRUE            reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    FALSE           reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    STRING_LITERAL  reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    NUMERIC_LITERAL reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    LEFT_CURLY_BRACE reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    NOT_EQUALS      reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    NOT             reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    OTHERWISE       reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    ELIF            reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    ENDIF           reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    $end            reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    ENDWHILE        reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    ENDFUNCTION     reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    ENDFOR          reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    RIGHT_PAREN     reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    RIGHT_CURLY_BRACE reduce using rule 73 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)



state 133

    (77) key_value_pair -> IDENTIFIER COLON . expression
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    FUNCTION        shift and go to state 53
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    operator_unary_lhs_computation shift and go to state 43
    expression                     shift and go to state 152
    array_literal                  shift and go to state 27
    function_call                  shift and go to state 29
    operator_unary_lhs             shift and go to state 26
    literal                        shift and go to state 16
    object_literal                 shift and go to state 42
    operator_unary_lhs_assignment  shift and go to state 8
    function_anonymous             shift and go to state 54

state 134

    (82) operator_rhs_array -> LEFT_BOX array_operator_insides . RIGHT_BOX

    RIGHT_BOX       shift and go to state 153



state 135

    (83) array_operator_insides -> expression .
    (84) array_operator_insides -> expression . COLON expression
    (85) array_operator_insides -> expression . COLON expression COLON expression
    (54) expression -> expression . operator_rhs_array
    (55) expression -> expression . operator_binary expression
    (82) operator_rhs_array -> . LEFT_BOX array_operator_insides RIGHT_BOX
    (86) operator_binary -> . operator_binary_assignment
    (87) operator_binary -> . operator_binary_computation
    (88) operator_binary -> . operator_binary_comparison
    (89) operator_binary_assignment -> . ASSIGN_EQUALS
    (90) operator_binary_assignment -> . DOT_EQUALS
    (91) operator_binary_assignment -> . PLUS_EQUALS
    (92) operator_binary_assignment -> . MINUS_EQUALS
    (93) operator_binary_assignment -> . TIMES_EQUALS
    (94) operator_binary_assignment -> . DIVIDE_EQUALS
    (95) operator_binary_assignment -> . MODULUS_EQUALS
    (96) operator_binary_assignment -> . EXPONENT_EQUALS
    (97) operator_binary_assignment -> . AND_EQUALS
    (98) operator_binary_assignment -> . OR_EQUALS
    (99) operator_binary_computation -> . DOT
    (100) operator_binary_computation -> . PLUS
    (101) operator_binary_computation -> . MINUS
    (102) operator_binary_computation -> . TIMES
    (103) operator_binary_computation -> . DIVIDE
    (104) operator_binary_computation -> . MODULUS
    (105) operator_binary_computation -> . EXPONENT
    (106) operator_binary_computation -> . AND
    (107) operator_binary_computation -> . OR
    (108) operator_binary_comparison -> . IN
    (109) operator_binary_comparison -> . HAS
    (110) operator_binary_comparison -> . EQUIVALENCE_EQUAL
    (111) operator_binary_comparison -> . COMPARE_GT
    (112) operator_binary_comparison -> . COMPARE_GTET
    (113) operator_binary_comparison -> . COMPARE_LT
    (114) operator_binary_comparison -> . COMPARE_LTET

    RIGHT_BOX       reduce using rule 83 (array_operator_insides -> expression .)
    COLON           shift and go to state 154
    LEFT_BOX        shift and go to state 100
    ASSIGN_EQUALS   shift and go to state 106
    DOT_EQUALS      shift and go to state 80
    PLUS_EQUALS     shift and go to state 105
    MINUS_EQUALS    shift and go to state 87
    TIMES_EQUALS    shift and go to state 96
    DIVIDE_EQUALS   shift and go to state 108
    MODULUS_EQUALS  shift and go to state 94
    EXPONENT_EQUALS shift and go to state 109
    AND_EQUALS      shift and go to state 98
    OR_EQUALS       shift and go to state 99
    DOT             shift and go to state 86
    PLUS            shift and go to state 91
    MINUS           shift and go to state 85
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95
    MODULUS         shift and go to state 90
    EXPONENT        shift and go to state 89
    AND             shift and go to state 93
    OR              shift and go to state 111
    IN              shift and go to state 101
    HAS             shift and go to state 88
    EQUIVALENCE_EQUAL shift and go to state 81
    COMPARE_GT      shift and go to state 84
    COMPARE_GTET    shift and go to state 104
    COMPARE_LT      shift and go to state 97
    COMPARE_LTET    shift and go to state 83


    operator_binary                shift and go to state 107
    operator_binary_computation    shift and go to state 82
    operator_binary_comparison     shift and go to state 110
    operator_rhs_array             shift and go to state 103
    operator_binary_assignment     shift and go to state 92

state 136

    (55) expression -> expression operator_binary expression .
    (54) expression -> expression . operator_rhs_array
    (55) expression -> expression . operator_binary expression
    (82) operator_rhs_array -> . LEFT_BOX array_operator_insides RIGHT_BOX
    (86) operator_binary -> . operator_binary_assignment
    (87) operator_binary -> . operator_binary_computation
    (88) operator_binary -> . operator_binary_comparison
    (89) operator_binary_assignment -> . ASSIGN_EQUALS
    (90) operator_binary_assignment -> . DOT_EQUALS
    (91) operator_binary_assignment -> . PLUS_EQUALS
    (92) operator_binary_assignment -> . MINUS_EQUALS
    (93) operator_binary_assignment -> . TIMES_EQUALS
    (94) operator_binary_assignment -> . DIVIDE_EQUALS
    (95) operator_binary_assignment -> . MODULUS_EQUALS
    (96) operator_binary_assignment -> . EXPONENT_EQUALS
    (97) operator_binary_assignment -> . AND_EQUALS
    (98) operator_binary_assignment -> . OR_EQUALS
    (99) operator_binary_computation -> . DOT
    (100) operator_binary_computation -> . PLUS
    (101) operator_binary_computation -> . MINUS
    (102) operator_binary_computation -> . TIMES
    (103) operator_binary_computation -> . DIVIDE
    (104) operator_binary_computation -> . MODULUS
    (105) operator_binary_computation -> . EXPONENT
    (106) operator_binary_computation -> . AND
    (107) operator_binary_computation -> . OR
    (108) operator_binary_comparison -> . IN
    (109) operator_binary_comparison -> . HAS
    (110) operator_binary_comparison -> . EQUIVALENCE_EQUAL
    (111) operator_binary_comparison -> . COMPARE_GT
    (112) operator_binary_comparison -> . COMPARE_GTET
    (113) operator_binary_comparison -> . COMPARE_LT
    (114) operator_binary_comparison -> . COMPARE_LTET

  ! shift/reduce conflict for LEFT_BOX resolved as shift.
  ! shift/reduce conflict for ASSIGN_EQUALS resolved as shift.
  ! shift/reduce conflict for DOT_EQUALS resolved as shift.
  ! shift/reduce conflict for PLUS_EQUALS resolved as shift.
  ! shift/reduce conflict for MINUS_EQUALS resolved as shift.
  ! shift/reduce conflict for TIMES_EQUALS resolved as shift.
  ! shift/reduce conflict for DIVIDE_EQUALS resolved as shift.
  ! shift/reduce conflict for MODULUS_EQUALS resolved as shift.
  ! shift/reduce conflict for EXPONENT_EQUALS resolved as shift.
  ! shift/reduce conflict for AND_EQUALS resolved as shift.
  ! shift/reduce conflict for OR_EQUALS resolved as shift.
  ! shift/reduce conflict for DOT resolved as shift.
  ! shift/reduce conflict for PLUS resolved as shift.
  ! shift/reduce conflict for MINUS resolved as shift.
  ! shift/reduce conflict for TIMES resolved as shift.
  ! shift/reduce conflict for DIVIDE resolved as shift.
  ! shift/reduce conflict for MODULUS resolved as shift.
  ! shift/reduce conflict for EXPONENT resolved as shift.
  ! shift/reduce conflict for AND resolved as shift.
  ! shift/reduce conflict for OR resolved as shift.
  ! shift/reduce conflict for IN resolved as shift.
  ! shift/reduce conflict for HAS resolved as shift.
  ! shift/reduce conflict for EQUIVALENCE_EQUAL resolved as shift.
  ! shift/reduce conflict for COMPARE_GT resolved as shift.
  ! shift/reduce conflict for COMPARE_GTET resolved as shift.
  ! shift/reduce conflict for COMPARE_LT resolved as shift.
  ! shift/reduce conflict for COMPARE_LTET resolved as shift.
    COLON           reduce using rule 55 (expression -> expression operator_binary expression .)
    FOR             reduce using rule 55 (expression -> expression operator_binary expression .)
    COMMA           reduce using rule 55 (expression -> expression operator_binary expression .)
    RIGHT_BOX       reduce using rule 55 (expression -> expression operator_binary expression .)
    FUNCTION        reduce using rule 55 (expression -> expression operator_binary expression .)
    WHILE           reduce using rule 55 (expression -> expression operator_binary expression .)
    IMPORT          reduce using rule 55 (expression -> expression operator_binary expression .)
    CONTINUE        reduce using rule 55 (expression -> expression operator_binary expression .)
    BREAK           reduce using rule 55 (expression -> expression operator_binary expression .)
    PASS            reduce using rule 55 (expression -> expression operator_binary expression .)
    RETURN          reduce using rule 55 (expression -> expression operator_binary expression .)
    LEFT_PAREN      reduce using rule 55 (expression -> expression operator_binary expression .)
    IDENTIFIER      reduce using rule 55 (expression -> expression operator_binary expression .)
    THIS            reduce using rule 55 (expression -> expression operator_binary expression .)
    IF              reduce using rule 55 (expression -> expression operator_binary expression .)
    BLANK           reduce using rule 55 (expression -> expression operator_binary expression .)
    NULL            reduce using rule 55 (expression -> expression operator_binary expression .)
    TRUE            reduce using rule 55 (expression -> expression operator_binary expression .)
    FALSE           reduce using rule 55 (expression -> expression operator_binary expression .)
    STRING_LITERAL  reduce using rule 55 (expression -> expression operator_binary expression .)
    NUMERIC_LITERAL reduce using rule 55 (expression -> expression operator_binary expression .)
    LEFT_CURLY_BRACE reduce using rule 55 (expression -> expression operator_binary expression .)
    NOT_EQUALS      reduce using rule 55 (expression -> expression operator_binary expression .)
    NOT             reduce using rule 55 (expression -> expression operator_binary expression .)
    $end            reduce using rule 55 (expression -> expression operator_binary expression .)
    ENDWHILE        reduce using rule 55 (expression -> expression operator_binary expression .)
    ENDIF           reduce using rule 55 (expression -> expression operator_binary expression .)
    RIGHT_PAREN     reduce using rule 55 (expression -> expression operator_binary expression .)
    ENDFOR          reduce using rule 55 (expression -> expression operator_binary expression .)
    ENDFUNCTION     reduce using rule 55 (expression -> expression operator_binary expression .)
    OTHERWISE       reduce using rule 55 (expression -> expression operator_binary expression .)
    ELIF            reduce using rule 55 (expression -> expression operator_binary expression .)
    RIGHT_CURLY_BRACE reduce using rule 55 (expression -> expression operator_binary expression .)
    LEFT_BOX        shift and go to state 100
    ASSIGN_EQUALS   shift and go to state 106
    DOT_EQUALS      shift and go to state 80
    PLUS_EQUALS     shift and go to state 105
    MINUS_EQUALS    shift and go to state 87
    TIMES_EQUALS    shift and go to state 96
    DIVIDE_EQUALS   shift and go to state 108
    MODULUS_EQUALS  shift and go to state 94
    EXPONENT_EQUALS shift and go to state 109
    AND_EQUALS      shift and go to state 98
    OR_EQUALS       shift and go to state 99
    DOT             shift and go to state 86
    PLUS            shift and go to state 91
    MINUS           shift and go to state 85
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95
    MODULUS         shift and go to state 90
    EXPONENT        shift and go to state 89
    AND             shift and go to state 93
    OR              shift and go to state 111
    IN              shift and go to state 101
    HAS             shift and go to state 88
    EQUIVALENCE_EQUAL shift and go to state 81
    COMPARE_GT      shift and go to state 84
    COMPARE_GTET    shift and go to state 104
    COMPARE_LT      shift and go to state 97
    COMPARE_LTET    shift and go to state 83

  ! LEFT_BOX        [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! ASSIGN_EQUALS   [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! DOT_EQUALS      [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! PLUS_EQUALS     [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! MINUS_EQUALS    [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! TIMES_EQUALS    [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! DIVIDE_EQUALS   [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! MODULUS_EQUALS  [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! EXPONENT_EQUALS [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! AND_EQUALS      [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! OR_EQUALS       [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! DOT             [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! PLUS            [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! TIMES           [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! MODULUS         [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! EXPONENT        [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! AND             [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! OR              [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! IN              [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! HAS             [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! EQUIVALENCE_EQUAL [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! COMPARE_GT      [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! COMPARE_GTET    [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! COMPARE_LT      [ reduce using rule 55 (expression -> expression operator_binary expression .) ]
  ! COMPARE_LTET    [ reduce using rule 55 (expression -> expression operator_binary expression .) ]

    operator_binary                shift and go to state 107
    operator_binary_computation    shift and go to state 82
    operator_binary_comparison     shift and go to state 110
    operator_rhs_array             shift and go to state 103
    operator_binary_assignment     shift and go to state 92

state 137

    (71) array_literal -> LEFT_BOX exp_list RIGHT_BOX .

    LEFT_BOX        reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    ASSIGN_EQUALS   reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    DOT_EQUALS      reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    PLUS_EQUALS     reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    MINUS_EQUALS    reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    TIMES_EQUALS    reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    DIVIDE_EQUALS   reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    MODULUS_EQUALS  reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    EXPONENT_EQUALS reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    AND_EQUALS      reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    OR_EQUALS       reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    DOT             reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    PLUS            reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    MINUS           reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    TIMES           reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    DIVIDE          reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    MODULUS         reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    EXPONENT        reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    AND             reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    OR              reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    IN              reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    HAS             reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    EQUIVALENCE_EQUAL reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    COMPARE_GT      reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    COMPARE_GTET    reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    COMPARE_LT      reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    COMPARE_LTET    reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    FUNCTION        reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    FOR             reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    WHILE           reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    IMPORT          reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    CONTINUE        reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    BREAK           reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    PASS            reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    RETURN          reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    LEFT_PAREN      reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    IDENTIFIER      reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    THIS            reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    IF              reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    BLANK           reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    NULL            reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    TRUE            reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    FALSE           reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    STRING_LITERAL  reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    NUMERIC_LITERAL reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    LEFT_CURLY_BRACE reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    NOT_EQUALS      reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    NOT             reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    $end            reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    ENDWHILE        reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    ENDFUNCTION     reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    ENDIF           reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    OTHERWISE       reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    ELIF            reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    ENDFOR          reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    COLON           reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    RIGHT_PAREN     reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    COMMA           reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    RIGHT_BOX       reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    RIGHT_CURLY_BRACE reduce using rule 71 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)



state 138

    (62) exp_list -> expression COMMA . exp_list
    (60) exp_list -> . epsilon
    (61) exp_list -> . expression
    (62) exp_list -> . expression COMMA exp_list
    (6) epsilon -> .
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    RIGHT_BOX       reduce using rule 6 (epsilon -> .)
    RIGHT_PAREN     reduce using rule 6 (epsilon -> .)
    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    FUNCTION        shift and go to state 53
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    exp_list                       shift and go to state 155
    operator_unary_lhs_computation shift and go to state 43
    epsilon                        shift and go to state 113
    array_literal                  shift and go to state 27
    function_call                  shift and go to state 29
    operator_unary_lhs             shift and go to state 26
    literal                        shift and go to state 16
    object_literal                 shift and go to state 42
    operator_unary_lhs_assignment  shift and go to state 8
    function_anonymous             shift and go to state 54
    expression                     shift and go to state 119

state 139

    (72) array_literal -> LEFT_BOX expression FOR . IDENTIFIER IN expression RIGHT_BOX

    IDENTIFIER      shift and go to state 156



state 140

    (26) stmt_c_while -> WHILE expression COLON ks . ENDWHILE

    ENDWHILE        shift and go to state 157



state 141

    (47) dotted_identifier -> IDENTIFIER DOT dotted_identifier .

    FUNCTION        reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    FOR             reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    WHILE           reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    IMPORT          reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    CONTINUE        reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    BREAK           reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    PASS            reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    RETURN          reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    LEFT_PAREN      reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    IDENTIFIER      reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    THIS            reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    IF              reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    BLANK           reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    NULL            reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    TRUE            reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    FALSE           reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    STRING_LITERAL  reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    NUMERIC_LITERAL reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    LEFT_BOX        reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    LEFT_CURLY_BRACE reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    NOT_EQUALS      reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    NOT             reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    $end            reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    ENDWHILE        reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    ENDFUNCTION     reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    ENDIF           reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    OTHERWISE       reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    ELIF            reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)
    ENDFOR          reduce using rule 47 (dotted_identifier -> IDENTIFIER DOT dotted_identifier .)



state 142

    (59) arguments -> LEFT_PAREN exp_list RIGHT_PAREN .

    LEFT_BOX        reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    ASSIGN_EQUALS   reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    DOT_EQUALS      reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    PLUS_EQUALS     reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    MINUS_EQUALS    reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    TIMES_EQUALS    reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    DIVIDE_EQUALS   reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    MODULUS_EQUALS  reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    EXPONENT_EQUALS reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    AND_EQUALS      reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    OR_EQUALS       reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    DOT             reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    PLUS            reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    MINUS           reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    TIMES           reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    DIVIDE          reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    MODULUS         reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    EXPONENT        reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    AND             reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    OR              reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    IN              reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    HAS             reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    EQUIVALENCE_EQUAL reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    COMPARE_GT      reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    COMPARE_GTET    reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    COMPARE_LT      reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    COMPARE_LTET    reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    FUNCTION        reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    FOR             reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    WHILE           reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    IMPORT          reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    CONTINUE        reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    BREAK           reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    PASS            reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    RETURN          reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    THIS            reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    IF              reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    BLANK           reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    NULL            reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    TRUE            reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    FALSE           reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    STRING_LITERAL  reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    NUMERIC_LITERAL reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    LEFT_CURLY_BRACE reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    NOT             reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    $end            reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    ENDWHILE        reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    ENDFUNCTION     reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    ENDIF           reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    OTHERWISE       reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    ELIF            reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    ENDFOR          reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    COLON           reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    COMMA           reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    RIGHT_BOX       reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)
    RIGHT_CURLY_BRACE reduce using rule 59 (arguments -> LEFT_PAREN exp_list RIGHT_PAREN .)



state 143

    (9) function_anonymous -> FUNCTION parameters COLON ks . ENDFUNCTION

    ENDFUNCTION     shift and go to state 158



state 144

    (10) parameters -> LEFT_PAREN param_list RIGHT_PAREN .

    COLON           reduce using rule 10 (parameters -> LEFT_PAREN param_list RIGHT_PAREN .)



state 145

    (13) param_list -> IDENTIFIER COMMA . param_list
    (11) param_list -> . epsilon
    (12) param_list -> . IDENTIFIER
    (13) param_list -> . IDENTIFIER COMMA param_list
    (6) epsilon -> .

    IDENTIFIER      shift and go to state 123
    RIGHT_PAREN     reduce using rule 6 (epsilon -> .)


    param_list                     shift and go to state 159
    epsilon                        shift and go to state 122

state 146

    (7) function_definition -> FUNCTION IDENTIFIER parameters COLON . ks ENDFUNCTION
    (1) ks -> . element ks
    (2) ks -> . epsilon
    (3) element -> . function_definition
    (4) element -> . statement_compound
    (5) element -> . statement_simple
    (6) epsilon -> .
    (7) function_definition -> . FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (14) statement_compound -> . stmt_c_for
    (15) statement_compound -> . stmt_c_while
    (16) statement_compound -> . stmt_c_if_group ENDIF
    (32) statement_simple -> . stmt_s_control_flow
    (33) statement_simple -> . stmt_s_import
    (34) statement_simple -> . stmt_s_expression
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (25) stmt_c_for -> . FOR IDENTIFIER IN expression COLON ks ENDFOR
    (26) stmt_c_while -> . WHILE expression COLON ks ENDWHILE
    (17) stmt_c_if_group -> . stmt_c_if_F
    (18) stmt_c_if_group -> . stmt_c_if_FO
    (19) stmt_c_if_group -> . stmt_c_if_FE
    (20) stmt_c_if_group -> . stmt_c_if_FEO
    (35) stmt_s_control_flow -> . stmt_s_continue
    (36) stmt_s_control_flow -> . stmt_s_break
    (37) stmt_s_control_flow -> . stmt_s_pass
    (38) stmt_s_control_flow -> . stmt_s_return
    (44) stmt_s_import -> . IMPORT dotted_identifier
    (48) stmt_s_expression -> . expression
    (21) stmt_c_if_F -> . stmt_c_if
    (22) stmt_c_if_FO -> . stmt_c_if stmt_c_otherwise
    (23) stmt_c_if_FE -> . stmt_c_if stmt_c_elif_block
    (24) stmt_c_if_FEO -> . stmt_c_if stmt_c_elif_block stmt_c_otherwise
    (39) stmt_s_continue -> . CONTINUE
    (40) stmt_s_break -> . BREAK
    (41) stmt_s_pass -> . PASS
    (42) stmt_s_return -> . RETURN expression
    (43) stmt_s_return -> . RETURN
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (27) stmt_c_if -> . IF expression COLON ks
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    ENDFUNCTION     reduce using rule 6 (epsilon -> .)
    FUNCTION        shift and go to state 20
    FOR             shift and go to state 22
    WHILE           shift and go to state 7
    IMPORT          shift and go to state 18
    CONTINUE        shift and go to state 47
    BREAK           shift and go to state 13
    PASS            shift and go to state 9
    RETURN          shift and go to state 2
    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    IF              shift and go to state 35
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    stmt_c_for                     shift and go to state 1
    stmt_c_while                   shift and go to state 4
    stmt_s_return                  shift and go to state 5
    stmt_c_if_group                shift and go to state 6
    operator_unary_lhs_assignment  shift and go to state 8
    stmt_s_control_flow            shift and go to state 12
    operator_unary_lhs_computation shift and go to state 43
    stmt_s_import                  shift and go to state 14
    literal                        shift and go to state 16
    function_anonymous             shift and go to state 17
    stmt_s_continue                shift and go to state 24
    epsilon                        shift and go to state 23
    stmt_s_pass                    shift and go to state 21
    stmt_c_if_FEO                  shift and go to state 25
    operator_unary_lhs             shift and go to state 26
    array_literal                  shift and go to state 27
    stmt_c_if                      shift and go to state 28
    function_call                  shift and go to state 29
    stmt_c_if_FE                   shift and go to state 30
    statement_compound             shift and go to state 32
    stmt_c_if_FO                   shift and go to state 33
    stmt_s_expression              shift and go to state 36
    function_definition            shift and go to state 37
    statement_simple               shift and go to state 38
    expression                     shift and go to state 50
    object_literal                 shift and go to state 42
    element                        shift and go to state 44
    ks                             shift and go to state 160
    stmt_s_break                   shift and go to state 40
    stmt_c_if_F                    shift and go to state 51

state 147

    (25) stmt_c_for -> FOR IDENTIFIER IN expression . COLON ks ENDFOR
    (54) expression -> expression . operator_rhs_array
    (55) expression -> expression . operator_binary expression
    (82) operator_rhs_array -> . LEFT_BOX array_operator_insides RIGHT_BOX
    (86) operator_binary -> . operator_binary_assignment
    (87) operator_binary -> . operator_binary_computation
    (88) operator_binary -> . operator_binary_comparison
    (89) operator_binary_assignment -> . ASSIGN_EQUALS
    (90) operator_binary_assignment -> . DOT_EQUALS
    (91) operator_binary_assignment -> . PLUS_EQUALS
    (92) operator_binary_assignment -> . MINUS_EQUALS
    (93) operator_binary_assignment -> . TIMES_EQUALS
    (94) operator_binary_assignment -> . DIVIDE_EQUALS
    (95) operator_binary_assignment -> . MODULUS_EQUALS
    (96) operator_binary_assignment -> . EXPONENT_EQUALS
    (97) operator_binary_assignment -> . AND_EQUALS
    (98) operator_binary_assignment -> . OR_EQUALS
    (99) operator_binary_computation -> . DOT
    (100) operator_binary_computation -> . PLUS
    (101) operator_binary_computation -> . MINUS
    (102) operator_binary_computation -> . TIMES
    (103) operator_binary_computation -> . DIVIDE
    (104) operator_binary_computation -> . MODULUS
    (105) operator_binary_computation -> . EXPONENT
    (106) operator_binary_computation -> . AND
    (107) operator_binary_computation -> . OR
    (108) operator_binary_comparison -> . IN
    (109) operator_binary_comparison -> . HAS
    (110) operator_binary_comparison -> . EQUIVALENCE_EQUAL
    (111) operator_binary_comparison -> . COMPARE_GT
    (112) operator_binary_comparison -> . COMPARE_GTET
    (113) operator_binary_comparison -> . COMPARE_LT
    (114) operator_binary_comparison -> . COMPARE_LTET

    COLON           shift and go to state 161
    LEFT_BOX        shift and go to state 100
    ASSIGN_EQUALS   shift and go to state 106
    DOT_EQUALS      shift and go to state 80
    PLUS_EQUALS     shift and go to state 105
    MINUS_EQUALS    shift and go to state 87
    TIMES_EQUALS    shift and go to state 96
    DIVIDE_EQUALS   shift and go to state 108
    MODULUS_EQUALS  shift and go to state 94
    EXPONENT_EQUALS shift and go to state 109
    AND_EQUALS      shift and go to state 98
    OR_EQUALS       shift and go to state 99
    DOT             shift and go to state 86
    PLUS            shift and go to state 91
    MINUS           shift and go to state 85
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95
    MODULUS         shift and go to state 90
    EXPONENT        shift and go to state 89
    AND             shift and go to state 93
    OR              shift and go to state 111
    IN              shift and go to state 101
    HAS             shift and go to state 88
    EQUIVALENCE_EQUAL shift and go to state 81
    COMPARE_GT      shift and go to state 84
    COMPARE_GTET    shift and go to state 104
    COMPARE_LT      shift and go to state 97
    COMPARE_LTET    shift and go to state 83


    operator_binary                shift and go to state 107
    operator_binary_computation    shift and go to state 82
    operator_binary_comparison     shift and go to state 110
    operator_rhs_array             shift and go to state 103
    operator_binary_assignment     shift and go to state 92

state 148

    (31) stmt_c_elif -> ELIF expression COLON . ks
    (1) ks -> . element ks
    (2) ks -> . epsilon
    (3) element -> . function_definition
    (4) element -> . statement_compound
    (5) element -> . statement_simple
    (6) epsilon -> .
    (7) function_definition -> . FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (14) statement_compound -> . stmt_c_for
    (15) statement_compound -> . stmt_c_while
    (16) statement_compound -> . stmt_c_if_group ENDIF
    (32) statement_simple -> . stmt_s_control_flow
    (33) statement_simple -> . stmt_s_import
    (34) statement_simple -> . stmt_s_expression
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (25) stmt_c_for -> . FOR IDENTIFIER IN expression COLON ks ENDFOR
    (26) stmt_c_while -> . WHILE expression COLON ks ENDWHILE
    (17) stmt_c_if_group -> . stmt_c_if_F
    (18) stmt_c_if_group -> . stmt_c_if_FO
    (19) stmt_c_if_group -> . stmt_c_if_FE
    (20) stmt_c_if_group -> . stmt_c_if_FEO
    (35) stmt_s_control_flow -> . stmt_s_continue
    (36) stmt_s_control_flow -> . stmt_s_break
    (37) stmt_s_control_flow -> . stmt_s_pass
    (38) stmt_s_control_flow -> . stmt_s_return
    (44) stmt_s_import -> . IMPORT dotted_identifier
    (48) stmt_s_expression -> . expression
    (21) stmt_c_if_F -> . stmt_c_if
    (22) stmt_c_if_FO -> . stmt_c_if stmt_c_otherwise
    (23) stmt_c_if_FE -> . stmt_c_if stmt_c_elif_block
    (24) stmt_c_if_FEO -> . stmt_c_if stmt_c_elif_block stmt_c_otherwise
    (39) stmt_s_continue -> . CONTINUE
    (40) stmt_s_break -> . BREAK
    (41) stmt_s_pass -> . PASS
    (42) stmt_s_return -> . RETURN expression
    (43) stmt_s_return -> . RETURN
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (27) stmt_c_if -> . IF expression COLON ks
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    ELIF            reduce using rule 6 (epsilon -> .)
    OTHERWISE       reduce using rule 6 (epsilon -> .)
    ENDIF           reduce using rule 6 (epsilon -> .)
    FUNCTION        shift and go to state 20
    FOR             shift and go to state 22
    WHILE           shift and go to state 7
    IMPORT          shift and go to state 18
    CONTINUE        shift and go to state 47
    BREAK           shift and go to state 13
    PASS            shift and go to state 9
    RETURN          shift and go to state 2
    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    IF              shift and go to state 35
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    stmt_c_for                     shift and go to state 1
    stmt_c_while                   shift and go to state 4
    stmt_s_return                  shift and go to state 5
    stmt_c_if_group                shift and go to state 6
    operator_unary_lhs_assignment  shift and go to state 8
    stmt_s_control_flow            shift and go to state 12
    operator_unary_lhs_computation shift and go to state 43
    stmt_s_import                  shift and go to state 14
    literal                        shift and go to state 16
    function_anonymous             shift and go to state 17
    stmt_s_continue                shift and go to state 24
    epsilon                        shift and go to state 23
    stmt_s_pass                    shift and go to state 21
    stmt_c_if_FEO                  shift and go to state 25
    operator_unary_lhs             shift and go to state 26
    array_literal                  shift and go to state 27
    stmt_c_if                      shift and go to state 28
    function_call                  shift and go to state 29
    stmt_c_if_FE                   shift and go to state 30
    statement_compound             shift and go to state 32
    stmt_c_if_FO                   shift and go to state 33
    stmt_s_expression              shift and go to state 36
    function_definition            shift and go to state 37
    statement_simple               shift and go to state 38
    expression                     shift and go to state 50
    object_literal                 shift and go to state 42
    element                        shift and go to state 44
    ks                             shift and go to state 162
    stmt_s_break                   shift and go to state 40
    stmt_c_if_F                    shift and go to state 51

state 149

    (28) stmt_c_otherwise -> OTHERWISE COLON ks .

    ENDIF           reduce using rule 28 (stmt_c_otherwise -> OTHERWISE COLON ks .)



state 150

    (27) stmt_c_if -> IF expression COLON ks .

    OTHERWISE       reduce using rule 27 (stmt_c_if -> IF expression COLON ks .)
    ELIF            reduce using rule 27 (stmt_c_if -> IF expression COLON ks .)
    ENDIF           reduce using rule 27 (stmt_c_if -> IF expression COLON ks .)



state 151

    (76) pair_list -> key_value_pair COMMA pair_list .

    RIGHT_CURLY_BRACE reduce using rule 76 (pair_list -> key_value_pair COMMA pair_list .)



state 152

    (77) key_value_pair -> IDENTIFIER COLON expression .
    (54) expression -> expression . operator_rhs_array
    (55) expression -> expression . operator_binary expression
    (82) operator_rhs_array -> . LEFT_BOX array_operator_insides RIGHT_BOX
    (86) operator_binary -> . operator_binary_assignment
    (87) operator_binary -> . operator_binary_computation
    (88) operator_binary -> . operator_binary_comparison
    (89) operator_binary_assignment -> . ASSIGN_EQUALS
    (90) operator_binary_assignment -> . DOT_EQUALS
    (91) operator_binary_assignment -> . PLUS_EQUALS
    (92) operator_binary_assignment -> . MINUS_EQUALS
    (93) operator_binary_assignment -> . TIMES_EQUALS
    (94) operator_binary_assignment -> . DIVIDE_EQUALS
    (95) operator_binary_assignment -> . MODULUS_EQUALS
    (96) operator_binary_assignment -> . EXPONENT_EQUALS
    (97) operator_binary_assignment -> . AND_EQUALS
    (98) operator_binary_assignment -> . OR_EQUALS
    (99) operator_binary_computation -> . DOT
    (100) operator_binary_computation -> . PLUS
    (101) operator_binary_computation -> . MINUS
    (102) operator_binary_computation -> . TIMES
    (103) operator_binary_computation -> . DIVIDE
    (104) operator_binary_computation -> . MODULUS
    (105) operator_binary_computation -> . EXPONENT
    (106) operator_binary_computation -> . AND
    (107) operator_binary_computation -> . OR
    (108) operator_binary_comparison -> . IN
    (109) operator_binary_comparison -> . HAS
    (110) operator_binary_comparison -> . EQUIVALENCE_EQUAL
    (111) operator_binary_comparison -> . COMPARE_GT
    (112) operator_binary_comparison -> . COMPARE_GTET
    (113) operator_binary_comparison -> . COMPARE_LT
    (114) operator_binary_comparison -> . COMPARE_LTET

    COMMA           reduce using rule 77 (key_value_pair -> IDENTIFIER COLON expression .)
    RIGHT_CURLY_BRACE reduce using rule 77 (key_value_pair -> IDENTIFIER COLON expression .)
    LEFT_BOX        shift and go to state 100
    ASSIGN_EQUALS   shift and go to state 106
    DOT_EQUALS      shift and go to state 80
    PLUS_EQUALS     shift and go to state 105
    MINUS_EQUALS    shift and go to state 87
    TIMES_EQUALS    shift and go to state 96
    DIVIDE_EQUALS   shift and go to state 108
    MODULUS_EQUALS  shift and go to state 94
    EXPONENT_EQUALS shift and go to state 109
    AND_EQUALS      shift and go to state 98
    OR_EQUALS       shift and go to state 99
    DOT             shift and go to state 86
    PLUS            shift and go to state 91
    MINUS           shift and go to state 85
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95
    MODULUS         shift and go to state 90
    EXPONENT        shift and go to state 89
    AND             shift and go to state 93
    OR              shift and go to state 111
    IN              shift and go to state 101
    HAS             shift and go to state 88
    EQUIVALENCE_EQUAL shift and go to state 81
    COMPARE_GT      shift and go to state 84
    COMPARE_GTET    shift and go to state 104
    COMPARE_LT      shift and go to state 97
    COMPARE_LTET    shift and go to state 83


    operator_binary                shift and go to state 107
    operator_binary_computation    shift and go to state 82
    operator_binary_comparison     shift and go to state 110
    operator_rhs_array             shift and go to state 103
    operator_binary_assignment     shift and go to state 92

state 153

    (82) operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .

    COMMA           reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    LEFT_BOX        reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    ASSIGN_EQUALS   reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    DOT_EQUALS      reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    PLUS_EQUALS     reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    MINUS_EQUALS    reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    TIMES_EQUALS    reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    DIVIDE_EQUALS   reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    MODULUS_EQUALS  reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    EXPONENT_EQUALS reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    AND_EQUALS      reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    OR_EQUALS       reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    DOT             reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    PLUS            reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    MINUS           reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    TIMES           reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    DIVIDE          reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    MODULUS         reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    EXPONENT        reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    AND             reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    OR              reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    IN              reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    HAS             reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    EQUIVALENCE_EQUAL reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    COMPARE_GT      reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    COMPARE_GTET    reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    COMPARE_LT      reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    COMPARE_LTET    reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    RIGHT_PAREN     reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    RIGHT_BOX       reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    FUNCTION        reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    FOR             reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    WHILE           reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    IMPORT          reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    CONTINUE        reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    BREAK           reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    PASS            reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    RETURN          reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    LEFT_PAREN      reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    IDENTIFIER      reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    THIS            reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    IF              reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    BLANK           reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    NULL            reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    TRUE            reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    FALSE           reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    STRING_LITERAL  reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    NUMERIC_LITERAL reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    LEFT_CURLY_BRACE reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    NOT_EQUALS      reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    NOT             reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    $end            reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    ENDWHILE        reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    ENDFUNCTION     reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    ENDIF           reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    OTHERWISE       reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    ELIF            reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    ENDFOR          reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    COLON           reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)
    RIGHT_CURLY_BRACE reduce using rule 82 (operator_rhs_array -> LEFT_BOX array_operator_insides RIGHT_BOX .)



state 154

    (84) array_operator_insides -> expression COLON . expression
    (85) array_operator_insides -> expression COLON . expression COLON expression
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    FUNCTION        shift and go to state 53
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    operator_unary_lhs_computation shift and go to state 43
    expression                     shift and go to state 163
    array_literal                  shift and go to state 27
    function_call                  shift and go to state 29
    operator_unary_lhs             shift and go to state 26
    literal                        shift and go to state 16
    object_literal                 shift and go to state 42
    operator_unary_lhs_assignment  shift and go to state 8
    function_anonymous             shift and go to state 54

state 155

    (62) exp_list -> expression COMMA exp_list .

    RIGHT_BOX       reduce using rule 62 (exp_list -> expression COMMA exp_list .)
    RIGHT_PAREN     reduce using rule 62 (exp_list -> expression COMMA exp_list .)



state 156

    (72) array_literal -> LEFT_BOX expression FOR IDENTIFIER . IN expression RIGHT_BOX

    IN              shift and go to state 164



state 157

    (26) stmt_c_while -> WHILE expression COLON ks ENDWHILE .

    FUNCTION        reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    FOR             reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    WHILE           reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    IMPORT          reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    CONTINUE        reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    BREAK           reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    PASS            reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    RETURN          reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    LEFT_PAREN      reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    IDENTIFIER      reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    THIS            reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    IF              reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    BLANK           reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    NULL            reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    TRUE            reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    FALSE           reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    STRING_LITERAL  reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    NUMERIC_LITERAL reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    LEFT_BOX        reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    LEFT_CURLY_BRACE reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    NOT_EQUALS      reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    NOT             reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    OTHERWISE       reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    ELIF            reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    ENDIF           reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    $end            reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    ENDWHILE        reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    ENDFUNCTION     reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    ENDFOR          reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)



state 158

    (9) function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .

    FUNCTION        reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    FOR             reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    WHILE           reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    IMPORT          reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    CONTINUE        reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    BREAK           reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    PASS            reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    RETURN          reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    LEFT_PAREN      reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    IDENTIFIER      reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    THIS            reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    IF              reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    BLANK           reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    NULL            reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    TRUE            reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    FALSE           reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    STRING_LITERAL  reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    NUMERIC_LITERAL reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    LEFT_BOX        reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    LEFT_CURLY_BRACE reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    NOT_EQUALS      reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    NOT             reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    $end            reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    ASSIGN_EQUALS   reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    DOT_EQUALS      reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    PLUS_EQUALS     reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    MINUS_EQUALS    reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    TIMES_EQUALS    reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    DIVIDE_EQUALS   reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    MODULUS_EQUALS  reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    EXPONENT_EQUALS reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    AND_EQUALS      reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    OR_EQUALS       reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    DOT             reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    PLUS            reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    MINUS           reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    TIMES           reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    DIVIDE          reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    MODULUS         reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    EXPONENT        reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    AND             reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    OR              reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    IN              reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    HAS             reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    EQUIVALENCE_EQUAL reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    COMPARE_GT      reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    COMPARE_GTET    reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    COMPARE_LT      reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    COMPARE_LTET    reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    ENDFUNCTION     reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    ENDFOR          reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    COLON           reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    RIGHT_BOX       reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    ENDWHILE        reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    ENDIF           reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    OTHERWISE       reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    ELIF            reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    RIGHT_PAREN     reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    COMMA           reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    RIGHT_CURLY_BRACE reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)



state 159

    (13) param_list -> IDENTIFIER COMMA param_list .

    RIGHT_PAREN     reduce using rule 13 (param_list -> IDENTIFIER COMMA param_list .)



state 160

    (7) function_definition -> FUNCTION IDENTIFIER parameters COLON ks . ENDFUNCTION

    ENDFUNCTION     shift and go to state 165



state 161

    (25) stmt_c_for -> FOR IDENTIFIER IN expression COLON . ks ENDFOR
    (1) ks -> . element ks
    (2) ks -> . epsilon
    (3) element -> . function_definition
    (4) element -> . statement_compound
    (5) element -> . statement_simple
    (6) epsilon -> .
    (7) function_definition -> . FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (14) statement_compound -> . stmt_c_for
    (15) statement_compound -> . stmt_c_while
    (16) statement_compound -> . stmt_c_if_group ENDIF
    (32) statement_simple -> . stmt_s_control_flow
    (33) statement_simple -> . stmt_s_import
    (34) statement_simple -> . stmt_s_expression
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (25) stmt_c_for -> . FOR IDENTIFIER IN expression COLON ks ENDFOR
    (26) stmt_c_while -> . WHILE expression COLON ks ENDWHILE
    (17) stmt_c_if_group -> . stmt_c_if_F
    (18) stmt_c_if_group -> . stmt_c_if_FO
    (19) stmt_c_if_group -> . stmt_c_if_FE
    (20) stmt_c_if_group -> . stmt_c_if_FEO
    (35) stmt_s_control_flow -> . stmt_s_continue
    (36) stmt_s_control_flow -> . stmt_s_break
    (37) stmt_s_control_flow -> . stmt_s_pass
    (38) stmt_s_control_flow -> . stmt_s_return
    (44) stmt_s_import -> . IMPORT dotted_identifier
    (48) stmt_s_expression -> . expression
    (21) stmt_c_if_F -> . stmt_c_if
    (22) stmt_c_if_FO -> . stmt_c_if stmt_c_otherwise
    (23) stmt_c_if_FE -> . stmt_c_if stmt_c_elif_block
    (24) stmt_c_if_FEO -> . stmt_c_if stmt_c_elif_block stmt_c_otherwise
    (39) stmt_s_continue -> . CONTINUE
    (40) stmt_s_break -> . BREAK
    (41) stmt_s_pass -> . PASS
    (42) stmt_s_return -> . RETURN expression
    (43) stmt_s_return -> . RETURN
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (27) stmt_c_if -> . IF expression COLON ks
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    ENDFOR          reduce using rule 6 (epsilon -> .)
    FUNCTION        shift and go to state 20
    FOR             shift and go to state 22
    WHILE           shift and go to state 7
    IMPORT          shift and go to state 18
    CONTINUE        shift and go to state 47
    BREAK           shift and go to state 13
    PASS            shift and go to state 9
    RETURN          shift and go to state 2
    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    IF              shift and go to state 35
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    stmt_c_for                     shift and go to state 1
    stmt_c_while                   shift and go to state 4
    stmt_s_return                  shift and go to state 5
    stmt_c_if_group                shift and go to state 6
    operator_unary_lhs_assignment  shift and go to state 8
    stmt_s_control_flow            shift and go to state 12
    operator_unary_lhs_computation shift and go to state 43
    stmt_s_import                  shift and go to state 14
    literal                        shift and go to state 16
    function_anonymous             shift and go to state 17
    stmt_s_continue                shift and go to state 24
    epsilon                        shift and go to state 23
    stmt_s_pass                    shift and go to state 21
    stmt_c_if_FEO                  shift and go to state 25
    operator_unary_lhs             shift and go to state 26
    array_literal                  shift and go to state 27
    stmt_c_if                      shift and go to state 28
    function_call                  shift and go to state 29
    stmt_c_if_FE                   shift and go to state 30
    statement_compound             shift and go to state 32
    stmt_c_if_FO                   shift and go to state 33
    stmt_s_expression              shift and go to state 36
    function_definition            shift and go to state 37
    statement_simple               shift and go to state 38
    expression                     shift and go to state 50
    object_literal                 shift and go to state 42
    element                        shift and go to state 44
    ks                             shift and go to state 166
    stmt_s_break                   shift and go to state 40
    stmt_c_if_F                    shift and go to state 51

state 162

    (31) stmt_c_elif -> ELIF expression COLON ks .

    ELIF            reduce using rule 31 (stmt_c_elif -> ELIF expression COLON ks .)
    OTHERWISE       reduce using rule 31 (stmt_c_elif -> ELIF expression COLON ks .)
    ENDIF           reduce using rule 31 (stmt_c_elif -> ELIF expression COLON ks .)



state 163

    (84) array_operator_insides -> expression COLON expression .
    (85) array_operator_insides -> expression COLON expression . COLON expression
    (54) expression -> expression . operator_rhs_array
    (55) expression -> expression . operator_binary expression
    (82) operator_rhs_array -> . LEFT_BOX array_operator_insides RIGHT_BOX
    (86) operator_binary -> . operator_binary_assignment
    (87) operator_binary -> . operator_binary_computation
    (88) operator_binary -> . operator_binary_comparison
    (89) operator_binary_assignment -> . ASSIGN_EQUALS
    (90) operator_binary_assignment -> . DOT_EQUALS
    (91) operator_binary_assignment -> . PLUS_EQUALS
    (92) operator_binary_assignment -> . MINUS_EQUALS
    (93) operator_binary_assignment -> . TIMES_EQUALS
    (94) operator_binary_assignment -> . DIVIDE_EQUALS
    (95) operator_binary_assignment -> . MODULUS_EQUALS
    (96) operator_binary_assignment -> . EXPONENT_EQUALS
    (97) operator_binary_assignment -> . AND_EQUALS
    (98) operator_binary_assignment -> . OR_EQUALS
    (99) operator_binary_computation -> . DOT
    (100) operator_binary_computation -> . PLUS
    (101) operator_binary_computation -> . MINUS
    (102) operator_binary_computation -> . TIMES
    (103) operator_binary_computation -> . DIVIDE
    (104) operator_binary_computation -> . MODULUS
    (105) operator_binary_computation -> . EXPONENT
    (106) operator_binary_computation -> . AND
    (107) operator_binary_computation -> . OR
    (108) operator_binary_comparison -> . IN
    (109) operator_binary_comparison -> . HAS
    (110) operator_binary_comparison -> . EQUIVALENCE_EQUAL
    (111) operator_binary_comparison -> . COMPARE_GT
    (112) operator_binary_comparison -> . COMPARE_GTET
    (113) operator_binary_comparison -> . COMPARE_LT
    (114) operator_binary_comparison -> . COMPARE_LTET

    RIGHT_BOX       reduce using rule 84 (array_operator_insides -> expression COLON expression .)
    COLON           shift and go to state 167
    LEFT_BOX        shift and go to state 100
    ASSIGN_EQUALS   shift and go to state 106
    DOT_EQUALS      shift and go to state 80
    PLUS_EQUALS     shift and go to state 105
    MINUS_EQUALS    shift and go to state 87
    TIMES_EQUALS    shift and go to state 96
    DIVIDE_EQUALS   shift and go to state 108
    MODULUS_EQUALS  shift and go to state 94
    EXPONENT_EQUALS shift and go to state 109
    AND_EQUALS      shift and go to state 98
    OR_EQUALS       shift and go to state 99
    DOT             shift and go to state 86
    PLUS            shift and go to state 91
    MINUS           shift and go to state 85
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95
    MODULUS         shift and go to state 90
    EXPONENT        shift and go to state 89
    AND             shift and go to state 93
    OR              shift and go to state 111
    IN              shift and go to state 101
    HAS             shift and go to state 88
    EQUIVALENCE_EQUAL shift and go to state 81
    COMPARE_GT      shift and go to state 84
    COMPARE_GTET    shift and go to state 104
    COMPARE_LT      shift and go to state 97
    COMPARE_LTET    shift and go to state 83


    operator_binary                shift and go to state 107
    operator_binary_computation    shift and go to state 82
    operator_binary_comparison     shift and go to state 110
    operator_rhs_array             shift and go to state 103
    operator_binary_assignment     shift and go to state 92

state 164

    (72) array_literal -> LEFT_BOX expression FOR IDENTIFIER IN . expression RIGHT_BOX
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    FUNCTION        shift and go to state 53
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    operator_unary_lhs_computation shift and go to state 43
    expression                     shift and go to state 168
    array_literal                  shift and go to state 27
    function_call                  shift and go to state 29
    operator_unary_lhs             shift and go to state 26
    literal                        shift and go to state 16
    object_literal                 shift and go to state 42
    operator_unary_lhs_assignment  shift and go to state 8
    function_anonymous             shift and go to state 54

state 165

    (7) function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .

    FUNCTION        reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    FOR             reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    WHILE           reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    IMPORT          reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    CONTINUE        reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    BREAK           reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    PASS            reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    RETURN          reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    LEFT_PAREN      reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    IDENTIFIER      reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    THIS            reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    IF              reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    BLANK           reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    NULL            reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    TRUE            reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    FALSE           reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    STRING_LITERAL  reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    NUMERIC_LITERAL reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    LEFT_BOX        reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    LEFT_CURLY_BRACE reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    NOT_EQUALS      reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    NOT             reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    ENDFOR          reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    OTHERWISE       reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    ELIF            reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    ENDIF           reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    $end            reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    ENDWHILE        reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)
    ENDFUNCTION     reduce using rule 7 (function_definition -> FUNCTION IDENTIFIER parameters COLON ks ENDFUNCTION .)



state 166

    (25) stmt_c_for -> FOR IDENTIFIER IN expression COLON ks . ENDFOR

    ENDFOR          shift and go to state 169



state 167

    (85) array_operator_insides -> expression COLON expression COLON . expression
    (49) expression -> . literal
    (50) expression -> . function_anonymous
    (51) expression -> . function_call
    (52) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (53) expression -> . operator_unary_lhs expression
    (54) expression -> . expression operator_rhs_array
    (55) expression -> . expression operator_binary expression
    (56) expression -> . IDENTIFIER
    (57) expression -> . THIS
    (63) literal -> . array_literal
    (64) literal -> . object_literal
    (65) literal -> . BLANK
    (66) literal -> . NULL
    (67) literal -> . TRUE
    (68) literal -> . FALSE
    (69) literal -> . STRING_LITERAL
    (70) literal -> . NUMERIC_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (58) function_call -> . IDENTIFIER arguments
    (78) operator_unary_lhs -> . operator_unary_lhs_assignment
    (79) operator_unary_lhs -> . operator_unary_lhs_computation
    (71) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (72) array_literal -> . LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX
    (73) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (80) operator_unary_lhs_assignment -> . NOT_EQUALS
    (81) operator_unary_lhs_computation -> . NOT

    LEFT_PAREN      shift and go to state 15
    IDENTIFIER      shift and go to state 19
    THIS            shift and go to state 46
    BLANK           shift and go to state 3
    NULL            shift and go to state 10
    TRUE            shift and go to state 11
    FALSE           shift and go to state 31
    STRING_LITERAL  shift and go to state 39
    NUMERIC_LITERAL shift and go to state 34
    FUNCTION        shift and go to state 53
    LEFT_BOX        shift and go to state 52
    LEFT_CURLY_BRACE shift and go to state 48
    NOT_EQUALS      shift and go to state 41
    NOT             shift and go to state 49


    operator_unary_lhs_computation shift and go to state 43
    expression                     shift and go to state 170
    array_literal                  shift and go to state 27
    function_call                  shift and go to state 29
    operator_unary_lhs             shift and go to state 26
    literal                        shift and go to state 16
    object_literal                 shift and go to state 42
    operator_unary_lhs_assignment  shift and go to state 8
    function_anonymous             shift and go to state 54

state 168

    (72) array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression . RIGHT_BOX
    (54) expression -> expression . operator_rhs_array
    (55) expression -> expression . operator_binary expression
    (82) operator_rhs_array -> . LEFT_BOX array_operator_insides RIGHT_BOX
    (86) operator_binary -> . operator_binary_assignment
    (87) operator_binary -> . operator_binary_computation
    (88) operator_binary -> . operator_binary_comparison
    (89) operator_binary_assignment -> . ASSIGN_EQUALS
    (90) operator_binary_assignment -> . DOT_EQUALS
    (91) operator_binary_assignment -> . PLUS_EQUALS
    (92) operator_binary_assignment -> . MINUS_EQUALS
    (93) operator_binary_assignment -> . TIMES_EQUALS
    (94) operator_binary_assignment -> . DIVIDE_EQUALS
    (95) operator_binary_assignment -> . MODULUS_EQUALS
    (96) operator_binary_assignment -> . EXPONENT_EQUALS
    (97) operator_binary_assignment -> . AND_EQUALS
    (98) operator_binary_assignment -> . OR_EQUALS
    (99) operator_binary_computation -> . DOT
    (100) operator_binary_computation -> . PLUS
    (101) operator_binary_computation -> . MINUS
    (102) operator_binary_computation -> . TIMES
    (103) operator_binary_computation -> . DIVIDE
    (104) operator_binary_computation -> . MODULUS
    (105) operator_binary_computation -> . EXPONENT
    (106) operator_binary_computation -> . AND
    (107) operator_binary_computation -> . OR
    (108) operator_binary_comparison -> . IN
    (109) operator_binary_comparison -> . HAS
    (110) operator_binary_comparison -> . EQUIVALENCE_EQUAL
    (111) operator_binary_comparison -> . COMPARE_GT
    (112) operator_binary_comparison -> . COMPARE_GTET
    (113) operator_binary_comparison -> . COMPARE_LT
    (114) operator_binary_comparison -> . COMPARE_LTET

    RIGHT_BOX       shift and go to state 171
    LEFT_BOX        shift and go to state 100
    ASSIGN_EQUALS   shift and go to state 106
    DOT_EQUALS      shift and go to state 80
    PLUS_EQUALS     shift and go to state 105
    MINUS_EQUALS    shift and go to state 87
    TIMES_EQUALS    shift and go to state 96
    DIVIDE_EQUALS   shift and go to state 108
    MODULUS_EQUALS  shift and go to state 94
    EXPONENT_EQUALS shift and go to state 109
    AND_EQUALS      shift and go to state 98
    OR_EQUALS       shift and go to state 99
    DOT             shift and go to state 86
    PLUS            shift and go to state 91
    MINUS           shift and go to state 85
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95
    MODULUS         shift and go to state 90
    EXPONENT        shift and go to state 89
    AND             shift and go to state 93
    OR              shift and go to state 111
    IN              shift and go to state 101
    HAS             shift and go to state 88
    EQUIVALENCE_EQUAL shift and go to state 81
    COMPARE_GT      shift and go to state 84
    COMPARE_GTET    shift and go to state 104
    COMPARE_LT      shift and go to state 97
    COMPARE_LTET    shift and go to state 83


    operator_binary                shift and go to state 107
    operator_binary_computation    shift and go to state 82
    operator_binary_comparison     shift and go to state 110
    operator_rhs_array             shift and go to state 103
    operator_binary_assignment     shift and go to state 92

state 169

    (25) stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .

    FUNCTION        reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    FOR             reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    WHILE           reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    IMPORT          reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    CONTINUE        reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    BREAK           reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    PASS            reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    RETURN          reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    LEFT_PAREN      reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    IDENTIFIER      reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    THIS            reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    IF              reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    BLANK           reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    NULL            reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    TRUE            reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    FALSE           reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    STRING_LITERAL  reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    NUMERIC_LITERAL reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    LEFT_BOX        reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    LEFT_CURLY_BRACE reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    NOT_EQUALS      reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    NOT             reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    ELIF            reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    OTHERWISE       reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    ENDIF           reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    ENDFUNCTION     reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    ENDFOR          reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    $end            reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)
    ENDWHILE        reduce using rule 25 (stmt_c_for -> FOR IDENTIFIER IN expression COLON ks ENDFOR .)



state 170

    (85) array_operator_insides -> expression COLON expression COLON expression .
    (54) expression -> expression . operator_rhs_array
    (55) expression -> expression . operator_binary expression
    (82) operator_rhs_array -> . LEFT_BOX array_operator_insides RIGHT_BOX
    (86) operator_binary -> . operator_binary_assignment
    (87) operator_binary -> . operator_binary_computation
    (88) operator_binary -> . operator_binary_comparison
    (89) operator_binary_assignment -> . ASSIGN_EQUALS
    (90) operator_binary_assignment -> . DOT_EQUALS
    (91) operator_binary_assignment -> . PLUS_EQUALS
    (92) operator_binary_assignment -> . MINUS_EQUALS
    (93) operator_binary_assignment -> . TIMES_EQUALS
    (94) operator_binary_assignment -> . DIVIDE_EQUALS
    (95) operator_binary_assignment -> . MODULUS_EQUALS
    (96) operator_binary_assignment -> . EXPONENT_EQUALS
    (97) operator_binary_assignment -> . AND_EQUALS
    (98) operator_binary_assignment -> . OR_EQUALS
    (99) operator_binary_computation -> . DOT
    (100) operator_binary_computation -> . PLUS
    (101) operator_binary_computation -> . MINUS
    (102) operator_binary_computation -> . TIMES
    (103) operator_binary_computation -> . DIVIDE
    (104) operator_binary_computation -> . MODULUS
    (105) operator_binary_computation -> . EXPONENT
    (106) operator_binary_computation -> . AND
    (107) operator_binary_computation -> . OR
    (108) operator_binary_comparison -> . IN
    (109) operator_binary_comparison -> . HAS
    (110) operator_binary_comparison -> . EQUIVALENCE_EQUAL
    (111) operator_binary_comparison -> . COMPARE_GT
    (112) operator_binary_comparison -> . COMPARE_GTET
    (113) operator_binary_comparison -> . COMPARE_LT
    (114) operator_binary_comparison -> . COMPARE_LTET

    RIGHT_BOX       reduce using rule 85 (array_operator_insides -> expression COLON expression COLON expression .)
    LEFT_BOX        shift and go to state 100
    ASSIGN_EQUALS   shift and go to state 106
    DOT_EQUALS      shift and go to state 80
    PLUS_EQUALS     shift and go to state 105
    MINUS_EQUALS    shift and go to state 87
    TIMES_EQUALS    shift and go to state 96
    DIVIDE_EQUALS   shift and go to state 108
    MODULUS_EQUALS  shift and go to state 94
    EXPONENT_EQUALS shift and go to state 109
    AND_EQUALS      shift and go to state 98
    OR_EQUALS       shift and go to state 99
    DOT             shift and go to state 86
    PLUS            shift and go to state 91
    MINUS           shift and go to state 85
    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 95
    MODULUS         shift and go to state 90
    EXPONENT        shift and go to state 89
    AND             shift and go to state 93
    OR              shift and go to state 111
    IN              shift and go to state 101
    HAS             shift and go to state 88
    EQUIVALENCE_EQUAL shift and go to state 81
    COMPARE_GT      shift and go to state 84
    COMPARE_GTET    shift and go to state 104
    COMPARE_LT      shift and go to state 97
    COMPARE_LTET    shift and go to state 83


    operator_binary                shift and go to state 107
    operator_binary_computation    shift and go to state 82
    operator_binary_comparison     shift and go to state 110
    operator_rhs_array             shift and go to state 103
    operator_binary_assignment     shift and go to state 92

state 171

    (72) array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .

    LEFT_BOX        reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    ASSIGN_EQUALS   reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    DOT_EQUALS      reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    PLUS_EQUALS     reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    MINUS_EQUALS    reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    TIMES_EQUALS    reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    DIVIDE_EQUALS   reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    MODULUS_EQUALS  reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    EXPONENT_EQUALS reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    AND_EQUALS      reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    OR_EQUALS       reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    DOT             reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    PLUS            reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    MINUS           reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    TIMES           reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    DIVIDE          reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    MODULUS         reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    EXPONENT        reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    AND             reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    OR              reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    IN              reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    HAS             reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    EQUIVALENCE_EQUAL reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    COMPARE_GT      reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    COMPARE_GTET    reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    COMPARE_LT      reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    COMPARE_LTET    reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    FUNCTION        reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    FOR             reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    WHILE           reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    IMPORT          reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    CONTINUE        reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    BREAK           reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    PASS            reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    RETURN          reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    LEFT_PAREN      reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    IDENTIFIER      reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    THIS            reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    IF              reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    BLANK           reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    NULL            reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    TRUE            reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    FALSE           reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    STRING_LITERAL  reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    NUMERIC_LITERAL reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    LEFT_CURLY_BRACE reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    NOT_EQUALS      reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    NOT             reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    $end            reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    ENDWHILE        reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    ENDFUNCTION     reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    ENDIF           reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    OTHERWISE       reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    ELIF            reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    ENDFOR          reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    COLON           reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    RIGHT_PAREN     reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    COMMA           reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    RIGHT_BOX       reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)
    RIGHT_CURLY_BRACE reduce using rule 72 (array_literal -> LEFT_BOX expression FOR IDENTIFIER IN expression RIGHT_BOX .)


