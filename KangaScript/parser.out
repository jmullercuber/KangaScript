shift/reduce conflict in state 12 resolved as shift.
shift/reduce conflict in state 12 resolved as shift.
shift/reduce conflict in state 12 resolved as shift.
shift/reduce conflict in state 12 resolved as shift.
shift/reduce conflict in state 12 resolved as shift.
shift/reduce conflict in state 12 resolved as shift.
shift/reduce conflict in state 12 resolved as shift.
shift/reduce conflict in state 12 resolved as shift.
shift/reduce conflict in state 12 resolved as shift.
shift/reduce conflict in state 12 resolved as shift.
shift/reduce conflict in state 12 resolved as shift.
shift/reduce conflict in state 12 resolved as shift.
shift/reduce conflict in state 12 resolved as shift.
shift/reduce conflict in state 12 resolved as shift.
shift/reduce conflict in state 12 resolved as shift.
shift/reduce conflict in state 21 resolved as shift.
shift/reduce conflict in state 21 resolved as shift.
shift/reduce conflict in state 21 resolved as shift.
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
reduce/reduce conflict in state 47 resolved using rule 3 (element -> function_definition .).
shift/reduce conflict in state 55 resolved as shift.
shift/reduce conflict in state 60 resolved as shift.
shift/reduce conflict in state 60 resolved as shift.
shift/reduce conflict in state 60 resolved as shift.


Unused terminals:

   RIGHT_ARROW

Grammar

Rule 1     ks -> element ks
Rule 2     ks -> epsilon
Rule 3     element -> function_definition
Rule 4     element -> statement_compound
Rule 5     element -> statement_simple
Rule 6     epsilon -> <empty>
Rule 7     function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
Rule 8     function_definition -> function_anonymous
Rule 9     function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION
Rule 10    parameters -> LEFT_PAREN param_list RIGHT_PAREN
Rule 11    param_list -> epsilon
Rule 12    param_list -> expression_identifier
Rule 13    param_list -> expression_identifier COMMA param_list
Rule 14    statement_compound -> stmt_c_for
Rule 15    statement_compound -> stmt_c_while
Rule 16    statement_compound -> stmt_c_if_group ENDIF
Rule 17    stmt_c_if_group -> stmt_c_if_F
Rule 18    stmt_c_if_group -> stmt_c_if_FO
Rule 19    stmt_c_if_group -> stmt_c_if_FE
Rule 20    stmt_c_if_group -> stmt_c_if_FEO
Rule 21    stmt_c_if_F -> stmt_c_if
Rule 22    stmt_c_if_FO -> stmt_c_if stmt_c_otherwise
Rule 23    stmt_c_if_FE -> stmt_c_if stmt_c_elif_block
Rule 24    stmt_c_if_FEO -> stmt_c_if stmt_c_elif_block stmt_c_otherwise
Rule 25    stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR
Rule 26    stmt_c_while -> WHILE expression COLON ks ENDWHILE
Rule 27    stmt_c_if -> IF expression COLON ks
Rule 28    stmt_c_otherwise -> OTHERWISE COLON ks
Rule 29    stmt_c_elif_block -> stmt_c_elif
Rule 30    stmt_c_elif_block -> stmt_c_elif stmt_c_elif_block
Rule 31    stmt_c_elif -> ELIF expression COLON ks
Rule 32    statement_simple -> stmt_s_control_flow
Rule 33    statement_simple -> stmt_s_import
Rule 34    statement_simple -> stmt_s_expression
Rule 35    stmt_s_control_flow -> stmt_s_continue
Rule 36    stmt_s_control_flow -> stmt_s_break
Rule 37    stmt_s_control_flow -> stmt_s_pass
Rule 38    stmt_s_control_flow -> stmt_s_return
Rule 39    stmt_s_continue -> CONTINUE
Rule 40    stmt_s_break -> BREAK
Rule 41    stmt_s_pass -> PASS
Rule 42    stmt_s_return -> RETURN expression
Rule 43    stmt_s_return -> RETURN
Rule 44    stmt_s_import -> IMPORT dotted_identifier
Rule 45    dotted_identifier -> dotted_identifier_something
Rule 46    dotted_identifier -> dotted_identifier_everything
Rule 47    dotted_identifier_something -> expression_identifier
Rule 48    dotted_identifier_something -> expression_identifier DOT dotted_identifier_something
Rule 49    dotted_identifier_everything -> TIMES
Rule 50    dotted_identifier_everything -> dotted_identifier_something DOT TIMES
Rule 51    stmt_s_expression -> expression
Rule 52    expression -> literal
Rule 53    expression -> function_definition
Rule 54    expression -> LEFT_PAREN expression RIGHT_PAREN
Rule 55    expression -> NOT_EQUALS expression
Rule 56    expression -> NOT expression
Rule 57    expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX
Rule 58    expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX
Rule 59    expression -> expression ASSIGN_EQUALS expression
Rule 60    expression -> expression DOT_EQUALS expression
Rule 61    expression -> expression PLUS_EQUALS expression
Rule 62    expression -> expression MINUS_EQUALS expression
Rule 63    expression -> expression TIMES_EQUALS expression
Rule 64    expression -> expression DIVIDE_EQUALS expression
Rule 65    expression -> expression MODULUS_EQUALS expression
Rule 66    expression -> expression EXPONENT_EQUALS expression
Rule 67    expression -> expression AND_EQUALS expression
Rule 68    expression -> expression OR_EQUALS expression
Rule 69    expression -> expression DOT expression_identifier
Rule 70    expression -> expression PLUS expression
Rule 71    expression -> expression MINUS expression
Rule 72    expression -> expression TIMES expression
Rule 73    expression -> expression DIVIDE expression
Rule 74    expression -> expression MODULUS expression
Rule 75    expression -> expression EXPONENT expression
Rule 76    expression -> expression AND expression
Rule 77    expression -> expression OR expression
Rule 78    expression -> expression IN expression
Rule 79    expression -> expression HAS expression
Rule 80    expression -> expression EQUIVALENCE_EQUAL expression
Rule 81    expression -> expression COMPARE_GT expression
Rule 82    expression -> expression COMPARE_GTET expression
Rule 83    expression -> expression COMPARE_LT expression
Rule 84    expression -> expression COMPARE_LTET expression
Rule 85    expression -> expression_identifier
Rule 86    expression_identifier -> IDENTIFIER
Rule 87    expression -> THIS
Rule 88    expression -> expression LEFT_PAREN exp_list RIGHT_PAREN
Rule 89    exp_list -> epsilon
Rule 90    exp_list -> expression
Rule 91    exp_list -> expression COMMA exp_list
Rule 92    literal -> array_literal
Rule 93    literal -> object_literal
Rule 94    literal -> literal_string
Rule 95    literal -> BLANK
Rule 96    literal -> NULL
Rule 97    literal -> TRUE
Rule 98    literal -> FALSE
Rule 99    literal_string -> STRING_LITERAL
Rule 100   literal -> NUMERIC_LITERAL
Rule 101   literal -> MINUS NUMERIC_LITERAL
Rule 102   array_literal -> LEFT_BOX exp_list RIGHT_BOX
Rule 103   array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
Rule 104   object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
Rule 105   pair_list -> epsilon
Rule 106   pair_list -> key_value_pair
Rule 107   pair_list -> key_value_pair COMMA pair_list
Rule 108   key_value_pair -> literal_string COLON expression
Rule 109   array_operator_insides -> expression
Rule 110   array_operator_insides -> expression COLON expression
Rule 111   array_operator_insides -> expression COLON expression COLON expression
Rule 112   array_operator_missing -> expression COLON
Rule 113   array_operator_missing -> COLON expression
Rule 114   array_operator_missing -> COLON
Rule 115   array_operator_missing -> expression COLON COLON expression
Rule 116   array_operator_missing -> COLON expression COLON expression
Rule 117   array_operator_missing -> COLON COLON expression
Rule 118   array_operator_missing -> COLON COLON

Terminals, with rules where they appear

AND                  : 76
AND_EQUALS           : 67
ASSIGN_EQUALS        : 59
BLANK                : 95
BREAK                : 40
COLON                : 7 9 25 26 27 28 31 108 110 111 111 112 113 114 115 115 116 116 117 117 118 118
COMMA                : 13 91 107
COMPARE_GT           : 81
COMPARE_GTET         : 82
COMPARE_LT           : 83
COMPARE_LTET         : 84
CONTINUE             : 39
DIVIDE               : 73
DIVIDE_EQUALS        : 64
DOT                  : 48 50 69
DOT_EQUALS           : 60
ELIF                 : 31
ENDFOR               : 25
ENDFUNCTION          : 7 9
ENDIF                : 16
ENDWHILE             : 26
EQUIVALENCE_EQUAL    : 80
EXPONENT             : 75
EXPONENT_EQUALS      : 66
FALSE                : 98
FOR                  : 25 103
FUNCTION             : 7 9
HAS                  : 79
IDENTIFIER           : 86
IF                   : 27
IMPORT               : 44
IN                   : 25 78 103
LEFT_BOX             : 57 58 102 103
LEFT_CURLY_BRACE     : 104
LEFT_PAREN           : 10 54 88
MINUS                : 71 101
MINUS_EQUALS         : 62
MODULUS              : 74
MODULUS_EQUALS       : 65
NOT                  : 56
NOT_EQUALS           : 55
NULL                 : 96
NUMERIC_LITERAL      : 100 101
OR                   : 77
OR_EQUALS            : 68
OTHERWISE            : 28
PASS                 : 41
PLUS                 : 70
PLUS_EQUALS          : 61
RETURN               : 42 43
RIGHT_ARROW          : 
RIGHT_BOX            : 57 58 102 103
RIGHT_CURLY_BRACE    : 104
RIGHT_PAREN          : 10 54 88
STRING_LITERAL       : 99
THIS                 : 87
TIMES                : 49 50 72
TIMES_EQUALS         : 63
TRUE                 : 97
WHILE                : 26
error                : 

Nonterminals, with rules where they appear

array_literal        : 92
array_operator_insides : 57
array_operator_missing : 58
dotted_identifier    : 44
dotted_identifier_everything : 46
dotted_identifier_something : 45 48 50
element              : 1
epsilon              : 2 11 89 105
exp_list             : 88 91 102
expression           : 25 26 27 31 42 51 54 55 56 57 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 88 90 91 103 103 108 109 110 110 111 111 111 112 113 115 115 116 116 117
expression_identifier : 7 12 13 25 47 48 69 85 103
function_anonymous   : 8
function_definition  : 3 53
key_value_pair       : 106 107
ks                   : 1 7 9 25 26 27 28 31 0
literal              : 52
literal_string       : 94 108
object_literal       : 93
pair_list            : 104 107
param_list           : 10 13
parameters           : 7 9
statement_compound   : 4
statement_simple     : 5
stmt_c_elif          : 29 30
stmt_c_elif_block    : 23 24 30
stmt_c_for           : 14
stmt_c_if            : 21 22 23 24
stmt_c_if_F          : 17
stmt_c_if_FE         : 19
stmt_c_if_FEO        : 20
stmt_c_if_FO         : 18
stmt_c_if_group      : 16
stmt_c_otherwise     : 22 24
stmt_c_while         : 15
stmt_s_break         : 36
stmt_s_continue      : 35
stmt_s_control_flow  : 32
stmt_s_expression    : 34
stmt_s_import        : 33
stmt_s_pass          : 37
stmt_s_return        : 38


Parsing method: LALR


state 0

    (0) S' -> . ks
    (1) ks -> . element ks
    (2) ks -> . epsilon
    (3) element -> . function_definition
    (4) element -> . statement_compound
    (5) element -> . statement_simple
    (6) epsilon -> .
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (14) statement_compound -> . stmt_c_for
    (15) statement_compound -> . stmt_c_while
    (16) statement_compound -> . stmt_c_if_group ENDIF
    (32) statement_simple -> . stmt_s_control_flow
    (33) statement_simple -> . stmt_s_import
    (34) statement_simple -> . stmt_s_expression
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (25) stmt_c_for -> . FOR expression_identifier IN expression COLON ks ENDFOR
    (26) stmt_c_while -> . WHILE expression COLON ks ENDWHILE
    (17) stmt_c_if_group -> . stmt_c_if_F
    (18) stmt_c_if_group -> . stmt_c_if_FO
    (19) stmt_c_if_group -> . stmt_c_if_FE
    (20) stmt_c_if_group -> . stmt_c_if_FEO
    (35) stmt_s_control_flow -> . stmt_s_continue
    (36) stmt_s_control_flow -> . stmt_s_break
    (37) stmt_s_control_flow -> . stmt_s_pass
    (38) stmt_s_control_flow -> . stmt_s_return
    (44) stmt_s_import -> . IMPORT dotted_identifier
    (51) stmt_s_expression -> . expression
    (21) stmt_c_if_F -> . stmt_c_if
    (22) stmt_c_if_FO -> . stmt_c_if stmt_c_otherwise
    (23) stmt_c_if_FE -> . stmt_c_if stmt_c_elif_block
    (24) stmt_c_if_FEO -> . stmt_c_if stmt_c_elif_block stmt_c_otherwise
    (39) stmt_s_continue -> . CONTINUE
    (40) stmt_s_break -> . BREAK
    (41) stmt_s_pass -> . PASS
    (42) stmt_s_return -> . RETURN expression
    (43) stmt_s_return -> . RETURN
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (27) stmt_c_if -> . IF expression COLON ks
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL

    $end            reduce using rule 6 (epsilon -> .)
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 23
    IMPORT          shift and go to state 6
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 33
    PASS            shift and go to state 8
    RETURN          shift and go to state 12
    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    IF              shift and go to state 46
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    stmt_c_for                     shift and go to state 22
    stmt_c_while                   shift and go to state 2
    stmt_s_return                  shift and go to state 35
    stmt_c_if_group                shift and go to state 13
    stmt_s_control_flow            shift and go to state 37
    stmt_s_import                  shift and go to state 38
    literal                        shift and go to state 25
    function_anonymous             shift and go to state 26
    stmt_s_pass                    shift and go to state 40
    epsilon                        shift and go to state 28
    stmt_s_continue                shift and go to state 29
    stmt_c_if_FEO                  shift and go to state 7
    literal_string                 shift and go to state 30
    array_literal                  shift and go to state 41
    stmt_c_if                      shift and go to state 42
    stmt_c_if_FE                   shift and go to state 44
    statement_compound             shift and go to state 31
    stmt_c_if_FO                   shift and go to state 45
    stmt_s_expression              shift and go to state 9
    function_definition            shift and go to state 47
    statement_simple               shift and go to state 48
    expression                     shift and go to state 21
    object_literal                 shift and go to state 18
    element                        shift and go to state 50
    ks                             shift and go to state 51
    stmt_s_break                   shift and go to state 11
    stmt_c_if_F                    shift and go to state 34

state 1

    (85) expression -> expression_identifier .

    LEFT_BOX        reduce using rule 85 (expression -> expression_identifier .)
    ASSIGN_EQUALS   reduce using rule 85 (expression -> expression_identifier .)
    DOT_EQUALS      reduce using rule 85 (expression -> expression_identifier .)
    PLUS_EQUALS     reduce using rule 85 (expression -> expression_identifier .)
    MINUS_EQUALS    reduce using rule 85 (expression -> expression_identifier .)
    TIMES_EQUALS    reduce using rule 85 (expression -> expression_identifier .)
    DIVIDE_EQUALS   reduce using rule 85 (expression -> expression_identifier .)
    MODULUS_EQUALS  reduce using rule 85 (expression -> expression_identifier .)
    EXPONENT_EQUALS reduce using rule 85 (expression -> expression_identifier .)
    AND_EQUALS      reduce using rule 85 (expression -> expression_identifier .)
    OR_EQUALS       reduce using rule 85 (expression -> expression_identifier .)
    DOT             reduce using rule 85 (expression -> expression_identifier .)
    PLUS            reduce using rule 85 (expression -> expression_identifier .)
    MINUS           reduce using rule 85 (expression -> expression_identifier .)
    TIMES           reduce using rule 85 (expression -> expression_identifier .)
    DIVIDE          reduce using rule 85 (expression -> expression_identifier .)
    MODULUS         reduce using rule 85 (expression -> expression_identifier .)
    EXPONENT        reduce using rule 85 (expression -> expression_identifier .)
    AND             reduce using rule 85 (expression -> expression_identifier .)
    OR              reduce using rule 85 (expression -> expression_identifier .)
    IN              reduce using rule 85 (expression -> expression_identifier .)
    HAS             reduce using rule 85 (expression -> expression_identifier .)
    EQUIVALENCE_EQUAL reduce using rule 85 (expression -> expression_identifier .)
    COMPARE_GT      reduce using rule 85 (expression -> expression_identifier .)
    COMPARE_GTET    reduce using rule 85 (expression -> expression_identifier .)
    COMPARE_LT      reduce using rule 85 (expression -> expression_identifier .)
    COMPARE_LTET    reduce using rule 85 (expression -> expression_identifier .)
    LEFT_PAREN      reduce using rule 85 (expression -> expression_identifier .)
    FUNCTION        reduce using rule 85 (expression -> expression_identifier .)
    FOR             reduce using rule 85 (expression -> expression_identifier .)
    WHILE           reduce using rule 85 (expression -> expression_identifier .)
    IMPORT          reduce using rule 85 (expression -> expression_identifier .)
    CONTINUE        reduce using rule 85 (expression -> expression_identifier .)
    BREAK           reduce using rule 85 (expression -> expression_identifier .)
    PASS            reduce using rule 85 (expression -> expression_identifier .)
    RETURN          reduce using rule 85 (expression -> expression_identifier .)
    NOT_EQUALS      reduce using rule 85 (expression -> expression_identifier .)
    NOT             reduce using rule 85 (expression -> expression_identifier .)
    THIS            reduce using rule 85 (expression -> expression_identifier .)
    IF              reduce using rule 85 (expression -> expression_identifier .)
    BLANK           reduce using rule 85 (expression -> expression_identifier .)
    NULL            reduce using rule 85 (expression -> expression_identifier .)
    TRUE            reduce using rule 85 (expression -> expression_identifier .)
    FALSE           reduce using rule 85 (expression -> expression_identifier .)
    NUMERIC_LITERAL reduce using rule 85 (expression -> expression_identifier .)
    IDENTIFIER      reduce using rule 85 (expression -> expression_identifier .)
    LEFT_CURLY_BRACE reduce using rule 85 (expression -> expression_identifier .)
    STRING_LITERAL  reduce using rule 85 (expression -> expression_identifier .)
    ENDWHILE        reduce using rule 85 (expression -> expression_identifier .)
    $end            reduce using rule 85 (expression -> expression_identifier .)
    ENDFUNCTION     reduce using rule 85 (expression -> expression_identifier .)
    ENDIF           reduce using rule 85 (expression -> expression_identifier .)
    OTHERWISE       reduce using rule 85 (expression -> expression_identifier .)
    ELIF            reduce using rule 85 (expression -> expression_identifier .)
    ENDFOR          reduce using rule 85 (expression -> expression_identifier .)
    COLON           reduce using rule 85 (expression -> expression_identifier .)
    RIGHT_PAREN     reduce using rule 85 (expression -> expression_identifier .)
    COMMA           reduce using rule 85 (expression -> expression_identifier .)
    RIGHT_BOX       reduce using rule 85 (expression -> expression_identifier .)
    RIGHT_CURLY_BRACE reduce using rule 85 (expression -> expression_identifier .)



state 2

    (15) statement_compound -> stmt_c_while .

    FUNCTION        reduce using rule 15 (statement_compound -> stmt_c_while .)
    FOR             reduce using rule 15 (statement_compound -> stmt_c_while .)
    WHILE           reduce using rule 15 (statement_compound -> stmt_c_while .)
    IMPORT          reduce using rule 15 (statement_compound -> stmt_c_while .)
    CONTINUE        reduce using rule 15 (statement_compound -> stmt_c_while .)
    BREAK           reduce using rule 15 (statement_compound -> stmt_c_while .)
    PASS            reduce using rule 15 (statement_compound -> stmt_c_while .)
    RETURN          reduce using rule 15 (statement_compound -> stmt_c_while .)
    LEFT_PAREN      reduce using rule 15 (statement_compound -> stmt_c_while .)
    NOT_EQUALS      reduce using rule 15 (statement_compound -> stmt_c_while .)
    NOT             reduce using rule 15 (statement_compound -> stmt_c_while .)
    THIS            reduce using rule 15 (statement_compound -> stmt_c_while .)
    IF              reduce using rule 15 (statement_compound -> stmt_c_while .)
    BLANK           reduce using rule 15 (statement_compound -> stmt_c_while .)
    NULL            reduce using rule 15 (statement_compound -> stmt_c_while .)
    TRUE            reduce using rule 15 (statement_compound -> stmt_c_while .)
    FALSE           reduce using rule 15 (statement_compound -> stmt_c_while .)
    NUMERIC_LITERAL reduce using rule 15 (statement_compound -> stmt_c_while .)
    MINUS           reduce using rule 15 (statement_compound -> stmt_c_while .)
    IDENTIFIER      reduce using rule 15 (statement_compound -> stmt_c_while .)
    LEFT_BOX        reduce using rule 15 (statement_compound -> stmt_c_while .)
    LEFT_CURLY_BRACE reduce using rule 15 (statement_compound -> stmt_c_while .)
    STRING_LITERAL  reduce using rule 15 (statement_compound -> stmt_c_while .)
    ENDIF           reduce using rule 15 (statement_compound -> stmt_c_while .)
    ENDFOR          reduce using rule 15 (statement_compound -> stmt_c_while .)
    OTHERWISE       reduce using rule 15 (statement_compound -> stmt_c_while .)
    ELIF            reduce using rule 15 (statement_compound -> stmt_c_while .)
    $end            reduce using rule 15 (statement_compound -> stmt_c_while .)
    ENDFUNCTION     reduce using rule 15 (statement_compound -> stmt_c_while .)
    ENDWHILE        reduce using rule 15 (statement_compound -> stmt_c_while .)



state 3

    (97) literal -> TRUE .

    LEFT_BOX        reduce using rule 97 (literal -> TRUE .)
    ASSIGN_EQUALS   reduce using rule 97 (literal -> TRUE .)
    DOT_EQUALS      reduce using rule 97 (literal -> TRUE .)
    PLUS_EQUALS     reduce using rule 97 (literal -> TRUE .)
    MINUS_EQUALS    reduce using rule 97 (literal -> TRUE .)
    TIMES_EQUALS    reduce using rule 97 (literal -> TRUE .)
    DIVIDE_EQUALS   reduce using rule 97 (literal -> TRUE .)
    MODULUS_EQUALS  reduce using rule 97 (literal -> TRUE .)
    EXPONENT_EQUALS reduce using rule 97 (literal -> TRUE .)
    AND_EQUALS      reduce using rule 97 (literal -> TRUE .)
    OR_EQUALS       reduce using rule 97 (literal -> TRUE .)
    DOT             reduce using rule 97 (literal -> TRUE .)
    PLUS            reduce using rule 97 (literal -> TRUE .)
    MINUS           reduce using rule 97 (literal -> TRUE .)
    TIMES           reduce using rule 97 (literal -> TRUE .)
    DIVIDE          reduce using rule 97 (literal -> TRUE .)
    MODULUS         reduce using rule 97 (literal -> TRUE .)
    EXPONENT        reduce using rule 97 (literal -> TRUE .)
    AND             reduce using rule 97 (literal -> TRUE .)
    OR              reduce using rule 97 (literal -> TRUE .)
    IN              reduce using rule 97 (literal -> TRUE .)
    HAS             reduce using rule 97 (literal -> TRUE .)
    EQUIVALENCE_EQUAL reduce using rule 97 (literal -> TRUE .)
    COMPARE_GT      reduce using rule 97 (literal -> TRUE .)
    COMPARE_GTET    reduce using rule 97 (literal -> TRUE .)
    COMPARE_LT      reduce using rule 97 (literal -> TRUE .)
    COMPARE_LTET    reduce using rule 97 (literal -> TRUE .)
    LEFT_PAREN      reduce using rule 97 (literal -> TRUE .)
    FUNCTION        reduce using rule 97 (literal -> TRUE .)
    FOR             reduce using rule 97 (literal -> TRUE .)
    WHILE           reduce using rule 97 (literal -> TRUE .)
    IMPORT          reduce using rule 97 (literal -> TRUE .)
    CONTINUE        reduce using rule 97 (literal -> TRUE .)
    BREAK           reduce using rule 97 (literal -> TRUE .)
    PASS            reduce using rule 97 (literal -> TRUE .)
    RETURN          reduce using rule 97 (literal -> TRUE .)
    NOT_EQUALS      reduce using rule 97 (literal -> TRUE .)
    NOT             reduce using rule 97 (literal -> TRUE .)
    THIS            reduce using rule 97 (literal -> TRUE .)
    IF              reduce using rule 97 (literal -> TRUE .)
    BLANK           reduce using rule 97 (literal -> TRUE .)
    NULL            reduce using rule 97 (literal -> TRUE .)
    TRUE            reduce using rule 97 (literal -> TRUE .)
    FALSE           reduce using rule 97 (literal -> TRUE .)
    NUMERIC_LITERAL reduce using rule 97 (literal -> TRUE .)
    IDENTIFIER      reduce using rule 97 (literal -> TRUE .)
    LEFT_CURLY_BRACE reduce using rule 97 (literal -> TRUE .)
    STRING_LITERAL  reduce using rule 97 (literal -> TRUE .)
    $end            reduce using rule 97 (literal -> TRUE .)
    ENDFUNCTION     reduce using rule 97 (literal -> TRUE .)
    ENDWHILE        reduce using rule 97 (literal -> TRUE .)
    ENDIF           reduce using rule 97 (literal -> TRUE .)
    OTHERWISE       reduce using rule 97 (literal -> TRUE .)
    ELIF            reduce using rule 97 (literal -> TRUE .)
    ENDFOR          reduce using rule 97 (literal -> TRUE .)
    COLON           reduce using rule 97 (literal -> TRUE .)
    RIGHT_PAREN     reduce using rule 97 (literal -> TRUE .)
    COMMA           reduce using rule 97 (literal -> TRUE .)
    RIGHT_BOX       reduce using rule 97 (literal -> TRUE .)
    RIGHT_CURLY_BRACE reduce using rule 97 (literal -> TRUE .)



state 4

    (101) literal -> MINUS . NUMERIC_LITERAL

    NUMERIC_LITERAL shift and go to state 52



state 5

    (55) expression -> NOT_EQUALS . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 54

state 6

    (44) stmt_s_import -> IMPORT . dotted_identifier
    (45) dotted_identifier -> . dotted_identifier_something
    (46) dotted_identifier -> . dotted_identifier_everything
    (47) dotted_identifier_something -> . expression_identifier
    (48) dotted_identifier_something -> . expression_identifier DOT dotted_identifier_something
    (49) dotted_identifier_everything -> . TIMES
    (50) dotted_identifier_everything -> . dotted_identifier_something DOT TIMES
    (86) expression_identifier -> . IDENTIFIER

    TIMES           shift and go to state 58
    IDENTIFIER      shift and go to state 27


    expression_identifier          shift and go to state 55
    dotted_identifier              shift and go to state 56
    dotted_identifier_something    shift and go to state 57
    dotted_identifier_everything   shift and go to state 59

state 7

    (20) stmt_c_if_group -> stmt_c_if_FEO .

    ENDIF           reduce using rule 20 (stmt_c_if_group -> stmt_c_if_FEO .)



state 8

    (41) stmt_s_pass -> PASS .

    FUNCTION        reduce using rule 41 (stmt_s_pass -> PASS .)
    FOR             reduce using rule 41 (stmt_s_pass -> PASS .)
    WHILE           reduce using rule 41 (stmt_s_pass -> PASS .)
    IMPORT          reduce using rule 41 (stmt_s_pass -> PASS .)
    CONTINUE        reduce using rule 41 (stmt_s_pass -> PASS .)
    BREAK           reduce using rule 41 (stmt_s_pass -> PASS .)
    PASS            reduce using rule 41 (stmt_s_pass -> PASS .)
    RETURN          reduce using rule 41 (stmt_s_pass -> PASS .)
    LEFT_PAREN      reduce using rule 41 (stmt_s_pass -> PASS .)
    NOT_EQUALS      reduce using rule 41 (stmt_s_pass -> PASS .)
    NOT             reduce using rule 41 (stmt_s_pass -> PASS .)
    THIS            reduce using rule 41 (stmt_s_pass -> PASS .)
    IF              reduce using rule 41 (stmt_s_pass -> PASS .)
    BLANK           reduce using rule 41 (stmt_s_pass -> PASS .)
    NULL            reduce using rule 41 (stmt_s_pass -> PASS .)
    TRUE            reduce using rule 41 (stmt_s_pass -> PASS .)
    FALSE           reduce using rule 41 (stmt_s_pass -> PASS .)
    NUMERIC_LITERAL reduce using rule 41 (stmt_s_pass -> PASS .)
    MINUS           reduce using rule 41 (stmt_s_pass -> PASS .)
    IDENTIFIER      reduce using rule 41 (stmt_s_pass -> PASS .)
    LEFT_BOX        reduce using rule 41 (stmt_s_pass -> PASS .)
    LEFT_CURLY_BRACE reduce using rule 41 (stmt_s_pass -> PASS .)
    STRING_LITERAL  reduce using rule 41 (stmt_s_pass -> PASS .)
    ENDFUNCTION     reduce using rule 41 (stmt_s_pass -> PASS .)
    ELIF            reduce using rule 41 (stmt_s_pass -> PASS .)
    OTHERWISE       reduce using rule 41 (stmt_s_pass -> PASS .)
    ENDIF           reduce using rule 41 (stmt_s_pass -> PASS .)
    ENDWHILE        reduce using rule 41 (stmt_s_pass -> PASS .)
    $end            reduce using rule 41 (stmt_s_pass -> PASS .)
    ENDFOR          reduce using rule 41 (stmt_s_pass -> PASS .)



state 9

    (34) statement_simple -> stmt_s_expression .

    FUNCTION        reduce using rule 34 (statement_simple -> stmt_s_expression .)
    FOR             reduce using rule 34 (statement_simple -> stmt_s_expression .)
    WHILE           reduce using rule 34 (statement_simple -> stmt_s_expression .)
    IMPORT          reduce using rule 34 (statement_simple -> stmt_s_expression .)
    CONTINUE        reduce using rule 34 (statement_simple -> stmt_s_expression .)
    BREAK           reduce using rule 34 (statement_simple -> stmt_s_expression .)
    PASS            reduce using rule 34 (statement_simple -> stmt_s_expression .)
    RETURN          reduce using rule 34 (statement_simple -> stmt_s_expression .)
    LEFT_PAREN      reduce using rule 34 (statement_simple -> stmt_s_expression .)
    NOT_EQUALS      reduce using rule 34 (statement_simple -> stmt_s_expression .)
    NOT             reduce using rule 34 (statement_simple -> stmt_s_expression .)
    THIS            reduce using rule 34 (statement_simple -> stmt_s_expression .)
    IF              reduce using rule 34 (statement_simple -> stmt_s_expression .)
    BLANK           reduce using rule 34 (statement_simple -> stmt_s_expression .)
    NULL            reduce using rule 34 (statement_simple -> stmt_s_expression .)
    TRUE            reduce using rule 34 (statement_simple -> stmt_s_expression .)
    FALSE           reduce using rule 34 (statement_simple -> stmt_s_expression .)
    NUMERIC_LITERAL reduce using rule 34 (statement_simple -> stmt_s_expression .)
    MINUS           reduce using rule 34 (statement_simple -> stmt_s_expression .)
    IDENTIFIER      reduce using rule 34 (statement_simple -> stmt_s_expression .)
    LEFT_BOX        reduce using rule 34 (statement_simple -> stmt_s_expression .)
    LEFT_CURLY_BRACE reduce using rule 34 (statement_simple -> stmt_s_expression .)
    STRING_LITERAL  reduce using rule 34 (statement_simple -> stmt_s_expression .)
    $end            reduce using rule 34 (statement_simple -> stmt_s_expression .)
    ENDIF           reduce using rule 34 (statement_simple -> stmt_s_expression .)
    ENDFUNCTION     reduce using rule 34 (statement_simple -> stmt_s_expression .)
    ELIF            reduce using rule 34 (statement_simple -> stmt_s_expression .)
    OTHERWISE       reduce using rule 34 (statement_simple -> stmt_s_expression .)
    ENDWHILE        reduce using rule 34 (statement_simple -> stmt_s_expression .)
    ENDFOR          reduce using rule 34 (statement_simple -> stmt_s_expression .)



state 10

    (87) expression -> THIS .

    LEFT_BOX        reduce using rule 87 (expression -> THIS .)
    ASSIGN_EQUALS   reduce using rule 87 (expression -> THIS .)
    DOT_EQUALS      reduce using rule 87 (expression -> THIS .)
    PLUS_EQUALS     reduce using rule 87 (expression -> THIS .)
    MINUS_EQUALS    reduce using rule 87 (expression -> THIS .)
    TIMES_EQUALS    reduce using rule 87 (expression -> THIS .)
    DIVIDE_EQUALS   reduce using rule 87 (expression -> THIS .)
    MODULUS_EQUALS  reduce using rule 87 (expression -> THIS .)
    EXPONENT_EQUALS reduce using rule 87 (expression -> THIS .)
    AND_EQUALS      reduce using rule 87 (expression -> THIS .)
    OR_EQUALS       reduce using rule 87 (expression -> THIS .)
    DOT             reduce using rule 87 (expression -> THIS .)
    PLUS            reduce using rule 87 (expression -> THIS .)
    MINUS           reduce using rule 87 (expression -> THIS .)
    TIMES           reduce using rule 87 (expression -> THIS .)
    DIVIDE          reduce using rule 87 (expression -> THIS .)
    MODULUS         reduce using rule 87 (expression -> THIS .)
    EXPONENT        reduce using rule 87 (expression -> THIS .)
    AND             reduce using rule 87 (expression -> THIS .)
    OR              reduce using rule 87 (expression -> THIS .)
    IN              reduce using rule 87 (expression -> THIS .)
    HAS             reduce using rule 87 (expression -> THIS .)
    EQUIVALENCE_EQUAL reduce using rule 87 (expression -> THIS .)
    COMPARE_GT      reduce using rule 87 (expression -> THIS .)
    COMPARE_GTET    reduce using rule 87 (expression -> THIS .)
    COMPARE_LT      reduce using rule 87 (expression -> THIS .)
    COMPARE_LTET    reduce using rule 87 (expression -> THIS .)
    LEFT_PAREN      reduce using rule 87 (expression -> THIS .)
    FUNCTION        reduce using rule 87 (expression -> THIS .)
    FOR             reduce using rule 87 (expression -> THIS .)
    WHILE           reduce using rule 87 (expression -> THIS .)
    IMPORT          reduce using rule 87 (expression -> THIS .)
    CONTINUE        reduce using rule 87 (expression -> THIS .)
    BREAK           reduce using rule 87 (expression -> THIS .)
    PASS            reduce using rule 87 (expression -> THIS .)
    RETURN          reduce using rule 87 (expression -> THIS .)
    NOT_EQUALS      reduce using rule 87 (expression -> THIS .)
    NOT             reduce using rule 87 (expression -> THIS .)
    THIS            reduce using rule 87 (expression -> THIS .)
    IF              reduce using rule 87 (expression -> THIS .)
    BLANK           reduce using rule 87 (expression -> THIS .)
    NULL            reduce using rule 87 (expression -> THIS .)
    TRUE            reduce using rule 87 (expression -> THIS .)
    FALSE           reduce using rule 87 (expression -> THIS .)
    NUMERIC_LITERAL reduce using rule 87 (expression -> THIS .)
    IDENTIFIER      reduce using rule 87 (expression -> THIS .)
    LEFT_CURLY_BRACE reduce using rule 87 (expression -> THIS .)
    STRING_LITERAL  reduce using rule 87 (expression -> THIS .)
    ENDWHILE        reduce using rule 87 (expression -> THIS .)
    $end            reduce using rule 87 (expression -> THIS .)
    ENDFUNCTION     reduce using rule 87 (expression -> THIS .)
    ENDIF           reduce using rule 87 (expression -> THIS .)
    OTHERWISE       reduce using rule 87 (expression -> THIS .)
    ELIF            reduce using rule 87 (expression -> THIS .)
    ENDFOR          reduce using rule 87 (expression -> THIS .)
    COLON           reduce using rule 87 (expression -> THIS .)
    RIGHT_PAREN     reduce using rule 87 (expression -> THIS .)
    COMMA           reduce using rule 87 (expression -> THIS .)
    RIGHT_BOX       reduce using rule 87 (expression -> THIS .)
    RIGHT_CURLY_BRACE reduce using rule 87 (expression -> THIS .)



state 11

    (36) stmt_s_control_flow -> stmt_s_break .

    FUNCTION        reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    FOR             reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    WHILE           reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    IMPORT          reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    CONTINUE        reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    BREAK           reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    PASS            reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    RETURN          reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    LEFT_PAREN      reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    NOT_EQUALS      reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    NOT             reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    THIS            reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    IF              reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    BLANK           reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    NULL            reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    TRUE            reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    FALSE           reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    NUMERIC_LITERAL reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    MINUS           reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    IDENTIFIER      reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    LEFT_BOX        reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    LEFT_CURLY_BRACE reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    STRING_LITERAL  reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    ELIF            reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    OTHERWISE       reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    ENDIF           reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    ENDFOR          reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    ENDWHILE        reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    ENDFUNCTION     reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)
    $end            reduce using rule 36 (stmt_s_control_flow -> stmt_s_break .)



state 12

    (42) stmt_s_return -> RETURN . expression
    (43) stmt_s_return -> RETURN .
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

  ! shift/reduce conflict for LEFT_PAREN resolved as shift.
  ! shift/reduce conflict for NOT_EQUALS resolved as shift.
  ! shift/reduce conflict for NOT resolved as shift.
  ! shift/reduce conflict for THIS resolved as shift.
  ! shift/reduce conflict for BLANK resolved as shift.
  ! shift/reduce conflict for NULL resolved as shift.
  ! shift/reduce conflict for TRUE resolved as shift.
  ! shift/reduce conflict for FALSE resolved as shift.
  ! shift/reduce conflict for NUMERIC_LITERAL resolved as shift.
  ! shift/reduce conflict for MINUS resolved as shift.
  ! shift/reduce conflict for FUNCTION resolved as shift.
  ! shift/reduce conflict for IDENTIFIER resolved as shift.
  ! shift/reduce conflict for LEFT_BOX resolved as shift.
  ! shift/reduce conflict for LEFT_CURLY_BRACE resolved as shift.
  ! shift/reduce conflict for STRING_LITERAL resolved as shift.
    FOR             reduce using rule 43 (stmt_s_return -> RETURN .)
    WHILE           reduce using rule 43 (stmt_s_return -> RETURN .)
    IMPORT          reduce using rule 43 (stmt_s_return -> RETURN .)
    CONTINUE        reduce using rule 43 (stmt_s_return -> RETURN .)
    BREAK           reduce using rule 43 (stmt_s_return -> RETURN .)
    PASS            reduce using rule 43 (stmt_s_return -> RETURN .)
    RETURN          reduce using rule 43 (stmt_s_return -> RETURN .)
    IF              reduce using rule 43 (stmt_s_return -> RETURN .)
    ENDIF           reduce using rule 43 (stmt_s_return -> RETURN .)
    ENDFUNCTION     reduce using rule 43 (stmt_s_return -> RETURN .)
    ENDWHILE        reduce using rule 43 (stmt_s_return -> RETURN .)
    OTHERWISE       reduce using rule 43 (stmt_s_return -> RETURN .)
    ELIF            reduce using rule 43 (stmt_s_return -> RETURN .)
    ENDFOR          reduce using rule 43 (stmt_s_return -> RETURN .)
    $end            reduce using rule 43 (stmt_s_return -> RETURN .)
    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49

  ! FUNCTION        [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! LEFT_PAREN      [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! NOT_EQUALS      [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! NOT             [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! THIS            [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! BLANK           [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! NULL            [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! TRUE            [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! FALSE           [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! NUMERIC_LITERAL [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! MINUS           [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! IDENTIFIER      [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! LEFT_BOX        [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! LEFT_CURLY_BRACE [ reduce using rule 43 (stmt_s_return -> RETURN .) ]
  ! STRING_LITERAL  [ reduce using rule 43 (stmt_s_return -> RETURN .) ]

    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 60

state 13

    (16) statement_compound -> stmt_c_if_group . ENDIF

    ENDIF           shift and go to state 61



state 14

    (95) literal -> BLANK .

    LEFT_BOX        reduce using rule 95 (literal -> BLANK .)
    ASSIGN_EQUALS   reduce using rule 95 (literal -> BLANK .)
    DOT_EQUALS      reduce using rule 95 (literal -> BLANK .)
    PLUS_EQUALS     reduce using rule 95 (literal -> BLANK .)
    MINUS_EQUALS    reduce using rule 95 (literal -> BLANK .)
    TIMES_EQUALS    reduce using rule 95 (literal -> BLANK .)
    DIVIDE_EQUALS   reduce using rule 95 (literal -> BLANK .)
    MODULUS_EQUALS  reduce using rule 95 (literal -> BLANK .)
    EXPONENT_EQUALS reduce using rule 95 (literal -> BLANK .)
    AND_EQUALS      reduce using rule 95 (literal -> BLANK .)
    OR_EQUALS       reduce using rule 95 (literal -> BLANK .)
    DOT             reduce using rule 95 (literal -> BLANK .)
    PLUS            reduce using rule 95 (literal -> BLANK .)
    MINUS           reduce using rule 95 (literal -> BLANK .)
    TIMES           reduce using rule 95 (literal -> BLANK .)
    DIVIDE          reduce using rule 95 (literal -> BLANK .)
    MODULUS         reduce using rule 95 (literal -> BLANK .)
    EXPONENT        reduce using rule 95 (literal -> BLANK .)
    AND             reduce using rule 95 (literal -> BLANK .)
    OR              reduce using rule 95 (literal -> BLANK .)
    IN              reduce using rule 95 (literal -> BLANK .)
    HAS             reduce using rule 95 (literal -> BLANK .)
    EQUIVALENCE_EQUAL reduce using rule 95 (literal -> BLANK .)
    COMPARE_GT      reduce using rule 95 (literal -> BLANK .)
    COMPARE_GTET    reduce using rule 95 (literal -> BLANK .)
    COMPARE_LT      reduce using rule 95 (literal -> BLANK .)
    COMPARE_LTET    reduce using rule 95 (literal -> BLANK .)
    LEFT_PAREN      reduce using rule 95 (literal -> BLANK .)
    FUNCTION        reduce using rule 95 (literal -> BLANK .)
    FOR             reduce using rule 95 (literal -> BLANK .)
    WHILE           reduce using rule 95 (literal -> BLANK .)
    IMPORT          reduce using rule 95 (literal -> BLANK .)
    CONTINUE        reduce using rule 95 (literal -> BLANK .)
    BREAK           reduce using rule 95 (literal -> BLANK .)
    PASS            reduce using rule 95 (literal -> BLANK .)
    RETURN          reduce using rule 95 (literal -> BLANK .)
    NOT_EQUALS      reduce using rule 95 (literal -> BLANK .)
    NOT             reduce using rule 95 (literal -> BLANK .)
    THIS            reduce using rule 95 (literal -> BLANK .)
    IF              reduce using rule 95 (literal -> BLANK .)
    BLANK           reduce using rule 95 (literal -> BLANK .)
    NULL            reduce using rule 95 (literal -> BLANK .)
    TRUE            reduce using rule 95 (literal -> BLANK .)
    FALSE           reduce using rule 95 (literal -> BLANK .)
    NUMERIC_LITERAL reduce using rule 95 (literal -> BLANK .)
    IDENTIFIER      reduce using rule 95 (literal -> BLANK .)
    LEFT_CURLY_BRACE reduce using rule 95 (literal -> BLANK .)
    STRING_LITERAL  reduce using rule 95 (literal -> BLANK .)
    $end            reduce using rule 95 (literal -> BLANK .)
    ENDFUNCTION     reduce using rule 95 (literal -> BLANK .)
    ENDWHILE        reduce using rule 95 (literal -> BLANK .)
    ENDIF           reduce using rule 95 (literal -> BLANK .)
    OTHERWISE       reduce using rule 95 (literal -> BLANK .)
    ELIF            reduce using rule 95 (literal -> BLANK .)
    ENDFOR          reduce using rule 95 (literal -> BLANK .)
    COLON           reduce using rule 95 (literal -> BLANK .)
    RIGHT_PAREN     reduce using rule 95 (literal -> BLANK .)
    COMMA           reduce using rule 95 (literal -> BLANK .)
    RIGHT_BOX       reduce using rule 95 (literal -> BLANK .)
    RIGHT_CURLY_BRACE reduce using rule 95 (literal -> BLANK .)



state 15

    (7) function_definition -> FUNCTION . expression_identifier parameters COLON ks ENDFUNCTION
    (9) function_anonymous -> FUNCTION . parameters COLON ks ENDFUNCTION
    (86) expression_identifier -> . IDENTIFIER
    (10) parameters -> . LEFT_PAREN param_list RIGHT_PAREN

    IDENTIFIER      shift and go to state 27
    LEFT_PAREN      shift and go to state 64


    expression_identifier          shift and go to state 62
    parameters                     shift and go to state 63

state 16

    (25) stmt_c_for -> FOR . expression_identifier IN expression COLON ks ENDFOR
    (86) expression_identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 27


    expression_identifier          shift and go to state 65

state 17

    (100) literal -> NUMERIC_LITERAL .

    LEFT_BOX        reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    ASSIGN_EQUALS   reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    DOT_EQUALS      reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    PLUS_EQUALS     reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    MINUS_EQUALS    reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    TIMES_EQUALS    reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    DIVIDE_EQUALS   reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    MODULUS_EQUALS  reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    EXPONENT_EQUALS reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    AND_EQUALS      reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    OR_EQUALS       reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    DOT             reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    PLUS            reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    MINUS           reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    TIMES           reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    DIVIDE          reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    MODULUS         reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    EXPONENT        reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    AND             reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    OR              reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    IN              reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    HAS             reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    EQUIVALENCE_EQUAL reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    COMPARE_GT      reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    COMPARE_GTET    reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    COMPARE_LT      reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    COMPARE_LTET    reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    LEFT_PAREN      reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    FUNCTION        reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    FOR             reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    WHILE           reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    IMPORT          reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    CONTINUE        reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    BREAK           reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    PASS            reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    RETURN          reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    NOT_EQUALS      reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    NOT             reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    THIS            reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    IF              reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    BLANK           reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    NULL            reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    TRUE            reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    FALSE           reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    NUMERIC_LITERAL reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    IDENTIFIER      reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    LEFT_CURLY_BRACE reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    STRING_LITERAL  reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    $end            reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    ENDFUNCTION     reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    ENDWHILE        reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    ENDIF           reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    OTHERWISE       reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    ELIF            reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    ENDFOR          reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    COLON           reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    RIGHT_PAREN     reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    COMMA           reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    RIGHT_BOX       reduce using rule 100 (literal -> NUMERIC_LITERAL .)
    RIGHT_CURLY_BRACE reduce using rule 100 (literal -> NUMERIC_LITERAL .)



state 18

    (93) literal -> object_literal .

    LEFT_BOX        reduce using rule 93 (literal -> object_literal .)
    ASSIGN_EQUALS   reduce using rule 93 (literal -> object_literal .)
    DOT_EQUALS      reduce using rule 93 (literal -> object_literal .)
    PLUS_EQUALS     reduce using rule 93 (literal -> object_literal .)
    MINUS_EQUALS    reduce using rule 93 (literal -> object_literal .)
    TIMES_EQUALS    reduce using rule 93 (literal -> object_literal .)
    DIVIDE_EQUALS   reduce using rule 93 (literal -> object_literal .)
    MODULUS_EQUALS  reduce using rule 93 (literal -> object_literal .)
    EXPONENT_EQUALS reduce using rule 93 (literal -> object_literal .)
    AND_EQUALS      reduce using rule 93 (literal -> object_literal .)
    OR_EQUALS       reduce using rule 93 (literal -> object_literal .)
    DOT             reduce using rule 93 (literal -> object_literal .)
    PLUS            reduce using rule 93 (literal -> object_literal .)
    MINUS           reduce using rule 93 (literal -> object_literal .)
    TIMES           reduce using rule 93 (literal -> object_literal .)
    DIVIDE          reduce using rule 93 (literal -> object_literal .)
    MODULUS         reduce using rule 93 (literal -> object_literal .)
    EXPONENT        reduce using rule 93 (literal -> object_literal .)
    AND             reduce using rule 93 (literal -> object_literal .)
    OR              reduce using rule 93 (literal -> object_literal .)
    IN              reduce using rule 93 (literal -> object_literal .)
    HAS             reduce using rule 93 (literal -> object_literal .)
    EQUIVALENCE_EQUAL reduce using rule 93 (literal -> object_literal .)
    COMPARE_GT      reduce using rule 93 (literal -> object_literal .)
    COMPARE_GTET    reduce using rule 93 (literal -> object_literal .)
    COMPARE_LT      reduce using rule 93 (literal -> object_literal .)
    COMPARE_LTET    reduce using rule 93 (literal -> object_literal .)
    LEFT_PAREN      reduce using rule 93 (literal -> object_literal .)
    FUNCTION        reduce using rule 93 (literal -> object_literal .)
    FOR             reduce using rule 93 (literal -> object_literal .)
    WHILE           reduce using rule 93 (literal -> object_literal .)
    IMPORT          reduce using rule 93 (literal -> object_literal .)
    CONTINUE        reduce using rule 93 (literal -> object_literal .)
    BREAK           reduce using rule 93 (literal -> object_literal .)
    PASS            reduce using rule 93 (literal -> object_literal .)
    RETURN          reduce using rule 93 (literal -> object_literal .)
    NOT_EQUALS      reduce using rule 93 (literal -> object_literal .)
    NOT             reduce using rule 93 (literal -> object_literal .)
    THIS            reduce using rule 93 (literal -> object_literal .)
    IF              reduce using rule 93 (literal -> object_literal .)
    BLANK           reduce using rule 93 (literal -> object_literal .)
    NULL            reduce using rule 93 (literal -> object_literal .)
    TRUE            reduce using rule 93 (literal -> object_literal .)
    FALSE           reduce using rule 93 (literal -> object_literal .)
    NUMERIC_LITERAL reduce using rule 93 (literal -> object_literal .)
    IDENTIFIER      reduce using rule 93 (literal -> object_literal .)
    LEFT_CURLY_BRACE reduce using rule 93 (literal -> object_literal .)
    STRING_LITERAL  reduce using rule 93 (literal -> object_literal .)
    $end            reduce using rule 93 (literal -> object_literal .)
    ENDFUNCTION     reduce using rule 93 (literal -> object_literal .)
    ENDWHILE        reduce using rule 93 (literal -> object_literal .)
    ENDIF           reduce using rule 93 (literal -> object_literal .)
    OTHERWISE       reduce using rule 93 (literal -> object_literal .)
    ELIF            reduce using rule 93 (literal -> object_literal .)
    ENDFOR          reduce using rule 93 (literal -> object_literal .)
    COLON           reduce using rule 93 (literal -> object_literal .)
    RIGHT_PAREN     reduce using rule 93 (literal -> object_literal .)
    COMMA           reduce using rule 93 (literal -> object_literal .)
    RIGHT_BOX       reduce using rule 93 (literal -> object_literal .)
    RIGHT_CURLY_BRACE reduce using rule 93 (literal -> object_literal .)



state 19

    (39) stmt_s_continue -> CONTINUE .

    FUNCTION        reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    FOR             reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    WHILE           reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    IMPORT          reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    CONTINUE        reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    BREAK           reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    PASS            reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    RETURN          reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    LEFT_PAREN      reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    NOT_EQUALS      reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    NOT             reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    THIS            reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    IF              reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    BLANK           reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    NULL            reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    TRUE            reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    FALSE           reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    NUMERIC_LITERAL reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    MINUS           reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    IDENTIFIER      reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    LEFT_BOX        reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    LEFT_CURLY_BRACE reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    STRING_LITERAL  reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    ENDIF           reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    OTHERWISE       reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    ELIF            reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    ENDFUNCTION     reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    $end            reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    ENDWHILE        reduce using rule 39 (stmt_s_continue -> CONTINUE .)
    ENDFOR          reduce using rule 39 (stmt_s_continue -> CONTINUE .)



state 20

    (56) expression -> NOT . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 66

state 21

    (51) stmt_s_expression -> expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

  ! shift/reduce conflict for LEFT_BOX resolved as shift.
  ! shift/reduce conflict for MINUS resolved as shift.
  ! shift/reduce conflict for LEFT_PAREN resolved as shift.
    FUNCTION        reduce using rule 51 (stmt_s_expression -> expression .)
    FOR             reduce using rule 51 (stmt_s_expression -> expression .)
    WHILE           reduce using rule 51 (stmt_s_expression -> expression .)
    IMPORT          reduce using rule 51 (stmt_s_expression -> expression .)
    CONTINUE        reduce using rule 51 (stmt_s_expression -> expression .)
    BREAK           reduce using rule 51 (stmt_s_expression -> expression .)
    PASS            reduce using rule 51 (stmt_s_expression -> expression .)
    RETURN          reduce using rule 51 (stmt_s_expression -> expression .)
    NOT_EQUALS      reduce using rule 51 (stmt_s_expression -> expression .)
    NOT             reduce using rule 51 (stmt_s_expression -> expression .)
    THIS            reduce using rule 51 (stmt_s_expression -> expression .)
    IF              reduce using rule 51 (stmt_s_expression -> expression .)
    BLANK           reduce using rule 51 (stmt_s_expression -> expression .)
    NULL            reduce using rule 51 (stmt_s_expression -> expression .)
    TRUE            reduce using rule 51 (stmt_s_expression -> expression .)
    FALSE           reduce using rule 51 (stmt_s_expression -> expression .)
    NUMERIC_LITERAL reduce using rule 51 (stmt_s_expression -> expression .)
    IDENTIFIER      reduce using rule 51 (stmt_s_expression -> expression .)
    LEFT_CURLY_BRACE reduce using rule 51 (stmt_s_expression -> expression .)
    STRING_LITERAL  reduce using rule 51 (stmt_s_expression -> expression .)
    OTHERWISE       reduce using rule 51 (stmt_s_expression -> expression .)
    ELIF            reduce using rule 51 (stmt_s_expression -> expression .)
    ENDIF           reduce using rule 51 (stmt_s_expression -> expression .)
    ENDWHILE        reduce using rule 51 (stmt_s_expression -> expression .)
    $end            reduce using rule 51 (stmt_s_expression -> expression .)
    ENDFUNCTION     reduce using rule 51 (stmt_s_expression -> expression .)
    ENDFOR          reduce using rule 51 (stmt_s_expression -> expression .)
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76

  ! LEFT_PAREN      [ reduce using rule 51 (stmt_s_expression -> expression .) ]
  ! MINUS           [ reduce using rule 51 (stmt_s_expression -> expression .) ]
  ! LEFT_BOX        [ reduce using rule 51 (stmt_s_expression -> expression .) ]


state 22

    (14) statement_compound -> stmt_c_for .

    FUNCTION        reduce using rule 14 (statement_compound -> stmt_c_for .)
    FOR             reduce using rule 14 (statement_compound -> stmt_c_for .)
    WHILE           reduce using rule 14 (statement_compound -> stmt_c_for .)
    IMPORT          reduce using rule 14 (statement_compound -> stmt_c_for .)
    CONTINUE        reduce using rule 14 (statement_compound -> stmt_c_for .)
    BREAK           reduce using rule 14 (statement_compound -> stmt_c_for .)
    PASS            reduce using rule 14 (statement_compound -> stmt_c_for .)
    RETURN          reduce using rule 14 (statement_compound -> stmt_c_for .)
    LEFT_PAREN      reduce using rule 14 (statement_compound -> stmt_c_for .)
    NOT_EQUALS      reduce using rule 14 (statement_compound -> stmt_c_for .)
    NOT             reduce using rule 14 (statement_compound -> stmt_c_for .)
    THIS            reduce using rule 14 (statement_compound -> stmt_c_for .)
    IF              reduce using rule 14 (statement_compound -> stmt_c_for .)
    BLANK           reduce using rule 14 (statement_compound -> stmt_c_for .)
    NULL            reduce using rule 14 (statement_compound -> stmt_c_for .)
    TRUE            reduce using rule 14 (statement_compound -> stmt_c_for .)
    FALSE           reduce using rule 14 (statement_compound -> stmt_c_for .)
    NUMERIC_LITERAL reduce using rule 14 (statement_compound -> stmt_c_for .)
    MINUS           reduce using rule 14 (statement_compound -> stmt_c_for .)
    IDENTIFIER      reduce using rule 14 (statement_compound -> stmt_c_for .)
    LEFT_BOX        reduce using rule 14 (statement_compound -> stmt_c_for .)
    LEFT_CURLY_BRACE reduce using rule 14 (statement_compound -> stmt_c_for .)
    STRING_LITERAL  reduce using rule 14 (statement_compound -> stmt_c_for .)
    ENDIF           reduce using rule 14 (statement_compound -> stmt_c_for .)
    ENDFOR          reduce using rule 14 (statement_compound -> stmt_c_for .)
    OTHERWISE       reduce using rule 14 (statement_compound -> stmt_c_for .)
    ELIF            reduce using rule 14 (statement_compound -> stmt_c_for .)
    $end            reduce using rule 14 (statement_compound -> stmt_c_for .)
    ENDFUNCTION     reduce using rule 14 (statement_compound -> stmt_c_for .)
    ENDWHILE        reduce using rule 14 (statement_compound -> stmt_c_for .)



state 23

    (26) stmt_c_while -> WHILE . expression COLON ks ENDWHILE
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 95

state 24

    (54) expression -> LEFT_PAREN . expression RIGHT_PAREN
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 96

state 25

    (52) expression -> literal .

    LEFT_BOX        reduce using rule 52 (expression -> literal .)
    ASSIGN_EQUALS   reduce using rule 52 (expression -> literal .)
    DOT_EQUALS      reduce using rule 52 (expression -> literal .)
    PLUS_EQUALS     reduce using rule 52 (expression -> literal .)
    MINUS_EQUALS    reduce using rule 52 (expression -> literal .)
    TIMES_EQUALS    reduce using rule 52 (expression -> literal .)
    DIVIDE_EQUALS   reduce using rule 52 (expression -> literal .)
    MODULUS_EQUALS  reduce using rule 52 (expression -> literal .)
    EXPONENT_EQUALS reduce using rule 52 (expression -> literal .)
    AND_EQUALS      reduce using rule 52 (expression -> literal .)
    OR_EQUALS       reduce using rule 52 (expression -> literal .)
    DOT             reduce using rule 52 (expression -> literal .)
    PLUS            reduce using rule 52 (expression -> literal .)
    MINUS           reduce using rule 52 (expression -> literal .)
    TIMES           reduce using rule 52 (expression -> literal .)
    DIVIDE          reduce using rule 52 (expression -> literal .)
    MODULUS         reduce using rule 52 (expression -> literal .)
    EXPONENT        reduce using rule 52 (expression -> literal .)
    AND             reduce using rule 52 (expression -> literal .)
    OR              reduce using rule 52 (expression -> literal .)
    IN              reduce using rule 52 (expression -> literal .)
    HAS             reduce using rule 52 (expression -> literal .)
    EQUIVALENCE_EQUAL reduce using rule 52 (expression -> literal .)
    COMPARE_GT      reduce using rule 52 (expression -> literal .)
    COMPARE_GTET    reduce using rule 52 (expression -> literal .)
    COMPARE_LT      reduce using rule 52 (expression -> literal .)
    COMPARE_LTET    reduce using rule 52 (expression -> literal .)
    LEFT_PAREN      reduce using rule 52 (expression -> literal .)
    FUNCTION        reduce using rule 52 (expression -> literal .)
    FOR             reduce using rule 52 (expression -> literal .)
    WHILE           reduce using rule 52 (expression -> literal .)
    IMPORT          reduce using rule 52 (expression -> literal .)
    CONTINUE        reduce using rule 52 (expression -> literal .)
    BREAK           reduce using rule 52 (expression -> literal .)
    PASS            reduce using rule 52 (expression -> literal .)
    RETURN          reduce using rule 52 (expression -> literal .)
    NOT_EQUALS      reduce using rule 52 (expression -> literal .)
    NOT             reduce using rule 52 (expression -> literal .)
    THIS            reduce using rule 52 (expression -> literal .)
    IF              reduce using rule 52 (expression -> literal .)
    BLANK           reduce using rule 52 (expression -> literal .)
    NULL            reduce using rule 52 (expression -> literal .)
    TRUE            reduce using rule 52 (expression -> literal .)
    FALSE           reduce using rule 52 (expression -> literal .)
    NUMERIC_LITERAL reduce using rule 52 (expression -> literal .)
    IDENTIFIER      reduce using rule 52 (expression -> literal .)
    LEFT_CURLY_BRACE reduce using rule 52 (expression -> literal .)
    STRING_LITERAL  reduce using rule 52 (expression -> literal .)
    ENDWHILE        reduce using rule 52 (expression -> literal .)
    $end            reduce using rule 52 (expression -> literal .)
    ENDFUNCTION     reduce using rule 52 (expression -> literal .)
    ENDIF           reduce using rule 52 (expression -> literal .)
    OTHERWISE       reduce using rule 52 (expression -> literal .)
    ELIF            reduce using rule 52 (expression -> literal .)
    ENDFOR          reduce using rule 52 (expression -> literal .)
    COLON           reduce using rule 52 (expression -> literal .)
    RIGHT_PAREN     reduce using rule 52 (expression -> literal .)
    COMMA           reduce using rule 52 (expression -> literal .)
    RIGHT_BOX       reduce using rule 52 (expression -> literal .)
    RIGHT_CURLY_BRACE reduce using rule 52 (expression -> literal .)



state 26

    (8) function_definition -> function_anonymous .

    LEFT_BOX        reduce using rule 8 (function_definition -> function_anonymous .)
    ASSIGN_EQUALS   reduce using rule 8 (function_definition -> function_anonymous .)
    DOT_EQUALS      reduce using rule 8 (function_definition -> function_anonymous .)
    PLUS_EQUALS     reduce using rule 8 (function_definition -> function_anonymous .)
    MINUS_EQUALS    reduce using rule 8 (function_definition -> function_anonymous .)
    TIMES_EQUALS    reduce using rule 8 (function_definition -> function_anonymous .)
    DIVIDE_EQUALS   reduce using rule 8 (function_definition -> function_anonymous .)
    MODULUS_EQUALS  reduce using rule 8 (function_definition -> function_anonymous .)
    EXPONENT_EQUALS reduce using rule 8 (function_definition -> function_anonymous .)
    AND_EQUALS      reduce using rule 8 (function_definition -> function_anonymous .)
    OR_EQUALS       reduce using rule 8 (function_definition -> function_anonymous .)
    DOT             reduce using rule 8 (function_definition -> function_anonymous .)
    PLUS            reduce using rule 8 (function_definition -> function_anonymous .)
    MINUS           reduce using rule 8 (function_definition -> function_anonymous .)
    TIMES           reduce using rule 8 (function_definition -> function_anonymous .)
    DIVIDE          reduce using rule 8 (function_definition -> function_anonymous .)
    MODULUS         reduce using rule 8 (function_definition -> function_anonymous .)
    EXPONENT        reduce using rule 8 (function_definition -> function_anonymous .)
    AND             reduce using rule 8 (function_definition -> function_anonymous .)
    OR              reduce using rule 8 (function_definition -> function_anonymous .)
    IN              reduce using rule 8 (function_definition -> function_anonymous .)
    HAS             reduce using rule 8 (function_definition -> function_anonymous .)
    EQUIVALENCE_EQUAL reduce using rule 8 (function_definition -> function_anonymous .)
    COMPARE_GT      reduce using rule 8 (function_definition -> function_anonymous .)
    COMPARE_GTET    reduce using rule 8 (function_definition -> function_anonymous .)
    COMPARE_LT      reduce using rule 8 (function_definition -> function_anonymous .)
    COMPARE_LTET    reduce using rule 8 (function_definition -> function_anonymous .)
    LEFT_PAREN      reduce using rule 8 (function_definition -> function_anonymous .)
    FUNCTION        reduce using rule 8 (function_definition -> function_anonymous .)
    FOR             reduce using rule 8 (function_definition -> function_anonymous .)
    WHILE           reduce using rule 8 (function_definition -> function_anonymous .)
    IMPORT          reduce using rule 8 (function_definition -> function_anonymous .)
    CONTINUE        reduce using rule 8 (function_definition -> function_anonymous .)
    BREAK           reduce using rule 8 (function_definition -> function_anonymous .)
    PASS            reduce using rule 8 (function_definition -> function_anonymous .)
    RETURN          reduce using rule 8 (function_definition -> function_anonymous .)
    NOT_EQUALS      reduce using rule 8 (function_definition -> function_anonymous .)
    NOT             reduce using rule 8 (function_definition -> function_anonymous .)
    THIS            reduce using rule 8 (function_definition -> function_anonymous .)
    IF              reduce using rule 8 (function_definition -> function_anonymous .)
    BLANK           reduce using rule 8 (function_definition -> function_anonymous .)
    NULL            reduce using rule 8 (function_definition -> function_anonymous .)
    TRUE            reduce using rule 8 (function_definition -> function_anonymous .)
    FALSE           reduce using rule 8 (function_definition -> function_anonymous .)
    NUMERIC_LITERAL reduce using rule 8 (function_definition -> function_anonymous .)
    IDENTIFIER      reduce using rule 8 (function_definition -> function_anonymous .)
    LEFT_CURLY_BRACE reduce using rule 8 (function_definition -> function_anonymous .)
    STRING_LITERAL  reduce using rule 8 (function_definition -> function_anonymous .)
    $end            reduce using rule 8 (function_definition -> function_anonymous .)
    ENDFUNCTION     reduce using rule 8 (function_definition -> function_anonymous .)
    ENDWHILE        reduce using rule 8 (function_definition -> function_anonymous .)
    ENDIF           reduce using rule 8 (function_definition -> function_anonymous .)
    OTHERWISE       reduce using rule 8 (function_definition -> function_anonymous .)
    ELIF            reduce using rule 8 (function_definition -> function_anonymous .)
    ENDFOR          reduce using rule 8 (function_definition -> function_anonymous .)
    COLON           reduce using rule 8 (function_definition -> function_anonymous .)
    RIGHT_PAREN     reduce using rule 8 (function_definition -> function_anonymous .)
    COMMA           reduce using rule 8 (function_definition -> function_anonymous .)
    RIGHT_BOX       reduce using rule 8 (function_definition -> function_anonymous .)
    RIGHT_CURLY_BRACE reduce using rule 8 (function_definition -> function_anonymous .)



state 27

    (86) expression_identifier -> IDENTIFIER .

    LEFT_BOX        reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    ASSIGN_EQUALS   reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    DOT_EQUALS      reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    TIMES_EQUALS    reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    MODULUS_EQUALS  reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    EXPONENT_EQUALS reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    AND_EQUALS      reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    OR_EQUALS       reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    DOT             reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    PLUS            reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    MINUS           reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    TIMES           reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    MODULUS         reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    EXPONENT        reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    AND             reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    OR              reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    IN              reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    HAS             reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    EQUIVALENCE_EQUAL reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    COMPARE_GT      reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    COMPARE_GTET    reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    COMPARE_LT      reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    COMPARE_LTET    reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    LEFT_PAREN      reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    FUNCTION        reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    FOR             reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    WHILE           reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    IMPORT          reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    CONTINUE        reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    BREAK           reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    PASS            reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    RETURN          reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    NOT             reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    THIS            reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    IF              reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    BLANK           reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    NULL            reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    TRUE            reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    FALSE           reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    NUMERIC_LITERAL reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    LEFT_CURLY_BRACE reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    STRING_LITERAL  reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    $end            reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    ENDFUNCTION     reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    ENDWHILE        reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    ENDIF           reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    OTHERWISE       reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    ELIF            reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    ENDFOR          reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    COLON           reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    COMMA           reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    RIGHT_BOX       reduce using rule 86 (expression_identifier -> IDENTIFIER .)
    RIGHT_CURLY_BRACE reduce using rule 86 (expression_identifier -> IDENTIFIER .)



state 28

    (2) ks -> epsilon .

    $end            reduce using rule 2 (ks -> epsilon .)
    ENDFUNCTION     reduce using rule 2 (ks -> epsilon .)
    ENDWHILE        reduce using rule 2 (ks -> epsilon .)
    ENDIF           reduce using rule 2 (ks -> epsilon .)
    OTHERWISE       reduce using rule 2 (ks -> epsilon .)
    ELIF            reduce using rule 2 (ks -> epsilon .)
    ENDFOR          reduce using rule 2 (ks -> epsilon .)



state 29

    (35) stmt_s_control_flow -> stmt_s_continue .

    FUNCTION        reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    FOR             reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    WHILE           reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    IMPORT          reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    CONTINUE        reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    BREAK           reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    PASS            reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    RETURN          reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    LEFT_PAREN      reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    NOT_EQUALS      reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    NOT             reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    THIS            reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    IF              reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    BLANK           reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    NULL            reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    TRUE            reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    FALSE           reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    NUMERIC_LITERAL reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    MINUS           reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    IDENTIFIER      reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    LEFT_BOX        reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    LEFT_CURLY_BRACE reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    STRING_LITERAL  reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    ELIF            reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    OTHERWISE       reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    ENDIF           reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    ENDFOR          reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    ENDWHILE        reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    ENDFUNCTION     reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)
    $end            reduce using rule 35 (stmt_s_control_flow -> stmt_s_continue .)



state 30

    (94) literal -> literal_string .

    LEFT_BOX        reduce using rule 94 (literal -> literal_string .)
    ASSIGN_EQUALS   reduce using rule 94 (literal -> literal_string .)
    DOT_EQUALS      reduce using rule 94 (literal -> literal_string .)
    PLUS_EQUALS     reduce using rule 94 (literal -> literal_string .)
    MINUS_EQUALS    reduce using rule 94 (literal -> literal_string .)
    TIMES_EQUALS    reduce using rule 94 (literal -> literal_string .)
    DIVIDE_EQUALS   reduce using rule 94 (literal -> literal_string .)
    MODULUS_EQUALS  reduce using rule 94 (literal -> literal_string .)
    EXPONENT_EQUALS reduce using rule 94 (literal -> literal_string .)
    AND_EQUALS      reduce using rule 94 (literal -> literal_string .)
    OR_EQUALS       reduce using rule 94 (literal -> literal_string .)
    DOT             reduce using rule 94 (literal -> literal_string .)
    PLUS            reduce using rule 94 (literal -> literal_string .)
    MINUS           reduce using rule 94 (literal -> literal_string .)
    TIMES           reduce using rule 94 (literal -> literal_string .)
    DIVIDE          reduce using rule 94 (literal -> literal_string .)
    MODULUS         reduce using rule 94 (literal -> literal_string .)
    EXPONENT        reduce using rule 94 (literal -> literal_string .)
    AND             reduce using rule 94 (literal -> literal_string .)
    OR              reduce using rule 94 (literal -> literal_string .)
    IN              reduce using rule 94 (literal -> literal_string .)
    HAS             reduce using rule 94 (literal -> literal_string .)
    EQUIVALENCE_EQUAL reduce using rule 94 (literal -> literal_string .)
    COMPARE_GT      reduce using rule 94 (literal -> literal_string .)
    COMPARE_GTET    reduce using rule 94 (literal -> literal_string .)
    COMPARE_LT      reduce using rule 94 (literal -> literal_string .)
    COMPARE_LTET    reduce using rule 94 (literal -> literal_string .)
    LEFT_PAREN      reduce using rule 94 (literal -> literal_string .)
    FUNCTION        reduce using rule 94 (literal -> literal_string .)
    FOR             reduce using rule 94 (literal -> literal_string .)
    WHILE           reduce using rule 94 (literal -> literal_string .)
    IMPORT          reduce using rule 94 (literal -> literal_string .)
    CONTINUE        reduce using rule 94 (literal -> literal_string .)
    BREAK           reduce using rule 94 (literal -> literal_string .)
    PASS            reduce using rule 94 (literal -> literal_string .)
    RETURN          reduce using rule 94 (literal -> literal_string .)
    NOT_EQUALS      reduce using rule 94 (literal -> literal_string .)
    NOT             reduce using rule 94 (literal -> literal_string .)
    THIS            reduce using rule 94 (literal -> literal_string .)
    IF              reduce using rule 94 (literal -> literal_string .)
    BLANK           reduce using rule 94 (literal -> literal_string .)
    NULL            reduce using rule 94 (literal -> literal_string .)
    TRUE            reduce using rule 94 (literal -> literal_string .)
    FALSE           reduce using rule 94 (literal -> literal_string .)
    NUMERIC_LITERAL reduce using rule 94 (literal -> literal_string .)
    IDENTIFIER      reduce using rule 94 (literal -> literal_string .)
    LEFT_CURLY_BRACE reduce using rule 94 (literal -> literal_string .)
    STRING_LITERAL  reduce using rule 94 (literal -> literal_string .)
    $end            reduce using rule 94 (literal -> literal_string .)
    ENDFUNCTION     reduce using rule 94 (literal -> literal_string .)
    ENDWHILE        reduce using rule 94 (literal -> literal_string .)
    ENDIF           reduce using rule 94 (literal -> literal_string .)
    OTHERWISE       reduce using rule 94 (literal -> literal_string .)
    ELIF            reduce using rule 94 (literal -> literal_string .)
    ENDFOR          reduce using rule 94 (literal -> literal_string .)
    COLON           reduce using rule 94 (literal -> literal_string .)
    RIGHT_PAREN     reduce using rule 94 (literal -> literal_string .)
    COMMA           reduce using rule 94 (literal -> literal_string .)
    RIGHT_BOX       reduce using rule 94 (literal -> literal_string .)
    RIGHT_CURLY_BRACE reduce using rule 94 (literal -> literal_string .)



state 31

    (4) element -> statement_compound .

    FUNCTION        reduce using rule 4 (element -> statement_compound .)
    FOR             reduce using rule 4 (element -> statement_compound .)
    WHILE           reduce using rule 4 (element -> statement_compound .)
    IMPORT          reduce using rule 4 (element -> statement_compound .)
    CONTINUE        reduce using rule 4 (element -> statement_compound .)
    BREAK           reduce using rule 4 (element -> statement_compound .)
    PASS            reduce using rule 4 (element -> statement_compound .)
    RETURN          reduce using rule 4 (element -> statement_compound .)
    LEFT_PAREN      reduce using rule 4 (element -> statement_compound .)
    NOT_EQUALS      reduce using rule 4 (element -> statement_compound .)
    NOT             reduce using rule 4 (element -> statement_compound .)
    THIS            reduce using rule 4 (element -> statement_compound .)
    IF              reduce using rule 4 (element -> statement_compound .)
    BLANK           reduce using rule 4 (element -> statement_compound .)
    NULL            reduce using rule 4 (element -> statement_compound .)
    TRUE            reduce using rule 4 (element -> statement_compound .)
    FALSE           reduce using rule 4 (element -> statement_compound .)
    NUMERIC_LITERAL reduce using rule 4 (element -> statement_compound .)
    MINUS           reduce using rule 4 (element -> statement_compound .)
    IDENTIFIER      reduce using rule 4 (element -> statement_compound .)
    LEFT_BOX        reduce using rule 4 (element -> statement_compound .)
    LEFT_CURLY_BRACE reduce using rule 4 (element -> statement_compound .)
    STRING_LITERAL  reduce using rule 4 (element -> statement_compound .)
    ENDFOR          reduce using rule 4 (element -> statement_compound .)
    OTHERWISE       reduce using rule 4 (element -> statement_compound .)
    ELIF            reduce using rule 4 (element -> statement_compound .)
    ENDIF           reduce using rule 4 (element -> statement_compound .)
    ENDFUNCTION     reduce using rule 4 (element -> statement_compound .)
    $end            reduce using rule 4 (element -> statement_compound .)
    ENDWHILE        reduce using rule 4 (element -> statement_compound .)



state 32

    (98) literal -> FALSE .

    LEFT_BOX        reduce using rule 98 (literal -> FALSE .)
    ASSIGN_EQUALS   reduce using rule 98 (literal -> FALSE .)
    DOT_EQUALS      reduce using rule 98 (literal -> FALSE .)
    PLUS_EQUALS     reduce using rule 98 (literal -> FALSE .)
    MINUS_EQUALS    reduce using rule 98 (literal -> FALSE .)
    TIMES_EQUALS    reduce using rule 98 (literal -> FALSE .)
    DIVIDE_EQUALS   reduce using rule 98 (literal -> FALSE .)
    MODULUS_EQUALS  reduce using rule 98 (literal -> FALSE .)
    EXPONENT_EQUALS reduce using rule 98 (literal -> FALSE .)
    AND_EQUALS      reduce using rule 98 (literal -> FALSE .)
    OR_EQUALS       reduce using rule 98 (literal -> FALSE .)
    DOT             reduce using rule 98 (literal -> FALSE .)
    PLUS            reduce using rule 98 (literal -> FALSE .)
    MINUS           reduce using rule 98 (literal -> FALSE .)
    TIMES           reduce using rule 98 (literal -> FALSE .)
    DIVIDE          reduce using rule 98 (literal -> FALSE .)
    MODULUS         reduce using rule 98 (literal -> FALSE .)
    EXPONENT        reduce using rule 98 (literal -> FALSE .)
    AND             reduce using rule 98 (literal -> FALSE .)
    OR              reduce using rule 98 (literal -> FALSE .)
    IN              reduce using rule 98 (literal -> FALSE .)
    HAS             reduce using rule 98 (literal -> FALSE .)
    EQUIVALENCE_EQUAL reduce using rule 98 (literal -> FALSE .)
    COMPARE_GT      reduce using rule 98 (literal -> FALSE .)
    COMPARE_GTET    reduce using rule 98 (literal -> FALSE .)
    COMPARE_LT      reduce using rule 98 (literal -> FALSE .)
    COMPARE_LTET    reduce using rule 98 (literal -> FALSE .)
    LEFT_PAREN      reduce using rule 98 (literal -> FALSE .)
    FUNCTION        reduce using rule 98 (literal -> FALSE .)
    FOR             reduce using rule 98 (literal -> FALSE .)
    WHILE           reduce using rule 98 (literal -> FALSE .)
    IMPORT          reduce using rule 98 (literal -> FALSE .)
    CONTINUE        reduce using rule 98 (literal -> FALSE .)
    BREAK           reduce using rule 98 (literal -> FALSE .)
    PASS            reduce using rule 98 (literal -> FALSE .)
    RETURN          reduce using rule 98 (literal -> FALSE .)
    NOT_EQUALS      reduce using rule 98 (literal -> FALSE .)
    NOT             reduce using rule 98 (literal -> FALSE .)
    THIS            reduce using rule 98 (literal -> FALSE .)
    IF              reduce using rule 98 (literal -> FALSE .)
    BLANK           reduce using rule 98 (literal -> FALSE .)
    NULL            reduce using rule 98 (literal -> FALSE .)
    TRUE            reduce using rule 98 (literal -> FALSE .)
    FALSE           reduce using rule 98 (literal -> FALSE .)
    NUMERIC_LITERAL reduce using rule 98 (literal -> FALSE .)
    IDENTIFIER      reduce using rule 98 (literal -> FALSE .)
    LEFT_CURLY_BRACE reduce using rule 98 (literal -> FALSE .)
    STRING_LITERAL  reduce using rule 98 (literal -> FALSE .)
    $end            reduce using rule 98 (literal -> FALSE .)
    ENDFUNCTION     reduce using rule 98 (literal -> FALSE .)
    ENDWHILE        reduce using rule 98 (literal -> FALSE .)
    ENDIF           reduce using rule 98 (literal -> FALSE .)
    OTHERWISE       reduce using rule 98 (literal -> FALSE .)
    ELIF            reduce using rule 98 (literal -> FALSE .)
    ENDFOR          reduce using rule 98 (literal -> FALSE .)
    COLON           reduce using rule 98 (literal -> FALSE .)
    RIGHT_PAREN     reduce using rule 98 (literal -> FALSE .)
    COMMA           reduce using rule 98 (literal -> FALSE .)
    RIGHT_BOX       reduce using rule 98 (literal -> FALSE .)
    RIGHT_CURLY_BRACE reduce using rule 98 (literal -> FALSE .)



state 33

    (40) stmt_s_break -> BREAK .

    FUNCTION        reduce using rule 40 (stmt_s_break -> BREAK .)
    FOR             reduce using rule 40 (stmt_s_break -> BREAK .)
    WHILE           reduce using rule 40 (stmt_s_break -> BREAK .)
    IMPORT          reduce using rule 40 (stmt_s_break -> BREAK .)
    CONTINUE        reduce using rule 40 (stmt_s_break -> BREAK .)
    BREAK           reduce using rule 40 (stmt_s_break -> BREAK .)
    PASS            reduce using rule 40 (stmt_s_break -> BREAK .)
    RETURN          reduce using rule 40 (stmt_s_break -> BREAK .)
    LEFT_PAREN      reduce using rule 40 (stmt_s_break -> BREAK .)
    NOT_EQUALS      reduce using rule 40 (stmt_s_break -> BREAK .)
    NOT             reduce using rule 40 (stmt_s_break -> BREAK .)
    THIS            reduce using rule 40 (stmt_s_break -> BREAK .)
    IF              reduce using rule 40 (stmt_s_break -> BREAK .)
    BLANK           reduce using rule 40 (stmt_s_break -> BREAK .)
    NULL            reduce using rule 40 (stmt_s_break -> BREAK .)
    TRUE            reduce using rule 40 (stmt_s_break -> BREAK .)
    FALSE           reduce using rule 40 (stmt_s_break -> BREAK .)
    NUMERIC_LITERAL reduce using rule 40 (stmt_s_break -> BREAK .)
    MINUS           reduce using rule 40 (stmt_s_break -> BREAK .)
    IDENTIFIER      reduce using rule 40 (stmt_s_break -> BREAK .)
    LEFT_BOX        reduce using rule 40 (stmt_s_break -> BREAK .)
    LEFT_CURLY_BRACE reduce using rule 40 (stmt_s_break -> BREAK .)
    STRING_LITERAL  reduce using rule 40 (stmt_s_break -> BREAK .)
    ENDIF           reduce using rule 40 (stmt_s_break -> BREAK .)
    ELIF            reduce using rule 40 (stmt_s_break -> BREAK .)
    OTHERWISE       reduce using rule 40 (stmt_s_break -> BREAK .)
    ENDFOR          reduce using rule 40 (stmt_s_break -> BREAK .)
    ENDFUNCTION     reduce using rule 40 (stmt_s_break -> BREAK .)
    $end            reduce using rule 40 (stmt_s_break -> BREAK .)
    ENDWHILE        reduce using rule 40 (stmt_s_break -> BREAK .)



state 34

    (17) stmt_c_if_group -> stmt_c_if_F .

    ENDIF           reduce using rule 17 (stmt_c_if_group -> stmt_c_if_F .)



state 35

    (38) stmt_s_control_flow -> stmt_s_return .

    FUNCTION        reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    FOR             reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    WHILE           reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    IMPORT          reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    CONTINUE        reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    BREAK           reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    PASS            reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    RETURN          reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    LEFT_PAREN      reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    NOT_EQUALS      reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    NOT             reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    THIS            reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    IF              reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    BLANK           reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    NULL            reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    TRUE            reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    FALSE           reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    NUMERIC_LITERAL reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    MINUS           reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    IDENTIFIER      reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    LEFT_BOX        reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    LEFT_CURLY_BRACE reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    STRING_LITERAL  reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    ELIF            reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    OTHERWISE       reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    ENDIF           reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    ENDFOR          reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    ENDWHILE        reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    ENDFUNCTION     reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)
    $end            reduce using rule 38 (stmt_s_control_flow -> stmt_s_return .)



state 36

    (96) literal -> NULL .

    LEFT_BOX        reduce using rule 96 (literal -> NULL .)
    ASSIGN_EQUALS   reduce using rule 96 (literal -> NULL .)
    DOT_EQUALS      reduce using rule 96 (literal -> NULL .)
    PLUS_EQUALS     reduce using rule 96 (literal -> NULL .)
    MINUS_EQUALS    reduce using rule 96 (literal -> NULL .)
    TIMES_EQUALS    reduce using rule 96 (literal -> NULL .)
    DIVIDE_EQUALS   reduce using rule 96 (literal -> NULL .)
    MODULUS_EQUALS  reduce using rule 96 (literal -> NULL .)
    EXPONENT_EQUALS reduce using rule 96 (literal -> NULL .)
    AND_EQUALS      reduce using rule 96 (literal -> NULL .)
    OR_EQUALS       reduce using rule 96 (literal -> NULL .)
    DOT             reduce using rule 96 (literal -> NULL .)
    PLUS            reduce using rule 96 (literal -> NULL .)
    MINUS           reduce using rule 96 (literal -> NULL .)
    TIMES           reduce using rule 96 (literal -> NULL .)
    DIVIDE          reduce using rule 96 (literal -> NULL .)
    MODULUS         reduce using rule 96 (literal -> NULL .)
    EXPONENT        reduce using rule 96 (literal -> NULL .)
    AND             reduce using rule 96 (literal -> NULL .)
    OR              reduce using rule 96 (literal -> NULL .)
    IN              reduce using rule 96 (literal -> NULL .)
    HAS             reduce using rule 96 (literal -> NULL .)
    EQUIVALENCE_EQUAL reduce using rule 96 (literal -> NULL .)
    COMPARE_GT      reduce using rule 96 (literal -> NULL .)
    COMPARE_GTET    reduce using rule 96 (literal -> NULL .)
    COMPARE_LT      reduce using rule 96 (literal -> NULL .)
    COMPARE_LTET    reduce using rule 96 (literal -> NULL .)
    LEFT_PAREN      reduce using rule 96 (literal -> NULL .)
    FUNCTION        reduce using rule 96 (literal -> NULL .)
    FOR             reduce using rule 96 (literal -> NULL .)
    WHILE           reduce using rule 96 (literal -> NULL .)
    IMPORT          reduce using rule 96 (literal -> NULL .)
    CONTINUE        reduce using rule 96 (literal -> NULL .)
    BREAK           reduce using rule 96 (literal -> NULL .)
    PASS            reduce using rule 96 (literal -> NULL .)
    RETURN          reduce using rule 96 (literal -> NULL .)
    NOT_EQUALS      reduce using rule 96 (literal -> NULL .)
    NOT             reduce using rule 96 (literal -> NULL .)
    THIS            reduce using rule 96 (literal -> NULL .)
    IF              reduce using rule 96 (literal -> NULL .)
    BLANK           reduce using rule 96 (literal -> NULL .)
    NULL            reduce using rule 96 (literal -> NULL .)
    TRUE            reduce using rule 96 (literal -> NULL .)
    FALSE           reduce using rule 96 (literal -> NULL .)
    NUMERIC_LITERAL reduce using rule 96 (literal -> NULL .)
    IDENTIFIER      reduce using rule 96 (literal -> NULL .)
    LEFT_CURLY_BRACE reduce using rule 96 (literal -> NULL .)
    STRING_LITERAL  reduce using rule 96 (literal -> NULL .)
    $end            reduce using rule 96 (literal -> NULL .)
    ENDFUNCTION     reduce using rule 96 (literal -> NULL .)
    ENDWHILE        reduce using rule 96 (literal -> NULL .)
    ENDIF           reduce using rule 96 (literal -> NULL .)
    OTHERWISE       reduce using rule 96 (literal -> NULL .)
    ELIF            reduce using rule 96 (literal -> NULL .)
    ENDFOR          reduce using rule 96 (literal -> NULL .)
    COLON           reduce using rule 96 (literal -> NULL .)
    RIGHT_PAREN     reduce using rule 96 (literal -> NULL .)
    COMMA           reduce using rule 96 (literal -> NULL .)
    RIGHT_BOX       reduce using rule 96 (literal -> NULL .)
    RIGHT_CURLY_BRACE reduce using rule 96 (literal -> NULL .)



state 37

    (32) statement_simple -> stmt_s_control_flow .

    FUNCTION        reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    FOR             reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    WHILE           reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    IMPORT          reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    CONTINUE        reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    BREAK           reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    PASS            reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    RETURN          reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    LEFT_PAREN      reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    NOT_EQUALS      reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    NOT             reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    THIS            reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    IF              reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    BLANK           reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    NULL            reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    TRUE            reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    FALSE           reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    NUMERIC_LITERAL reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    MINUS           reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    IDENTIFIER      reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    LEFT_BOX        reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    LEFT_CURLY_BRACE reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    STRING_LITERAL  reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    $end            reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    ENDIF           reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    ENDFUNCTION     reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    ELIF            reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    OTHERWISE       reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    ENDWHILE        reduce using rule 32 (statement_simple -> stmt_s_control_flow .)
    ENDFOR          reduce using rule 32 (statement_simple -> stmt_s_control_flow .)



state 38

    (33) statement_simple -> stmt_s_import .

    FUNCTION        reduce using rule 33 (statement_simple -> stmt_s_import .)
    FOR             reduce using rule 33 (statement_simple -> stmt_s_import .)
    WHILE           reduce using rule 33 (statement_simple -> stmt_s_import .)
    IMPORT          reduce using rule 33 (statement_simple -> stmt_s_import .)
    CONTINUE        reduce using rule 33 (statement_simple -> stmt_s_import .)
    BREAK           reduce using rule 33 (statement_simple -> stmt_s_import .)
    PASS            reduce using rule 33 (statement_simple -> stmt_s_import .)
    RETURN          reduce using rule 33 (statement_simple -> stmt_s_import .)
    LEFT_PAREN      reduce using rule 33 (statement_simple -> stmt_s_import .)
    NOT_EQUALS      reduce using rule 33 (statement_simple -> stmt_s_import .)
    NOT             reduce using rule 33 (statement_simple -> stmt_s_import .)
    THIS            reduce using rule 33 (statement_simple -> stmt_s_import .)
    IF              reduce using rule 33 (statement_simple -> stmt_s_import .)
    BLANK           reduce using rule 33 (statement_simple -> stmt_s_import .)
    NULL            reduce using rule 33 (statement_simple -> stmt_s_import .)
    TRUE            reduce using rule 33 (statement_simple -> stmt_s_import .)
    FALSE           reduce using rule 33 (statement_simple -> stmt_s_import .)
    NUMERIC_LITERAL reduce using rule 33 (statement_simple -> stmt_s_import .)
    MINUS           reduce using rule 33 (statement_simple -> stmt_s_import .)
    IDENTIFIER      reduce using rule 33 (statement_simple -> stmt_s_import .)
    LEFT_BOX        reduce using rule 33 (statement_simple -> stmt_s_import .)
    LEFT_CURLY_BRACE reduce using rule 33 (statement_simple -> stmt_s_import .)
    STRING_LITERAL  reduce using rule 33 (statement_simple -> stmt_s_import .)
    $end            reduce using rule 33 (statement_simple -> stmt_s_import .)
    ENDIF           reduce using rule 33 (statement_simple -> stmt_s_import .)
    ENDFUNCTION     reduce using rule 33 (statement_simple -> stmt_s_import .)
    ELIF            reduce using rule 33 (statement_simple -> stmt_s_import .)
    OTHERWISE       reduce using rule 33 (statement_simple -> stmt_s_import .)
    ENDWHILE        reduce using rule 33 (statement_simple -> stmt_s_import .)
    ENDFOR          reduce using rule 33 (statement_simple -> stmt_s_import .)



state 39

    (104) object_literal -> LEFT_CURLY_BRACE . pair_list RIGHT_CURLY_BRACE
    (105) pair_list -> . epsilon
    (106) pair_list -> . key_value_pair
    (107) pair_list -> . key_value_pair COMMA pair_list
    (6) epsilon -> .
    (108) key_value_pair -> . literal_string COLON expression
    (99) literal_string -> . STRING_LITERAL

    RIGHT_CURLY_BRACE reduce using rule 6 (epsilon -> .)
    STRING_LITERAL  shift and go to state 49


    key_value_pair                 shift and go to state 97
    epsilon                        shift and go to state 100
    literal_string                 shift and go to state 98
    pair_list                      shift and go to state 99

state 40

    (37) stmt_s_control_flow -> stmt_s_pass .

    FUNCTION        reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    FOR             reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    WHILE           reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    IMPORT          reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    CONTINUE        reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    BREAK           reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    PASS            reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    RETURN          reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    LEFT_PAREN      reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    NOT_EQUALS      reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    NOT             reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    THIS            reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    IF              reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    BLANK           reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    NULL            reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    TRUE            reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    FALSE           reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    NUMERIC_LITERAL reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    MINUS           reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    IDENTIFIER      reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    LEFT_BOX        reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    LEFT_CURLY_BRACE reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    STRING_LITERAL  reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    ELIF            reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    OTHERWISE       reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    ENDIF           reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    ENDFOR          reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    ENDWHILE        reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    ENDFUNCTION     reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)
    $end            reduce using rule 37 (stmt_s_control_flow -> stmt_s_pass .)



state 41

    (92) literal -> array_literal .

    LEFT_BOX        reduce using rule 92 (literal -> array_literal .)
    ASSIGN_EQUALS   reduce using rule 92 (literal -> array_literal .)
    DOT_EQUALS      reduce using rule 92 (literal -> array_literal .)
    PLUS_EQUALS     reduce using rule 92 (literal -> array_literal .)
    MINUS_EQUALS    reduce using rule 92 (literal -> array_literal .)
    TIMES_EQUALS    reduce using rule 92 (literal -> array_literal .)
    DIVIDE_EQUALS   reduce using rule 92 (literal -> array_literal .)
    MODULUS_EQUALS  reduce using rule 92 (literal -> array_literal .)
    EXPONENT_EQUALS reduce using rule 92 (literal -> array_literal .)
    AND_EQUALS      reduce using rule 92 (literal -> array_literal .)
    OR_EQUALS       reduce using rule 92 (literal -> array_literal .)
    DOT             reduce using rule 92 (literal -> array_literal .)
    PLUS            reduce using rule 92 (literal -> array_literal .)
    MINUS           reduce using rule 92 (literal -> array_literal .)
    TIMES           reduce using rule 92 (literal -> array_literal .)
    DIVIDE          reduce using rule 92 (literal -> array_literal .)
    MODULUS         reduce using rule 92 (literal -> array_literal .)
    EXPONENT        reduce using rule 92 (literal -> array_literal .)
    AND             reduce using rule 92 (literal -> array_literal .)
    OR              reduce using rule 92 (literal -> array_literal .)
    IN              reduce using rule 92 (literal -> array_literal .)
    HAS             reduce using rule 92 (literal -> array_literal .)
    EQUIVALENCE_EQUAL reduce using rule 92 (literal -> array_literal .)
    COMPARE_GT      reduce using rule 92 (literal -> array_literal .)
    COMPARE_GTET    reduce using rule 92 (literal -> array_literal .)
    COMPARE_LT      reduce using rule 92 (literal -> array_literal .)
    COMPARE_LTET    reduce using rule 92 (literal -> array_literal .)
    LEFT_PAREN      reduce using rule 92 (literal -> array_literal .)
    FUNCTION        reduce using rule 92 (literal -> array_literal .)
    FOR             reduce using rule 92 (literal -> array_literal .)
    WHILE           reduce using rule 92 (literal -> array_literal .)
    IMPORT          reduce using rule 92 (literal -> array_literal .)
    CONTINUE        reduce using rule 92 (literal -> array_literal .)
    BREAK           reduce using rule 92 (literal -> array_literal .)
    PASS            reduce using rule 92 (literal -> array_literal .)
    RETURN          reduce using rule 92 (literal -> array_literal .)
    NOT_EQUALS      reduce using rule 92 (literal -> array_literal .)
    NOT             reduce using rule 92 (literal -> array_literal .)
    THIS            reduce using rule 92 (literal -> array_literal .)
    IF              reduce using rule 92 (literal -> array_literal .)
    BLANK           reduce using rule 92 (literal -> array_literal .)
    NULL            reduce using rule 92 (literal -> array_literal .)
    TRUE            reduce using rule 92 (literal -> array_literal .)
    FALSE           reduce using rule 92 (literal -> array_literal .)
    NUMERIC_LITERAL reduce using rule 92 (literal -> array_literal .)
    IDENTIFIER      reduce using rule 92 (literal -> array_literal .)
    LEFT_CURLY_BRACE reduce using rule 92 (literal -> array_literal .)
    STRING_LITERAL  reduce using rule 92 (literal -> array_literal .)
    $end            reduce using rule 92 (literal -> array_literal .)
    ENDFUNCTION     reduce using rule 92 (literal -> array_literal .)
    ENDWHILE        reduce using rule 92 (literal -> array_literal .)
    ENDIF           reduce using rule 92 (literal -> array_literal .)
    OTHERWISE       reduce using rule 92 (literal -> array_literal .)
    ELIF            reduce using rule 92 (literal -> array_literal .)
    ENDFOR          reduce using rule 92 (literal -> array_literal .)
    COLON           reduce using rule 92 (literal -> array_literal .)
    RIGHT_PAREN     reduce using rule 92 (literal -> array_literal .)
    COMMA           reduce using rule 92 (literal -> array_literal .)
    RIGHT_BOX       reduce using rule 92 (literal -> array_literal .)
    RIGHT_CURLY_BRACE reduce using rule 92 (literal -> array_literal .)



state 42

    (21) stmt_c_if_F -> stmt_c_if .
    (22) stmt_c_if_FO -> stmt_c_if . stmt_c_otherwise
    (23) stmt_c_if_FE -> stmt_c_if . stmt_c_elif_block
    (24) stmt_c_if_FEO -> stmt_c_if . stmt_c_elif_block stmt_c_otherwise
    (28) stmt_c_otherwise -> . OTHERWISE COLON ks
    (29) stmt_c_elif_block -> . stmt_c_elif
    (30) stmt_c_elif_block -> . stmt_c_elif stmt_c_elif_block
    (31) stmt_c_elif -> . ELIF expression COLON ks

    ENDIF           reduce using rule 21 (stmt_c_if_F -> stmt_c_if .)
    OTHERWISE       shift and go to state 105
    ELIF            shift and go to state 103


    stmt_c_elif                    shift and go to state 101
    stmt_c_elif_block              shift and go to state 102
    stmt_c_otherwise               shift and go to state 104

state 43

    (102) array_literal -> LEFT_BOX . exp_list RIGHT_BOX
    (103) array_literal -> LEFT_BOX . expression FOR expression_identifier IN expression RIGHT_BOX
    (89) exp_list -> . epsilon
    (90) exp_list -> . expression
    (91) exp_list -> . expression COMMA exp_list
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (6) epsilon -> .
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    RIGHT_BOX       reduce using rule 6 (epsilon -> .)
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    exp_list                       shift and go to state 106
    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    epsilon                        shift and go to state 107
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 108

state 44

    (19) stmt_c_if_group -> stmt_c_if_FE .

    ENDIF           reduce using rule 19 (stmt_c_if_group -> stmt_c_if_FE .)



state 45

    (18) stmt_c_if_group -> stmt_c_if_FO .

    ENDIF           reduce using rule 18 (stmt_c_if_group -> stmt_c_if_FO .)



state 46

    (27) stmt_c_if -> IF . expression COLON ks
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 109

state 47

    (3) element -> function_definition .
    (53) expression -> function_definition .

  ! reduce/reduce conflict for LEFT_BOX resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for MINUS resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for LEFT_PAREN resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for FUNCTION resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for FOR resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for WHILE resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for IMPORT resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for CONTINUE resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for BREAK resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for PASS resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for RETURN resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for NOT resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for THIS resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for IF resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for BLANK resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for NULL resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for TRUE resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for FALSE resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for NUMERIC_LITERAL resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for LEFT_CURLY_BRACE resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for STRING_LITERAL resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for ENDWHILE resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for $end resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for ELIF resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for OTHERWISE resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for ENDIF resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for ENDFUNCTION resolved using rule 3 (element -> function_definition .).
  ! reduce/reduce conflict for ENDFOR resolved using rule 3 (element -> function_definition .).
    FUNCTION        reduce using rule 3 (element -> function_definition .)
    FOR             reduce using rule 3 (element -> function_definition .)
    WHILE           reduce using rule 3 (element -> function_definition .)
    IMPORT          reduce using rule 3 (element -> function_definition .)
    CONTINUE        reduce using rule 3 (element -> function_definition .)
    BREAK           reduce using rule 3 (element -> function_definition .)
    PASS            reduce using rule 3 (element -> function_definition .)
    RETURN          reduce using rule 3 (element -> function_definition .)
    LEFT_PAREN      reduce using rule 3 (element -> function_definition .)
    NOT_EQUALS      reduce using rule 3 (element -> function_definition .)
    NOT             reduce using rule 3 (element -> function_definition .)
    THIS            reduce using rule 3 (element -> function_definition .)
    IF              reduce using rule 3 (element -> function_definition .)
    BLANK           reduce using rule 3 (element -> function_definition .)
    NULL            reduce using rule 3 (element -> function_definition .)
    TRUE            reduce using rule 3 (element -> function_definition .)
    FALSE           reduce using rule 3 (element -> function_definition .)
    NUMERIC_LITERAL reduce using rule 3 (element -> function_definition .)
    MINUS           reduce using rule 3 (element -> function_definition .)
    IDENTIFIER      reduce using rule 3 (element -> function_definition .)
    LEFT_BOX        reduce using rule 3 (element -> function_definition .)
    LEFT_CURLY_BRACE reduce using rule 3 (element -> function_definition .)
    STRING_LITERAL  reduce using rule 3 (element -> function_definition .)
    ENDFOR          reduce using rule 3 (element -> function_definition .)
    OTHERWISE       reduce using rule 3 (element -> function_definition .)
    ELIF            reduce using rule 3 (element -> function_definition .)
    ENDIF           reduce using rule 3 (element -> function_definition .)
    ENDFUNCTION     reduce using rule 3 (element -> function_definition .)
    $end            reduce using rule 3 (element -> function_definition .)
    ENDWHILE        reduce using rule 3 (element -> function_definition .)
    ASSIGN_EQUALS   reduce using rule 53 (expression -> function_definition .)
    DOT_EQUALS      reduce using rule 53 (expression -> function_definition .)
    PLUS_EQUALS     reduce using rule 53 (expression -> function_definition .)
    MINUS_EQUALS    reduce using rule 53 (expression -> function_definition .)
    TIMES_EQUALS    reduce using rule 53 (expression -> function_definition .)
    DIVIDE_EQUALS   reduce using rule 53 (expression -> function_definition .)
    MODULUS_EQUALS  reduce using rule 53 (expression -> function_definition .)
    EXPONENT_EQUALS reduce using rule 53 (expression -> function_definition .)
    AND_EQUALS      reduce using rule 53 (expression -> function_definition .)
    OR_EQUALS       reduce using rule 53 (expression -> function_definition .)
    DOT             reduce using rule 53 (expression -> function_definition .)
    PLUS            reduce using rule 53 (expression -> function_definition .)
    TIMES           reduce using rule 53 (expression -> function_definition .)
    DIVIDE          reduce using rule 53 (expression -> function_definition .)
    MODULUS         reduce using rule 53 (expression -> function_definition .)
    EXPONENT        reduce using rule 53 (expression -> function_definition .)
    AND             reduce using rule 53 (expression -> function_definition .)
    OR              reduce using rule 53 (expression -> function_definition .)
    IN              reduce using rule 53 (expression -> function_definition .)
    HAS             reduce using rule 53 (expression -> function_definition .)
    EQUIVALENCE_EQUAL reduce using rule 53 (expression -> function_definition .)
    COMPARE_GT      reduce using rule 53 (expression -> function_definition .)
    COMPARE_GTET    reduce using rule 53 (expression -> function_definition .)
    COMPARE_LT      reduce using rule 53 (expression -> function_definition .)
    COMPARE_LTET    reduce using rule 53 (expression -> function_definition .)

  ! LEFT_BOX        [ reduce using rule 53 (expression -> function_definition .) ]
  ! MINUS           [ reduce using rule 53 (expression -> function_definition .) ]
  ! LEFT_PAREN      [ reduce using rule 53 (expression -> function_definition .) ]
  ! FUNCTION        [ reduce using rule 53 (expression -> function_definition .) ]
  ! FOR             [ reduce using rule 53 (expression -> function_definition .) ]
  ! WHILE           [ reduce using rule 53 (expression -> function_definition .) ]
  ! IMPORT          [ reduce using rule 53 (expression -> function_definition .) ]
  ! CONTINUE        [ reduce using rule 53 (expression -> function_definition .) ]
  ! BREAK           [ reduce using rule 53 (expression -> function_definition .) ]
  ! PASS            [ reduce using rule 53 (expression -> function_definition .) ]
  ! RETURN          [ reduce using rule 53 (expression -> function_definition .) ]
  ! NOT_EQUALS      [ reduce using rule 53 (expression -> function_definition .) ]
  ! NOT             [ reduce using rule 53 (expression -> function_definition .) ]
  ! THIS            [ reduce using rule 53 (expression -> function_definition .) ]
  ! IF              [ reduce using rule 53 (expression -> function_definition .) ]
  ! BLANK           [ reduce using rule 53 (expression -> function_definition .) ]
  ! NULL            [ reduce using rule 53 (expression -> function_definition .) ]
  ! TRUE            [ reduce using rule 53 (expression -> function_definition .) ]
  ! FALSE           [ reduce using rule 53 (expression -> function_definition .) ]
  ! NUMERIC_LITERAL [ reduce using rule 53 (expression -> function_definition .) ]
  ! IDENTIFIER      [ reduce using rule 53 (expression -> function_definition .) ]
  ! LEFT_CURLY_BRACE [ reduce using rule 53 (expression -> function_definition .) ]
  ! STRING_LITERAL  [ reduce using rule 53 (expression -> function_definition .) ]
  ! ENDWHILE        [ reduce using rule 53 (expression -> function_definition .) ]
  ! $end            [ reduce using rule 53 (expression -> function_definition .) ]
  ! ELIF            [ reduce using rule 53 (expression -> function_definition .) ]
  ! OTHERWISE       [ reduce using rule 53 (expression -> function_definition .) ]
  ! ENDIF           [ reduce using rule 53 (expression -> function_definition .) ]
  ! ENDFUNCTION     [ reduce using rule 53 (expression -> function_definition .) ]
  ! ENDFOR          [ reduce using rule 53 (expression -> function_definition .) ]


state 48

    (5) element -> statement_simple .

    FUNCTION        reduce using rule 5 (element -> statement_simple .)
    FOR             reduce using rule 5 (element -> statement_simple .)
    WHILE           reduce using rule 5 (element -> statement_simple .)
    IMPORT          reduce using rule 5 (element -> statement_simple .)
    CONTINUE        reduce using rule 5 (element -> statement_simple .)
    BREAK           reduce using rule 5 (element -> statement_simple .)
    PASS            reduce using rule 5 (element -> statement_simple .)
    RETURN          reduce using rule 5 (element -> statement_simple .)
    LEFT_PAREN      reduce using rule 5 (element -> statement_simple .)
    NOT_EQUALS      reduce using rule 5 (element -> statement_simple .)
    NOT             reduce using rule 5 (element -> statement_simple .)
    THIS            reduce using rule 5 (element -> statement_simple .)
    IF              reduce using rule 5 (element -> statement_simple .)
    BLANK           reduce using rule 5 (element -> statement_simple .)
    NULL            reduce using rule 5 (element -> statement_simple .)
    TRUE            reduce using rule 5 (element -> statement_simple .)
    FALSE           reduce using rule 5 (element -> statement_simple .)
    NUMERIC_LITERAL reduce using rule 5 (element -> statement_simple .)
    MINUS           reduce using rule 5 (element -> statement_simple .)
    IDENTIFIER      reduce using rule 5 (element -> statement_simple .)
    LEFT_BOX        reduce using rule 5 (element -> statement_simple .)
    LEFT_CURLY_BRACE reduce using rule 5 (element -> statement_simple .)
    STRING_LITERAL  reduce using rule 5 (element -> statement_simple .)
    ENDFOR          reduce using rule 5 (element -> statement_simple .)
    OTHERWISE       reduce using rule 5 (element -> statement_simple .)
    ELIF            reduce using rule 5 (element -> statement_simple .)
    ENDIF           reduce using rule 5 (element -> statement_simple .)
    ENDFUNCTION     reduce using rule 5 (element -> statement_simple .)
    $end            reduce using rule 5 (element -> statement_simple .)
    ENDWHILE        reduce using rule 5 (element -> statement_simple .)



state 49

    (99) literal_string -> STRING_LITERAL .

    COLON           reduce using rule 99 (literal_string -> STRING_LITERAL .)
    LEFT_BOX        reduce using rule 99 (literal_string -> STRING_LITERAL .)
    ASSIGN_EQUALS   reduce using rule 99 (literal_string -> STRING_LITERAL .)
    DOT_EQUALS      reduce using rule 99 (literal_string -> STRING_LITERAL .)
    PLUS_EQUALS     reduce using rule 99 (literal_string -> STRING_LITERAL .)
    MINUS_EQUALS    reduce using rule 99 (literal_string -> STRING_LITERAL .)
    TIMES_EQUALS    reduce using rule 99 (literal_string -> STRING_LITERAL .)
    DIVIDE_EQUALS   reduce using rule 99 (literal_string -> STRING_LITERAL .)
    MODULUS_EQUALS  reduce using rule 99 (literal_string -> STRING_LITERAL .)
    EXPONENT_EQUALS reduce using rule 99 (literal_string -> STRING_LITERAL .)
    AND_EQUALS      reduce using rule 99 (literal_string -> STRING_LITERAL .)
    OR_EQUALS       reduce using rule 99 (literal_string -> STRING_LITERAL .)
    DOT             reduce using rule 99 (literal_string -> STRING_LITERAL .)
    PLUS            reduce using rule 99 (literal_string -> STRING_LITERAL .)
    MINUS           reduce using rule 99 (literal_string -> STRING_LITERAL .)
    TIMES           reduce using rule 99 (literal_string -> STRING_LITERAL .)
    DIVIDE          reduce using rule 99 (literal_string -> STRING_LITERAL .)
    MODULUS         reduce using rule 99 (literal_string -> STRING_LITERAL .)
    EXPONENT        reduce using rule 99 (literal_string -> STRING_LITERAL .)
    AND             reduce using rule 99 (literal_string -> STRING_LITERAL .)
    OR              reduce using rule 99 (literal_string -> STRING_LITERAL .)
    IN              reduce using rule 99 (literal_string -> STRING_LITERAL .)
    HAS             reduce using rule 99 (literal_string -> STRING_LITERAL .)
    EQUIVALENCE_EQUAL reduce using rule 99 (literal_string -> STRING_LITERAL .)
    COMPARE_GT      reduce using rule 99 (literal_string -> STRING_LITERAL .)
    COMPARE_GTET    reduce using rule 99 (literal_string -> STRING_LITERAL .)
    COMPARE_LT      reduce using rule 99 (literal_string -> STRING_LITERAL .)
    COMPARE_LTET    reduce using rule 99 (literal_string -> STRING_LITERAL .)
    LEFT_PAREN      reduce using rule 99 (literal_string -> STRING_LITERAL .)
    FUNCTION        reduce using rule 99 (literal_string -> STRING_LITERAL .)
    FOR             reduce using rule 99 (literal_string -> STRING_LITERAL .)
    WHILE           reduce using rule 99 (literal_string -> STRING_LITERAL .)
    IMPORT          reduce using rule 99 (literal_string -> STRING_LITERAL .)
    CONTINUE        reduce using rule 99 (literal_string -> STRING_LITERAL .)
    BREAK           reduce using rule 99 (literal_string -> STRING_LITERAL .)
    PASS            reduce using rule 99 (literal_string -> STRING_LITERAL .)
    RETURN          reduce using rule 99 (literal_string -> STRING_LITERAL .)
    NOT_EQUALS      reduce using rule 99 (literal_string -> STRING_LITERAL .)
    NOT             reduce using rule 99 (literal_string -> STRING_LITERAL .)
    THIS            reduce using rule 99 (literal_string -> STRING_LITERAL .)
    IF              reduce using rule 99 (literal_string -> STRING_LITERAL .)
    BLANK           reduce using rule 99 (literal_string -> STRING_LITERAL .)
    NULL            reduce using rule 99 (literal_string -> STRING_LITERAL .)
    TRUE            reduce using rule 99 (literal_string -> STRING_LITERAL .)
    FALSE           reduce using rule 99 (literal_string -> STRING_LITERAL .)
    NUMERIC_LITERAL reduce using rule 99 (literal_string -> STRING_LITERAL .)
    IDENTIFIER      reduce using rule 99 (literal_string -> STRING_LITERAL .)
    LEFT_CURLY_BRACE reduce using rule 99 (literal_string -> STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 99 (literal_string -> STRING_LITERAL .)
    OTHERWISE       reduce using rule 99 (literal_string -> STRING_LITERAL .)
    ELIF            reduce using rule 99 (literal_string -> STRING_LITERAL .)
    ENDIF           reduce using rule 99 (literal_string -> STRING_LITERAL .)
    $end            reduce using rule 99 (literal_string -> STRING_LITERAL .)
    ENDFUNCTION     reduce using rule 99 (literal_string -> STRING_LITERAL .)
    ENDWHILE        reduce using rule 99 (literal_string -> STRING_LITERAL .)
    ENDFOR          reduce using rule 99 (literal_string -> STRING_LITERAL .)
    RIGHT_PAREN     reduce using rule 99 (literal_string -> STRING_LITERAL .)
    COMMA           reduce using rule 99 (literal_string -> STRING_LITERAL .)
    RIGHT_BOX       reduce using rule 99 (literal_string -> STRING_LITERAL .)
    RIGHT_CURLY_BRACE reduce using rule 99 (literal_string -> STRING_LITERAL .)



state 50

    (1) ks -> element . ks
    (1) ks -> . element ks
    (2) ks -> . epsilon
    (3) element -> . function_definition
    (4) element -> . statement_compound
    (5) element -> . statement_simple
    (6) epsilon -> .
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (14) statement_compound -> . stmt_c_for
    (15) statement_compound -> . stmt_c_while
    (16) statement_compound -> . stmt_c_if_group ENDIF
    (32) statement_simple -> . stmt_s_control_flow
    (33) statement_simple -> . stmt_s_import
    (34) statement_simple -> . stmt_s_expression
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (25) stmt_c_for -> . FOR expression_identifier IN expression COLON ks ENDFOR
    (26) stmt_c_while -> . WHILE expression COLON ks ENDWHILE
    (17) stmt_c_if_group -> . stmt_c_if_F
    (18) stmt_c_if_group -> . stmt_c_if_FO
    (19) stmt_c_if_group -> . stmt_c_if_FE
    (20) stmt_c_if_group -> . stmt_c_if_FEO
    (35) stmt_s_control_flow -> . stmt_s_continue
    (36) stmt_s_control_flow -> . stmt_s_break
    (37) stmt_s_control_flow -> . stmt_s_pass
    (38) stmt_s_control_flow -> . stmt_s_return
    (44) stmt_s_import -> . IMPORT dotted_identifier
    (51) stmt_s_expression -> . expression
    (21) stmt_c_if_F -> . stmt_c_if
    (22) stmt_c_if_FO -> . stmt_c_if stmt_c_otherwise
    (23) stmt_c_if_FE -> . stmt_c_if stmt_c_elif_block
    (24) stmt_c_if_FEO -> . stmt_c_if stmt_c_elif_block stmt_c_otherwise
    (39) stmt_s_continue -> . CONTINUE
    (40) stmt_s_break -> . BREAK
    (41) stmt_s_pass -> . PASS
    (42) stmt_s_return -> . RETURN expression
    (43) stmt_s_return -> . RETURN
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (27) stmt_c_if -> . IF expression COLON ks
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL

    $end            reduce using rule 6 (epsilon -> .)
    ENDFUNCTION     reduce using rule 6 (epsilon -> .)
    ENDWHILE        reduce using rule 6 (epsilon -> .)
    ENDIF           reduce using rule 6 (epsilon -> .)
    OTHERWISE       reduce using rule 6 (epsilon -> .)
    ELIF            reduce using rule 6 (epsilon -> .)
    ENDFOR          reduce using rule 6 (epsilon -> .)
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 23
    IMPORT          shift and go to state 6
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 33
    PASS            shift and go to state 8
    RETURN          shift and go to state 12
    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    IF              shift and go to state 46
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    stmt_c_for                     shift and go to state 22
    stmt_c_while                   shift and go to state 2
    stmt_s_return                  shift and go to state 35
    stmt_c_if_group                shift and go to state 13
    stmt_s_control_flow            shift and go to state 37
    stmt_s_import                  shift and go to state 38
    literal                        shift and go to state 25
    function_anonymous             shift and go to state 26
    stmt_s_pass                    shift and go to state 40
    epsilon                        shift and go to state 28
    stmt_s_continue                shift and go to state 29
    stmt_c_if_FEO                  shift and go to state 7
    literal_string                 shift and go to state 30
    array_literal                  shift and go to state 41
    stmt_c_if                      shift and go to state 42
    stmt_c_if_FE                   shift and go to state 44
    statement_compound             shift and go to state 31
    stmt_c_if_FO                   shift and go to state 45
    stmt_s_expression              shift and go to state 9
    function_definition            shift and go to state 47
    statement_simple               shift and go to state 48
    expression                     shift and go to state 21
    object_literal                 shift and go to state 18
    element                        shift and go to state 50
    ks                             shift and go to state 110
    stmt_s_break                   shift and go to state 11
    stmt_c_if_F                    shift and go to state 34

state 51

    (0) S' -> ks .




state 52

    (101) literal -> MINUS NUMERIC_LITERAL .

    LEFT_BOX        reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    ASSIGN_EQUALS   reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    DOT_EQUALS      reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    PLUS_EQUALS     reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    MINUS_EQUALS    reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    TIMES_EQUALS    reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    DIVIDE_EQUALS   reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    MODULUS_EQUALS  reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    EXPONENT_EQUALS reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    AND_EQUALS      reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    OR_EQUALS       reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    DOT             reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    PLUS            reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    MINUS           reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    TIMES           reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    DIVIDE          reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    MODULUS         reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    EXPONENT        reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    AND             reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    OR              reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    IN              reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    HAS             reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    EQUIVALENCE_EQUAL reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    COMPARE_GT      reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    COMPARE_GTET    reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    COMPARE_LT      reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    COMPARE_LTET    reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    LEFT_PAREN      reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    FUNCTION        reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    FOR             reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    WHILE           reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    IMPORT          reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    CONTINUE        reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    BREAK           reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    PASS            reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    RETURN          reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    NOT_EQUALS      reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    NOT             reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    THIS            reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    IF              reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    BLANK           reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    NULL            reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    TRUE            reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    FALSE           reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    NUMERIC_LITERAL reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    IDENTIFIER      reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    LEFT_CURLY_BRACE reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    STRING_LITERAL  reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    $end            reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    ENDFUNCTION     reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    ENDWHILE        reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    ENDIF           reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    OTHERWISE       reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    ELIF            reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    ENDFOR          reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    COLON           reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    RIGHT_PAREN     reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    COMMA           reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    RIGHT_BOX       reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)
    RIGHT_CURLY_BRACE reduce using rule 101 (literal -> MINUS NUMERIC_LITERAL .)



state 53

    (53) expression -> function_definition .

    LEFT_BOX        reduce using rule 53 (expression -> function_definition .)
    ASSIGN_EQUALS   reduce using rule 53 (expression -> function_definition .)
    DOT_EQUALS      reduce using rule 53 (expression -> function_definition .)
    PLUS_EQUALS     reduce using rule 53 (expression -> function_definition .)
    MINUS_EQUALS    reduce using rule 53 (expression -> function_definition .)
    TIMES_EQUALS    reduce using rule 53 (expression -> function_definition .)
    DIVIDE_EQUALS   reduce using rule 53 (expression -> function_definition .)
    MODULUS_EQUALS  reduce using rule 53 (expression -> function_definition .)
    EXPONENT_EQUALS reduce using rule 53 (expression -> function_definition .)
    AND_EQUALS      reduce using rule 53 (expression -> function_definition .)
    OR_EQUALS       reduce using rule 53 (expression -> function_definition .)
    DOT             reduce using rule 53 (expression -> function_definition .)
    PLUS            reduce using rule 53 (expression -> function_definition .)
    MINUS           reduce using rule 53 (expression -> function_definition .)
    TIMES           reduce using rule 53 (expression -> function_definition .)
    DIVIDE          reduce using rule 53 (expression -> function_definition .)
    MODULUS         reduce using rule 53 (expression -> function_definition .)
    EXPONENT        reduce using rule 53 (expression -> function_definition .)
    AND             reduce using rule 53 (expression -> function_definition .)
    OR              reduce using rule 53 (expression -> function_definition .)
    IN              reduce using rule 53 (expression -> function_definition .)
    HAS             reduce using rule 53 (expression -> function_definition .)
    EQUIVALENCE_EQUAL reduce using rule 53 (expression -> function_definition .)
    COMPARE_GT      reduce using rule 53 (expression -> function_definition .)
    COMPARE_GTET    reduce using rule 53 (expression -> function_definition .)
    COMPARE_LT      reduce using rule 53 (expression -> function_definition .)
    COMPARE_LTET    reduce using rule 53 (expression -> function_definition .)
    LEFT_PAREN      reduce using rule 53 (expression -> function_definition .)
    FUNCTION        reduce using rule 53 (expression -> function_definition .)
    FOR             reduce using rule 53 (expression -> function_definition .)
    WHILE           reduce using rule 53 (expression -> function_definition .)
    IMPORT          reduce using rule 53 (expression -> function_definition .)
    CONTINUE        reduce using rule 53 (expression -> function_definition .)
    BREAK           reduce using rule 53 (expression -> function_definition .)
    PASS            reduce using rule 53 (expression -> function_definition .)
    RETURN          reduce using rule 53 (expression -> function_definition .)
    NOT_EQUALS      reduce using rule 53 (expression -> function_definition .)
    NOT             reduce using rule 53 (expression -> function_definition .)
    THIS            reduce using rule 53 (expression -> function_definition .)
    IF              reduce using rule 53 (expression -> function_definition .)
    BLANK           reduce using rule 53 (expression -> function_definition .)
    NULL            reduce using rule 53 (expression -> function_definition .)
    TRUE            reduce using rule 53 (expression -> function_definition .)
    FALSE           reduce using rule 53 (expression -> function_definition .)
    NUMERIC_LITERAL reduce using rule 53 (expression -> function_definition .)
    IDENTIFIER      reduce using rule 53 (expression -> function_definition .)
    LEFT_CURLY_BRACE reduce using rule 53 (expression -> function_definition .)
    STRING_LITERAL  reduce using rule 53 (expression -> function_definition .)
    $end            reduce using rule 53 (expression -> function_definition .)
    ENDFUNCTION     reduce using rule 53 (expression -> function_definition .)
    ENDWHILE        reduce using rule 53 (expression -> function_definition .)
    ENDIF           reduce using rule 53 (expression -> function_definition .)
    OTHERWISE       reduce using rule 53 (expression -> function_definition .)
    ELIF            reduce using rule 53 (expression -> function_definition .)
    ENDFOR          reduce using rule 53 (expression -> function_definition .)
    COLON           reduce using rule 53 (expression -> function_definition .)
    RIGHT_PAREN     reduce using rule 53 (expression -> function_definition .)
    COMMA           reduce using rule 53 (expression -> function_definition .)
    RIGHT_BOX       reduce using rule 53 (expression -> function_definition .)
    RIGHT_CURLY_BRACE reduce using rule 53 (expression -> function_definition .)



state 54

    (55) expression -> NOT_EQUALS expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    FUNCTION        reduce using rule 55 (expression -> NOT_EQUALS expression .)
    FOR             reduce using rule 55 (expression -> NOT_EQUALS expression .)
    WHILE           reduce using rule 55 (expression -> NOT_EQUALS expression .)
    IMPORT          reduce using rule 55 (expression -> NOT_EQUALS expression .)
    CONTINUE        reduce using rule 55 (expression -> NOT_EQUALS expression .)
    BREAK           reduce using rule 55 (expression -> NOT_EQUALS expression .)
    PASS            reduce using rule 55 (expression -> NOT_EQUALS expression .)
    RETURN          reduce using rule 55 (expression -> NOT_EQUALS expression .)
    NOT_EQUALS      reduce using rule 55 (expression -> NOT_EQUALS expression .)
    NOT             reduce using rule 55 (expression -> NOT_EQUALS expression .)
    THIS            reduce using rule 55 (expression -> NOT_EQUALS expression .)
    IF              reduce using rule 55 (expression -> NOT_EQUALS expression .)
    BLANK           reduce using rule 55 (expression -> NOT_EQUALS expression .)
    NULL            reduce using rule 55 (expression -> NOT_EQUALS expression .)
    TRUE            reduce using rule 55 (expression -> NOT_EQUALS expression .)
    FALSE           reduce using rule 55 (expression -> NOT_EQUALS expression .)
    NUMERIC_LITERAL reduce using rule 55 (expression -> NOT_EQUALS expression .)
    IDENTIFIER      reduce using rule 55 (expression -> NOT_EQUALS expression .)
    LEFT_CURLY_BRACE reduce using rule 55 (expression -> NOT_EQUALS expression .)
    STRING_LITERAL  reduce using rule 55 (expression -> NOT_EQUALS expression .)
    ENDWHILE        reduce using rule 55 (expression -> NOT_EQUALS expression .)
    $end            reduce using rule 55 (expression -> NOT_EQUALS expression .)
    ENDFUNCTION     reduce using rule 55 (expression -> NOT_EQUALS expression .)
    ENDIF           reduce using rule 55 (expression -> NOT_EQUALS expression .)
    OTHERWISE       reduce using rule 55 (expression -> NOT_EQUALS expression .)
    ELIF            reduce using rule 55 (expression -> NOT_EQUALS expression .)
    ENDFOR          reduce using rule 55 (expression -> NOT_EQUALS expression .)
    COLON           reduce using rule 55 (expression -> NOT_EQUALS expression .)
    RIGHT_PAREN     reduce using rule 55 (expression -> NOT_EQUALS expression .)
    COMMA           reduce using rule 55 (expression -> NOT_EQUALS expression .)
    RIGHT_BOX       reduce using rule 55 (expression -> NOT_EQUALS expression .)
    RIGHT_CURLY_BRACE reduce using rule 55 (expression -> NOT_EQUALS expression .)
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! ASSIGN_EQUALS   [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! DOT_EQUALS      [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! PLUS_EQUALS     [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! MINUS_EQUALS    [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! TIMES_EQUALS    [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! DIVIDE_EQUALS   [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! MODULUS_EQUALS  [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! EXPONENT_EQUALS [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! AND_EQUALS      [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! OR_EQUALS       [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! DOT             [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! PLUS            [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! TIMES           [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! MODULUS         [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! EXPONENT        [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! AND             [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! OR              [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! IN              [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! HAS             [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! EQUIVALENCE_EQUAL [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! COMPARE_GT      [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! COMPARE_GTET    [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! COMPARE_LT      [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! COMPARE_LTET    [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]
  ! LEFT_PAREN      [ reduce using rule 55 (expression -> NOT_EQUALS expression .) ]


state 55

    (47) dotted_identifier_something -> expression_identifier .
    (48) dotted_identifier_something -> expression_identifier . DOT dotted_identifier_something

  ! shift/reduce conflict for DOT resolved as shift.
    FUNCTION        reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    FOR             reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    WHILE           reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    IMPORT          reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    CONTINUE        reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    BREAK           reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    PASS            reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    RETURN          reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    LEFT_PAREN      reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    NOT_EQUALS      reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    NOT             reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    THIS            reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    IF              reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    BLANK           reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    NULL            reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    TRUE            reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    FALSE           reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    NUMERIC_LITERAL reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    MINUS           reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    IDENTIFIER      reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    LEFT_BOX        reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    LEFT_CURLY_BRACE reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    STRING_LITERAL  reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    $end            reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    ENDFUNCTION     reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    ENDWHILE        reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    ENDIF           reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    OTHERWISE       reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    ELIF            reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    ENDFOR          reduce using rule 47 (dotted_identifier_something -> expression_identifier .)
    DOT             shift and go to state 111

  ! DOT             [ reduce using rule 47 (dotted_identifier_something -> expression_identifier .) ]


state 56

    (44) stmt_s_import -> IMPORT dotted_identifier .

    FUNCTION        reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    FOR             reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    WHILE           reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    IMPORT          reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    CONTINUE        reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    BREAK           reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    PASS            reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    RETURN          reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    LEFT_PAREN      reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    NOT_EQUALS      reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    NOT             reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    THIS            reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    IF              reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    BLANK           reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    NULL            reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    TRUE            reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    FALSE           reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    NUMERIC_LITERAL reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    MINUS           reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    IDENTIFIER      reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    LEFT_BOX        reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    LEFT_CURLY_BRACE reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    STRING_LITERAL  reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    $end            reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    ENDFUNCTION     reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    ENDIF           reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    ENDWHILE        reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    OTHERWISE       reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    ELIF            reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)
    ENDFOR          reduce using rule 44 (stmt_s_import -> IMPORT dotted_identifier .)



state 57

    (45) dotted_identifier -> dotted_identifier_something .
    (50) dotted_identifier_everything -> dotted_identifier_something . DOT TIMES

    FUNCTION        reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    FOR             reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    WHILE           reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    IMPORT          reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    CONTINUE        reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    BREAK           reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    PASS            reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    RETURN          reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    LEFT_PAREN      reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    NOT_EQUALS      reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    NOT             reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    THIS            reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    IF              reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    BLANK           reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    NULL            reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    TRUE            reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    FALSE           reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    NUMERIC_LITERAL reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    MINUS           reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    IDENTIFIER      reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    LEFT_BOX        reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    LEFT_CURLY_BRACE reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    STRING_LITERAL  reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    $end            reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    ENDFUNCTION     reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    ENDWHILE        reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    ENDIF           reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    OTHERWISE       reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    ELIF            reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    ENDFOR          reduce using rule 45 (dotted_identifier -> dotted_identifier_something .)
    DOT             shift and go to state 112



state 58

    (49) dotted_identifier_everything -> TIMES .

    FUNCTION        reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    FOR             reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    WHILE           reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    IMPORT          reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    CONTINUE        reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    BREAK           reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    PASS            reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    RETURN          reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    LEFT_PAREN      reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    NOT_EQUALS      reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    NOT             reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    THIS            reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    IF              reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    BLANK           reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    NULL            reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    TRUE            reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    FALSE           reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    NUMERIC_LITERAL reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    MINUS           reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    IDENTIFIER      reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    LEFT_BOX        reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    LEFT_CURLY_BRACE reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    STRING_LITERAL  reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    $end            reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    ENDFUNCTION     reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    ENDWHILE        reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    ENDIF           reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    OTHERWISE       reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    ELIF            reduce using rule 49 (dotted_identifier_everything -> TIMES .)
    ENDFOR          reduce using rule 49 (dotted_identifier_everything -> TIMES .)



state 59

    (46) dotted_identifier -> dotted_identifier_everything .

    FUNCTION        reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    FOR             reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    WHILE           reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    IMPORT          reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    CONTINUE        reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    BREAK           reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    PASS            reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    RETURN          reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    LEFT_PAREN      reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    NOT_EQUALS      reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    NOT             reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    THIS            reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    IF              reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    BLANK           reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    NULL            reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    TRUE            reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    FALSE           reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    NUMERIC_LITERAL reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    MINUS           reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    IDENTIFIER      reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    LEFT_BOX        reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    LEFT_CURLY_BRACE reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    STRING_LITERAL  reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    $end            reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    ENDFUNCTION     reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    ENDWHILE        reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    ENDIF           reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    OTHERWISE       reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    ELIF            reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)
    ENDFOR          reduce using rule 46 (dotted_identifier -> dotted_identifier_everything .)



state 60

    (42) stmt_s_return -> RETURN expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

  ! shift/reduce conflict for LEFT_BOX resolved as shift.
  ! shift/reduce conflict for MINUS resolved as shift.
  ! shift/reduce conflict for LEFT_PAREN resolved as shift.
    FUNCTION        reduce using rule 42 (stmt_s_return -> RETURN expression .)
    FOR             reduce using rule 42 (stmt_s_return -> RETURN expression .)
    WHILE           reduce using rule 42 (stmt_s_return -> RETURN expression .)
    IMPORT          reduce using rule 42 (stmt_s_return -> RETURN expression .)
    CONTINUE        reduce using rule 42 (stmt_s_return -> RETURN expression .)
    BREAK           reduce using rule 42 (stmt_s_return -> RETURN expression .)
    PASS            reduce using rule 42 (stmt_s_return -> RETURN expression .)
    RETURN          reduce using rule 42 (stmt_s_return -> RETURN expression .)
    NOT_EQUALS      reduce using rule 42 (stmt_s_return -> RETURN expression .)
    NOT             reduce using rule 42 (stmt_s_return -> RETURN expression .)
    THIS            reduce using rule 42 (stmt_s_return -> RETURN expression .)
    IF              reduce using rule 42 (stmt_s_return -> RETURN expression .)
    BLANK           reduce using rule 42 (stmt_s_return -> RETURN expression .)
    NULL            reduce using rule 42 (stmt_s_return -> RETURN expression .)
    TRUE            reduce using rule 42 (stmt_s_return -> RETURN expression .)
    FALSE           reduce using rule 42 (stmt_s_return -> RETURN expression .)
    NUMERIC_LITERAL reduce using rule 42 (stmt_s_return -> RETURN expression .)
    IDENTIFIER      reduce using rule 42 (stmt_s_return -> RETURN expression .)
    LEFT_CURLY_BRACE reduce using rule 42 (stmt_s_return -> RETURN expression .)
    STRING_LITERAL  reduce using rule 42 (stmt_s_return -> RETURN expression .)
    ENDIF           reduce using rule 42 (stmt_s_return -> RETURN expression .)
    ENDFUNCTION     reduce using rule 42 (stmt_s_return -> RETURN expression .)
    ENDWHILE        reduce using rule 42 (stmt_s_return -> RETURN expression .)
    OTHERWISE       reduce using rule 42 (stmt_s_return -> RETURN expression .)
    ELIF            reduce using rule 42 (stmt_s_return -> RETURN expression .)
    ENDFOR          reduce using rule 42 (stmt_s_return -> RETURN expression .)
    $end            reduce using rule 42 (stmt_s_return -> RETURN expression .)
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76

  ! LEFT_PAREN      [ reduce using rule 42 (stmt_s_return -> RETURN expression .) ]
  ! MINUS           [ reduce using rule 42 (stmt_s_return -> RETURN expression .) ]
  ! LEFT_BOX        [ reduce using rule 42 (stmt_s_return -> RETURN expression .) ]


state 61

    (16) statement_compound -> stmt_c_if_group ENDIF .

    FUNCTION        reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    FOR             reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    WHILE           reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    IMPORT          reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    CONTINUE        reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    BREAK           reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    PASS            reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    RETURN          reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    LEFT_PAREN      reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    NOT_EQUALS      reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    NOT             reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    THIS            reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    IF              reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    BLANK           reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    NULL            reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    TRUE            reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    FALSE           reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    NUMERIC_LITERAL reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    MINUS           reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    IDENTIFIER      reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    LEFT_BOX        reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    LEFT_CURLY_BRACE reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    STRING_LITERAL  reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    ENDIF           reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    ENDFOR          reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    OTHERWISE       reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    ELIF            reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    $end            reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    ENDFUNCTION     reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)
    ENDWHILE        reduce using rule 16 (statement_compound -> stmt_c_if_group ENDIF .)



state 62

    (7) function_definition -> FUNCTION expression_identifier . parameters COLON ks ENDFUNCTION
    (10) parameters -> . LEFT_PAREN param_list RIGHT_PAREN

    LEFT_PAREN      shift and go to state 64


    parameters                     shift and go to state 113

state 63

    (9) function_anonymous -> FUNCTION parameters . COLON ks ENDFUNCTION

    COLON           shift and go to state 114



state 64

    (10) parameters -> LEFT_PAREN . param_list RIGHT_PAREN
    (11) param_list -> . epsilon
    (12) param_list -> . expression_identifier
    (13) param_list -> . expression_identifier COMMA param_list
    (6) epsilon -> .
    (86) expression_identifier -> . IDENTIFIER

    RIGHT_PAREN     reduce using rule 6 (epsilon -> .)
    IDENTIFIER      shift and go to state 27


    param_list                     shift and go to state 116
    epsilon                        shift and go to state 117
    expression_identifier          shift and go to state 115

state 65

    (25) stmt_c_for -> FOR expression_identifier . IN expression COLON ks ENDFOR

    IN              shift and go to state 118



state 66

    (56) expression -> NOT expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    ASSIGN_EQUALS   reduce using rule 56 (expression -> NOT expression .)
    DOT_EQUALS      reduce using rule 56 (expression -> NOT expression .)
    PLUS_EQUALS     reduce using rule 56 (expression -> NOT expression .)
    MINUS_EQUALS    reduce using rule 56 (expression -> NOT expression .)
    TIMES_EQUALS    reduce using rule 56 (expression -> NOT expression .)
    DIVIDE_EQUALS   reduce using rule 56 (expression -> NOT expression .)
    MODULUS_EQUALS  reduce using rule 56 (expression -> NOT expression .)
    EXPONENT_EQUALS reduce using rule 56 (expression -> NOT expression .)
    AND_EQUALS      reduce using rule 56 (expression -> NOT expression .)
    OR_EQUALS       reduce using rule 56 (expression -> NOT expression .)
    PLUS            reduce using rule 56 (expression -> NOT expression .)
    MINUS           reduce using rule 56 (expression -> NOT expression .)
    TIMES           reduce using rule 56 (expression -> NOT expression .)
    DIVIDE          reduce using rule 56 (expression -> NOT expression .)
    MODULUS         reduce using rule 56 (expression -> NOT expression .)
    EXPONENT        reduce using rule 56 (expression -> NOT expression .)
    AND             reduce using rule 56 (expression -> NOT expression .)
    OR              reduce using rule 56 (expression -> NOT expression .)
    IN              reduce using rule 56 (expression -> NOT expression .)
    HAS             reduce using rule 56 (expression -> NOT expression .)
    EQUIVALENCE_EQUAL reduce using rule 56 (expression -> NOT expression .)
    COMPARE_GT      reduce using rule 56 (expression -> NOT expression .)
    COMPARE_GTET    reduce using rule 56 (expression -> NOT expression .)
    COMPARE_LT      reduce using rule 56 (expression -> NOT expression .)
    COMPARE_LTET    reduce using rule 56 (expression -> NOT expression .)
    FUNCTION        reduce using rule 56 (expression -> NOT expression .)
    FOR             reduce using rule 56 (expression -> NOT expression .)
    WHILE           reduce using rule 56 (expression -> NOT expression .)
    IMPORT          reduce using rule 56 (expression -> NOT expression .)
    CONTINUE        reduce using rule 56 (expression -> NOT expression .)
    BREAK           reduce using rule 56 (expression -> NOT expression .)
    PASS            reduce using rule 56 (expression -> NOT expression .)
    RETURN          reduce using rule 56 (expression -> NOT expression .)
    NOT_EQUALS      reduce using rule 56 (expression -> NOT expression .)
    NOT             reduce using rule 56 (expression -> NOT expression .)
    THIS            reduce using rule 56 (expression -> NOT expression .)
    IF              reduce using rule 56 (expression -> NOT expression .)
    BLANK           reduce using rule 56 (expression -> NOT expression .)
    NULL            reduce using rule 56 (expression -> NOT expression .)
    TRUE            reduce using rule 56 (expression -> NOT expression .)
    FALSE           reduce using rule 56 (expression -> NOT expression .)
    NUMERIC_LITERAL reduce using rule 56 (expression -> NOT expression .)
    IDENTIFIER      reduce using rule 56 (expression -> NOT expression .)
    LEFT_CURLY_BRACE reduce using rule 56 (expression -> NOT expression .)
    STRING_LITERAL  reduce using rule 56 (expression -> NOT expression .)
    ENDWHILE        reduce using rule 56 (expression -> NOT expression .)
    $end            reduce using rule 56 (expression -> NOT expression .)
    ENDFUNCTION     reduce using rule 56 (expression -> NOT expression .)
    ENDIF           reduce using rule 56 (expression -> NOT expression .)
    OTHERWISE       reduce using rule 56 (expression -> NOT expression .)
    ELIF            reduce using rule 56 (expression -> NOT expression .)
    ENDFOR          reduce using rule 56 (expression -> NOT expression .)
    COLON           reduce using rule 56 (expression -> NOT expression .)
    RIGHT_PAREN     reduce using rule 56 (expression -> NOT expression .)
    COMMA           reduce using rule 56 (expression -> NOT expression .)
    RIGHT_BOX       reduce using rule 56 (expression -> NOT expression .)
    RIGHT_CURLY_BRACE reduce using rule 56 (expression -> NOT expression .)
    LEFT_BOX        shift and go to state 85
    DOT             shift and go to state 72
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 56 (expression -> NOT expression .) ]
  ! DOT             [ reduce using rule 56 (expression -> NOT expression .) ]
  ! LEFT_PAREN      [ reduce using rule 56 (expression -> NOT expression .) ]
  ! ASSIGN_EQUALS   [ shift and go to state 90 ]
  ! DOT_EQUALS      [ shift and go to state 67 ]
  ! PLUS_EQUALS     [ shift and go to state 89 ]
  ! MINUS_EQUALS    [ shift and go to state 73 ]
  ! TIMES_EQUALS    [ shift and go to state 81 ]
  ! DIVIDE_EQUALS   [ shift and go to state 91 ]
  ! MODULUS_EQUALS  [ shift and go to state 79 ]
  ! EXPONENT_EQUALS [ shift and go to state 93 ]
  ! AND_EQUALS      [ shift and go to state 83 ]
  ! OR_EQUALS       [ shift and go to state 84 ]
  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 71 ]
  ! TIMES           [ shift and go to state 87 ]
  ! DIVIDE          [ shift and go to state 80 ]
  ! MODULUS         [ shift and go to state 88 ]
  ! EXPONENT        [ shift and go to state 75 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 94 ]
  ! IN              [ shift and go to state 86 ]
  ! HAS             [ shift and go to state 74 ]
  ! EQUIVALENCE_EQUAL [ shift and go to state 68 ]
  ! COMPARE_GT      [ shift and go to state 70 ]
  ! COMPARE_GTET    [ shift and go to state 92 ]
  ! COMPARE_LT      [ shift and go to state 82 ]
  ! COMPARE_LTET    [ shift and go to state 69 ]


state 67

    (60) expression -> expression DOT_EQUALS . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 119

state 68

    (80) expression -> expression EQUIVALENCE_EQUAL . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 120

state 69

    (84) expression -> expression COMPARE_LTET . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 121

state 70

    (81) expression -> expression COMPARE_GT . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 122

state 71

    (71) expression -> expression MINUS . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 123

state 72

    (69) expression -> expression DOT . expression_identifier
    (86) expression_identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 27


    expression_identifier          shift and go to state 124

state 73

    (62) expression -> expression MINUS_EQUALS . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 125

state 74

    (79) expression -> expression HAS . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 126

state 75

    (75) expression -> expression EXPONENT . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 127

state 76

    (88) expression -> expression LEFT_PAREN . exp_list RIGHT_PAREN
    (89) exp_list -> . epsilon
    (90) exp_list -> . expression
    (91) exp_list -> . expression COMMA exp_list
    (6) epsilon -> .
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    RIGHT_PAREN     reduce using rule 6 (epsilon -> .)
    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    exp_list                       shift and go to state 128
    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    epsilon                        shift and go to state 107
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 129

state 77

    (70) expression -> expression PLUS . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 130

state 78

    (76) expression -> expression AND . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 131

state 79

    (65) expression -> expression MODULUS_EQUALS . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 132

state 80

    (73) expression -> expression DIVIDE . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 133

state 81

    (63) expression -> expression TIMES_EQUALS . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 134

state 82

    (83) expression -> expression COMPARE_LT . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 135

state 83

    (67) expression -> expression AND_EQUALS . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 136

state 84

    (68) expression -> expression OR_EQUALS . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 137

state 85

    (57) expression -> expression LEFT_BOX . array_operator_insides RIGHT_BOX
    (58) expression -> expression LEFT_BOX . array_operator_missing RIGHT_BOX
    (109) array_operator_insides -> . expression
    (110) array_operator_insides -> . expression COLON expression
    (111) array_operator_insides -> . expression COLON expression COLON expression
    (112) array_operator_missing -> . expression COLON
    (113) array_operator_missing -> . COLON expression
    (114) array_operator_missing -> . COLON
    (115) array_operator_missing -> . expression COLON COLON expression
    (116) array_operator_missing -> . COLON expression COLON expression
    (117) array_operator_missing -> . COLON COLON expression
    (118) array_operator_missing -> . COLON COLON
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    COLON           shift and go to state 139
    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_operator_missing         shift and go to state 140
    array_operator_insides         shift and go to state 138
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 141

state 86

    (78) expression -> expression IN . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 142

state 87

    (72) expression -> expression TIMES . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 143

state 88

    (74) expression -> expression MODULUS . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 144

state 89

    (61) expression -> expression PLUS_EQUALS . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 145

state 90

    (59) expression -> expression ASSIGN_EQUALS . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 146

state 91

    (64) expression -> expression DIVIDE_EQUALS . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 147

state 92

    (82) expression -> expression COMPARE_GTET . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 148

state 93

    (66) expression -> expression EXPONENT_EQUALS . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 149

state 94

    (77) expression -> expression OR . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 150

state 95

    (26) stmt_c_while -> WHILE expression . COLON ks ENDWHILE
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    COLON           shift and go to state 151
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76



state 96

    (54) expression -> LEFT_PAREN expression . RIGHT_PAREN
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 152
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76



state 97

    (106) pair_list -> key_value_pair .
    (107) pair_list -> key_value_pair . COMMA pair_list

    RIGHT_CURLY_BRACE reduce using rule 106 (pair_list -> key_value_pair .)
    COMMA           shift and go to state 153



state 98

    (108) key_value_pair -> literal_string . COLON expression

    COLON           shift and go to state 154



state 99

    (104) object_literal -> LEFT_CURLY_BRACE pair_list . RIGHT_CURLY_BRACE

    RIGHT_CURLY_BRACE shift and go to state 155



state 100

    (105) pair_list -> epsilon .

    RIGHT_CURLY_BRACE reduce using rule 105 (pair_list -> epsilon .)



state 101

    (29) stmt_c_elif_block -> stmt_c_elif .
    (30) stmt_c_elif_block -> stmt_c_elif . stmt_c_elif_block
    (29) stmt_c_elif_block -> . stmt_c_elif
    (30) stmt_c_elif_block -> . stmt_c_elif stmt_c_elif_block
    (31) stmt_c_elif -> . ELIF expression COLON ks

    OTHERWISE       reduce using rule 29 (stmt_c_elif_block -> stmt_c_elif .)
    ENDIF           reduce using rule 29 (stmt_c_elif_block -> stmt_c_elif .)
    ELIF            shift and go to state 103


    stmt_c_elif                    shift and go to state 101
    stmt_c_elif_block              shift and go to state 156

state 102

    (23) stmt_c_if_FE -> stmt_c_if stmt_c_elif_block .
    (24) stmt_c_if_FEO -> stmt_c_if stmt_c_elif_block . stmt_c_otherwise
    (28) stmt_c_otherwise -> . OTHERWISE COLON ks

    ENDIF           reduce using rule 23 (stmt_c_if_FE -> stmt_c_if stmt_c_elif_block .)
    OTHERWISE       shift and go to state 105


    stmt_c_otherwise               shift and go to state 157

state 103

    (31) stmt_c_elif -> ELIF . expression COLON ks
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 158

state 104

    (22) stmt_c_if_FO -> stmt_c_if stmt_c_otherwise .

    ENDIF           reduce using rule 22 (stmt_c_if_FO -> stmt_c_if stmt_c_otherwise .)



state 105

    (28) stmt_c_otherwise -> OTHERWISE . COLON ks

    COLON           shift and go to state 159



state 106

    (102) array_literal -> LEFT_BOX exp_list . RIGHT_BOX

    RIGHT_BOX       shift and go to state 160



state 107

    (89) exp_list -> epsilon .

    RIGHT_BOX       reduce using rule 89 (exp_list -> epsilon .)
    RIGHT_PAREN     reduce using rule 89 (exp_list -> epsilon .)



state 108

    (103) array_literal -> LEFT_BOX expression . FOR expression_identifier IN expression RIGHT_BOX
    (90) exp_list -> expression .
    (91) exp_list -> expression . COMMA exp_list
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    FOR             shift and go to state 162
    RIGHT_BOX       reduce using rule 90 (exp_list -> expression .)
    COMMA           shift and go to state 161
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76



state 109

    (27) stmt_c_if -> IF expression . COLON ks
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    COLON           shift and go to state 163
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76



state 110

    (1) ks -> element ks .

    $end            reduce using rule 1 (ks -> element ks .)
    ENDFUNCTION     reduce using rule 1 (ks -> element ks .)
    ENDWHILE        reduce using rule 1 (ks -> element ks .)
    ENDIF           reduce using rule 1 (ks -> element ks .)
    OTHERWISE       reduce using rule 1 (ks -> element ks .)
    ELIF            reduce using rule 1 (ks -> element ks .)
    ENDFOR          reduce using rule 1 (ks -> element ks .)



state 111

    (48) dotted_identifier_something -> expression_identifier DOT . dotted_identifier_something
    (47) dotted_identifier_something -> . expression_identifier
    (48) dotted_identifier_something -> . expression_identifier DOT dotted_identifier_something
    (86) expression_identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 27


    expression_identifier          shift and go to state 55
    dotted_identifier_something    shift and go to state 164

state 112

    (50) dotted_identifier_everything -> dotted_identifier_something DOT . TIMES

    TIMES           shift and go to state 165



state 113

    (7) function_definition -> FUNCTION expression_identifier parameters . COLON ks ENDFUNCTION

    COLON           shift and go to state 166



state 114

    (9) function_anonymous -> FUNCTION parameters COLON . ks ENDFUNCTION
    (1) ks -> . element ks
    (2) ks -> . epsilon
    (3) element -> . function_definition
    (4) element -> . statement_compound
    (5) element -> . statement_simple
    (6) epsilon -> .
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (14) statement_compound -> . stmt_c_for
    (15) statement_compound -> . stmt_c_while
    (16) statement_compound -> . stmt_c_if_group ENDIF
    (32) statement_simple -> . stmt_s_control_flow
    (33) statement_simple -> . stmt_s_import
    (34) statement_simple -> . stmt_s_expression
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (25) stmt_c_for -> . FOR expression_identifier IN expression COLON ks ENDFOR
    (26) stmt_c_while -> . WHILE expression COLON ks ENDWHILE
    (17) stmt_c_if_group -> . stmt_c_if_F
    (18) stmt_c_if_group -> . stmt_c_if_FO
    (19) stmt_c_if_group -> . stmt_c_if_FE
    (20) stmt_c_if_group -> . stmt_c_if_FEO
    (35) stmt_s_control_flow -> . stmt_s_continue
    (36) stmt_s_control_flow -> . stmt_s_break
    (37) stmt_s_control_flow -> . stmt_s_pass
    (38) stmt_s_control_flow -> . stmt_s_return
    (44) stmt_s_import -> . IMPORT dotted_identifier
    (51) stmt_s_expression -> . expression
    (21) stmt_c_if_F -> . stmt_c_if
    (22) stmt_c_if_FO -> . stmt_c_if stmt_c_otherwise
    (23) stmt_c_if_FE -> . stmt_c_if stmt_c_elif_block
    (24) stmt_c_if_FEO -> . stmt_c_if stmt_c_elif_block stmt_c_otherwise
    (39) stmt_s_continue -> . CONTINUE
    (40) stmt_s_break -> . BREAK
    (41) stmt_s_pass -> . PASS
    (42) stmt_s_return -> . RETURN expression
    (43) stmt_s_return -> . RETURN
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (27) stmt_c_if -> . IF expression COLON ks
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL

    ENDFUNCTION     reduce using rule 6 (epsilon -> .)
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 23
    IMPORT          shift and go to state 6
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 33
    PASS            shift and go to state 8
    RETURN          shift and go to state 12
    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    IF              shift and go to state 46
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    stmt_c_for                     shift and go to state 22
    stmt_c_while                   shift and go to state 2
    stmt_s_return                  shift and go to state 35
    stmt_c_if_group                shift and go to state 13
    stmt_s_control_flow            shift and go to state 37
    stmt_s_import                  shift and go to state 38
    literal                        shift and go to state 25
    function_anonymous             shift and go to state 26
    stmt_s_pass                    shift and go to state 40
    epsilon                        shift and go to state 28
    stmt_s_continue                shift and go to state 29
    stmt_c_if_FEO                  shift and go to state 7
    literal_string                 shift and go to state 30
    array_literal                  shift and go to state 41
    stmt_c_if                      shift and go to state 42
    stmt_c_if_FE                   shift and go to state 44
    statement_compound             shift and go to state 31
    stmt_c_if_FO                   shift and go to state 45
    stmt_s_expression              shift and go to state 9
    function_definition            shift and go to state 47
    statement_simple               shift and go to state 48
    expression                     shift and go to state 21
    object_literal                 shift and go to state 18
    element                        shift and go to state 50
    ks                             shift and go to state 167
    stmt_s_break                   shift and go to state 11
    stmt_c_if_F                    shift and go to state 34

state 115

    (12) param_list -> expression_identifier .
    (13) param_list -> expression_identifier . COMMA param_list

    RIGHT_PAREN     reduce using rule 12 (param_list -> expression_identifier .)
    COMMA           shift and go to state 168



state 116

    (10) parameters -> LEFT_PAREN param_list . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 169



state 117

    (11) param_list -> epsilon .

    RIGHT_PAREN     reduce using rule 11 (param_list -> epsilon .)



state 118

    (25) stmt_c_for -> FOR expression_identifier IN . expression COLON ks ENDFOR
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 170

state 119

    (60) expression -> expression DOT_EQUALS expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    FUNCTION        reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    FOR             reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    WHILE           reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    IMPORT          reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    CONTINUE        reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    BREAK           reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    PASS            reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    RETURN          reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    NOT_EQUALS      reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    NOT             reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    THIS            reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    IF              reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    BLANK           reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    NULL            reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    TRUE            reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    FALSE           reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    NUMERIC_LITERAL reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    IDENTIFIER      reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    LEFT_CURLY_BRACE reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    STRING_LITERAL  reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    ENDWHILE        reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    $end            reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    ENDFUNCTION     reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    ENDIF           reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    OTHERWISE       reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    ELIF            reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    ENDFOR          reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    COLON           reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    RIGHT_PAREN     reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    COMMA           reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    RIGHT_BOX       reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    RIGHT_CURLY_BRACE reduce using rule 60 (expression -> expression DOT_EQUALS expression .)
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! ASSIGN_EQUALS   [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! DOT_EQUALS      [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! PLUS_EQUALS     [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! MINUS_EQUALS    [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! TIMES_EQUALS    [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! DIVIDE_EQUALS   [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! MODULUS_EQUALS  [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! EXPONENT_EQUALS [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! AND_EQUALS      [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! OR_EQUALS       [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! DOT             [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! PLUS            [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! TIMES           [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! MODULUS         [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! EXPONENT        [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! AND             [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! OR              [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! IN              [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! HAS             [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! EQUIVALENCE_EQUAL [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! COMPARE_GT      [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! COMPARE_GTET    [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! COMPARE_LT      [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! COMPARE_LTET    [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]
  ! LEFT_PAREN      [ reduce using rule 60 (expression -> expression DOT_EQUALS expression .) ]


state 120

    (80) expression -> expression EQUIVALENCE_EQUAL expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    ASSIGN_EQUALS   reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    DOT_EQUALS      reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    PLUS_EQUALS     reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    MINUS_EQUALS    reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    TIMES_EQUALS    reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    DIVIDE_EQUALS   reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    MODULUS_EQUALS  reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    EXPONENT_EQUALS reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    AND_EQUALS      reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    OR_EQUALS       reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    AND             reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    OR              reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    EQUIVALENCE_EQUAL reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    COMPARE_GT      reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    COMPARE_GTET    reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    COMPARE_LT      reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    COMPARE_LTET    reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    FUNCTION        reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    FOR             reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    WHILE           reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    IMPORT          reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    CONTINUE        reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    BREAK           reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    PASS            reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    RETURN          reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    NOT_EQUALS      reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    NOT             reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    THIS            reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    IF              reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    BLANK           reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    NULL            reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    TRUE            reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    FALSE           reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    NUMERIC_LITERAL reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    IDENTIFIER      reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    LEFT_CURLY_BRACE reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    STRING_LITERAL  reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    ENDWHILE        reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    $end            reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    ENDFUNCTION     reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    ENDIF           reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    OTHERWISE       reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    ELIF            reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    ENDFOR          reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    COLON           reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    RIGHT_PAREN     reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    COMMA           reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    RIGHT_BOX       reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    RIGHT_CURLY_BRACE reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .)
    LEFT_BOX        shift and go to state 85
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    IN              shift and go to state 86
    HAS             shift and go to state 74
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .) ]
  ! DOT             [ reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .) ]
  ! PLUS            [ reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .) ]
  ! MODULUS         [ reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .) ]
  ! EXPONENT        [ reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .) ]
  ! IN              [ reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .) ]
  ! HAS             [ reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .) ]
  ! LEFT_PAREN      [ reduce using rule 80 (expression -> expression EQUIVALENCE_EQUAL expression .) ]
  ! ASSIGN_EQUALS   [ shift and go to state 90 ]
  ! DOT_EQUALS      [ shift and go to state 67 ]
  ! PLUS_EQUALS     [ shift and go to state 89 ]
  ! MINUS_EQUALS    [ shift and go to state 73 ]
  ! TIMES_EQUALS    [ shift and go to state 81 ]
  ! DIVIDE_EQUALS   [ shift and go to state 91 ]
  ! MODULUS_EQUALS  [ shift and go to state 79 ]
  ! EXPONENT_EQUALS [ shift and go to state 93 ]
  ! AND_EQUALS      [ shift and go to state 83 ]
  ! OR_EQUALS       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 94 ]
  ! EQUIVALENCE_EQUAL [ shift and go to state 68 ]
  ! COMPARE_GT      [ shift and go to state 70 ]
  ! COMPARE_GTET    [ shift and go to state 92 ]
  ! COMPARE_LT      [ shift and go to state 82 ]
  ! COMPARE_LTET    [ shift and go to state 69 ]


state 121

    (84) expression -> expression COMPARE_LTET expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    ASSIGN_EQUALS   reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    DOT_EQUALS      reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    PLUS_EQUALS     reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    MINUS_EQUALS    reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    TIMES_EQUALS    reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    DIVIDE_EQUALS   reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    MODULUS_EQUALS  reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    EXPONENT_EQUALS reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    AND_EQUALS      reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    OR_EQUALS       reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    AND             reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    OR              reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    EQUIVALENCE_EQUAL reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    COMPARE_GT      reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    COMPARE_GTET    reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    COMPARE_LT      reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    COMPARE_LTET    reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    FUNCTION        reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    FOR             reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    WHILE           reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    IMPORT          reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    CONTINUE        reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    BREAK           reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    PASS            reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    RETURN          reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    NOT_EQUALS      reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    NOT             reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    THIS            reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    IF              reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    BLANK           reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    NULL            reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    TRUE            reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    FALSE           reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    NUMERIC_LITERAL reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    IDENTIFIER      reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    LEFT_CURLY_BRACE reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    STRING_LITERAL  reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    ENDWHILE        reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    $end            reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    ENDFUNCTION     reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    ENDIF           reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    OTHERWISE       reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    ELIF            reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    ENDFOR          reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    COLON           reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    RIGHT_PAREN     reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    COMMA           reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    RIGHT_BOX       reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    RIGHT_CURLY_BRACE reduce using rule 84 (expression -> expression COMPARE_LTET expression .)
    LEFT_BOX        shift and go to state 85
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    IN              shift and go to state 86
    HAS             shift and go to state 74
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 84 (expression -> expression COMPARE_LTET expression .) ]
  ! DOT             [ reduce using rule 84 (expression -> expression COMPARE_LTET expression .) ]
  ! PLUS            [ reduce using rule 84 (expression -> expression COMPARE_LTET expression .) ]
  ! MINUS           [ reduce using rule 84 (expression -> expression COMPARE_LTET expression .) ]
  ! TIMES           [ reduce using rule 84 (expression -> expression COMPARE_LTET expression .) ]
  ! DIVIDE          [ reduce using rule 84 (expression -> expression COMPARE_LTET expression .) ]
  ! MODULUS         [ reduce using rule 84 (expression -> expression COMPARE_LTET expression .) ]
  ! EXPONENT        [ reduce using rule 84 (expression -> expression COMPARE_LTET expression .) ]
  ! IN              [ reduce using rule 84 (expression -> expression COMPARE_LTET expression .) ]
  ! HAS             [ reduce using rule 84 (expression -> expression COMPARE_LTET expression .) ]
  ! LEFT_PAREN      [ reduce using rule 84 (expression -> expression COMPARE_LTET expression .) ]
  ! ASSIGN_EQUALS   [ shift and go to state 90 ]
  ! DOT_EQUALS      [ shift and go to state 67 ]
  ! PLUS_EQUALS     [ shift and go to state 89 ]
  ! MINUS_EQUALS    [ shift and go to state 73 ]
  ! TIMES_EQUALS    [ shift and go to state 81 ]
  ! DIVIDE_EQUALS   [ shift and go to state 91 ]
  ! MODULUS_EQUALS  [ shift and go to state 79 ]
  ! EXPONENT_EQUALS [ shift and go to state 93 ]
  ! AND_EQUALS      [ shift and go to state 83 ]
  ! OR_EQUALS       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 94 ]
  ! EQUIVALENCE_EQUAL [ shift and go to state 68 ]
  ! COMPARE_GT      [ shift and go to state 70 ]
  ! COMPARE_GTET    [ shift and go to state 92 ]
  ! COMPARE_LT      [ shift and go to state 82 ]
  ! COMPARE_LTET    [ shift and go to state 69 ]


state 122

    (81) expression -> expression COMPARE_GT expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    ASSIGN_EQUALS   reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    DOT_EQUALS      reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    PLUS_EQUALS     reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    MINUS_EQUALS    reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    TIMES_EQUALS    reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    DIVIDE_EQUALS   reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    MODULUS_EQUALS  reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    EXPONENT_EQUALS reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    AND_EQUALS      reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    OR_EQUALS       reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    AND             reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    OR              reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    EQUIVALENCE_EQUAL reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    COMPARE_GT      reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    COMPARE_GTET    reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    COMPARE_LT      reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    COMPARE_LTET    reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    FUNCTION        reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    FOR             reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    WHILE           reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    IMPORT          reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    CONTINUE        reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    BREAK           reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    PASS            reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    RETURN          reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    NOT_EQUALS      reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    NOT             reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    THIS            reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    IF              reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    BLANK           reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    NULL            reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    TRUE            reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    FALSE           reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    NUMERIC_LITERAL reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    IDENTIFIER      reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    LEFT_CURLY_BRACE reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    STRING_LITERAL  reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    ENDWHILE        reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    $end            reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    ENDFUNCTION     reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    ENDIF           reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    OTHERWISE       reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    ELIF            reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    ENDFOR          reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    COLON           reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    RIGHT_PAREN     reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    COMMA           reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    RIGHT_BOX       reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    RIGHT_CURLY_BRACE reduce using rule 81 (expression -> expression COMPARE_GT expression .)
    LEFT_BOX        shift and go to state 85
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    IN              shift and go to state 86
    HAS             shift and go to state 74
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 81 (expression -> expression COMPARE_GT expression .) ]
  ! DOT             [ reduce using rule 81 (expression -> expression COMPARE_GT expression .) ]
  ! PLUS            [ reduce using rule 81 (expression -> expression COMPARE_GT expression .) ]
  ! MINUS           [ reduce using rule 81 (expression -> expression COMPARE_GT expression .) ]
  ! TIMES           [ reduce using rule 81 (expression -> expression COMPARE_GT expression .) ]
  ! DIVIDE          [ reduce using rule 81 (expression -> expression COMPARE_GT expression .) ]
  ! MODULUS         [ reduce using rule 81 (expression -> expression COMPARE_GT expression .) ]
  ! EXPONENT        [ reduce using rule 81 (expression -> expression COMPARE_GT expression .) ]
  ! IN              [ reduce using rule 81 (expression -> expression COMPARE_GT expression .) ]
  ! HAS             [ reduce using rule 81 (expression -> expression COMPARE_GT expression .) ]
  ! LEFT_PAREN      [ reduce using rule 81 (expression -> expression COMPARE_GT expression .) ]
  ! ASSIGN_EQUALS   [ shift and go to state 90 ]
  ! DOT_EQUALS      [ shift and go to state 67 ]
  ! PLUS_EQUALS     [ shift and go to state 89 ]
  ! MINUS_EQUALS    [ shift and go to state 73 ]
  ! TIMES_EQUALS    [ shift and go to state 81 ]
  ! DIVIDE_EQUALS   [ shift and go to state 91 ]
  ! MODULUS_EQUALS  [ shift and go to state 79 ]
  ! EXPONENT_EQUALS [ shift and go to state 93 ]
  ! AND_EQUALS      [ shift and go to state 83 ]
  ! OR_EQUALS       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 94 ]
  ! EQUIVALENCE_EQUAL [ shift and go to state 68 ]
  ! COMPARE_GT      [ shift and go to state 70 ]
  ! COMPARE_GTET    [ shift and go to state 92 ]
  ! COMPARE_LT      [ shift and go to state 82 ]
  ! COMPARE_LTET    [ shift and go to state 69 ]


state 123

    (71) expression -> expression MINUS expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    ASSIGN_EQUALS   reduce using rule 71 (expression -> expression MINUS expression .)
    DOT_EQUALS      reduce using rule 71 (expression -> expression MINUS expression .)
    PLUS_EQUALS     reduce using rule 71 (expression -> expression MINUS expression .)
    MINUS_EQUALS    reduce using rule 71 (expression -> expression MINUS expression .)
    TIMES_EQUALS    reduce using rule 71 (expression -> expression MINUS expression .)
    DIVIDE_EQUALS   reduce using rule 71 (expression -> expression MINUS expression .)
    MODULUS_EQUALS  reduce using rule 71 (expression -> expression MINUS expression .)
    EXPONENT_EQUALS reduce using rule 71 (expression -> expression MINUS expression .)
    AND_EQUALS      reduce using rule 71 (expression -> expression MINUS expression .)
    OR_EQUALS       reduce using rule 71 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 71 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 71 (expression -> expression MINUS expression .)
    AND             reduce using rule 71 (expression -> expression MINUS expression .)
    OR              reduce using rule 71 (expression -> expression MINUS expression .)
    IN              reduce using rule 71 (expression -> expression MINUS expression .)
    HAS             reduce using rule 71 (expression -> expression MINUS expression .)
    EQUIVALENCE_EQUAL reduce using rule 71 (expression -> expression MINUS expression .)
    COMPARE_GT      reduce using rule 71 (expression -> expression MINUS expression .)
    COMPARE_GTET    reduce using rule 71 (expression -> expression MINUS expression .)
    COMPARE_LT      reduce using rule 71 (expression -> expression MINUS expression .)
    COMPARE_LTET    reduce using rule 71 (expression -> expression MINUS expression .)
    FUNCTION        reduce using rule 71 (expression -> expression MINUS expression .)
    FOR             reduce using rule 71 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 71 (expression -> expression MINUS expression .)
    IMPORT          reduce using rule 71 (expression -> expression MINUS expression .)
    CONTINUE        reduce using rule 71 (expression -> expression MINUS expression .)
    BREAK           reduce using rule 71 (expression -> expression MINUS expression .)
    PASS            reduce using rule 71 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 71 (expression -> expression MINUS expression .)
    NOT_EQUALS      reduce using rule 71 (expression -> expression MINUS expression .)
    NOT             reduce using rule 71 (expression -> expression MINUS expression .)
    THIS            reduce using rule 71 (expression -> expression MINUS expression .)
    IF              reduce using rule 71 (expression -> expression MINUS expression .)
    BLANK           reduce using rule 71 (expression -> expression MINUS expression .)
    NULL            reduce using rule 71 (expression -> expression MINUS expression .)
    TRUE            reduce using rule 71 (expression -> expression MINUS expression .)
    FALSE           reduce using rule 71 (expression -> expression MINUS expression .)
    NUMERIC_LITERAL reduce using rule 71 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 71 (expression -> expression MINUS expression .)
    LEFT_CURLY_BRACE reduce using rule 71 (expression -> expression MINUS expression .)
    STRING_LITERAL  reduce using rule 71 (expression -> expression MINUS expression .)
    ENDWHILE        reduce using rule 71 (expression -> expression MINUS expression .)
    $end            reduce using rule 71 (expression -> expression MINUS expression .)
    ENDFUNCTION     reduce using rule 71 (expression -> expression MINUS expression .)
    ENDIF           reduce using rule 71 (expression -> expression MINUS expression .)
    OTHERWISE       reduce using rule 71 (expression -> expression MINUS expression .)
    ELIF            reduce using rule 71 (expression -> expression MINUS expression .)
    ENDFOR          reduce using rule 71 (expression -> expression MINUS expression .)
    COLON           reduce using rule 71 (expression -> expression MINUS expression .)
    RIGHT_PAREN     reduce using rule 71 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 71 (expression -> expression MINUS expression .)
    RIGHT_BOX       reduce using rule 71 (expression -> expression MINUS expression .)
    RIGHT_CURLY_BRACE reduce using rule 71 (expression -> expression MINUS expression .)
    LEFT_BOX        shift and go to state 85
    DOT             shift and go to state 72
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 71 (expression -> expression MINUS expression .) ]
  ! DOT             [ reduce using rule 71 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 71 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 71 (expression -> expression MINUS expression .) ]
  ! MODULUS         [ reduce using rule 71 (expression -> expression MINUS expression .) ]
  ! EXPONENT        [ reduce using rule 71 (expression -> expression MINUS expression .) ]
  ! LEFT_PAREN      [ reduce using rule 71 (expression -> expression MINUS expression .) ]
  ! ASSIGN_EQUALS   [ shift and go to state 90 ]
  ! DOT_EQUALS      [ shift and go to state 67 ]
  ! PLUS_EQUALS     [ shift and go to state 89 ]
  ! MINUS_EQUALS    [ shift and go to state 73 ]
  ! TIMES_EQUALS    [ shift and go to state 81 ]
  ! DIVIDE_EQUALS   [ shift and go to state 91 ]
  ! MODULUS_EQUALS  [ shift and go to state 79 ]
  ! EXPONENT_EQUALS [ shift and go to state 93 ]
  ! AND_EQUALS      [ shift and go to state 83 ]
  ! OR_EQUALS       [ shift and go to state 84 ]
  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 71 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 94 ]
  ! IN              [ shift and go to state 86 ]
  ! HAS             [ shift and go to state 74 ]
  ! EQUIVALENCE_EQUAL [ shift and go to state 68 ]
  ! COMPARE_GT      [ shift and go to state 70 ]
  ! COMPARE_GTET    [ shift and go to state 92 ]
  ! COMPARE_LT      [ shift and go to state 82 ]
  ! COMPARE_LTET    [ shift and go to state 69 ]


state 124

    (69) expression -> expression DOT expression_identifier .

    LEFT_BOX        reduce using rule 69 (expression -> expression DOT expression_identifier .)
    ASSIGN_EQUALS   reduce using rule 69 (expression -> expression DOT expression_identifier .)
    DOT_EQUALS      reduce using rule 69 (expression -> expression DOT expression_identifier .)
    PLUS_EQUALS     reduce using rule 69 (expression -> expression DOT expression_identifier .)
    MINUS_EQUALS    reduce using rule 69 (expression -> expression DOT expression_identifier .)
    TIMES_EQUALS    reduce using rule 69 (expression -> expression DOT expression_identifier .)
    DIVIDE_EQUALS   reduce using rule 69 (expression -> expression DOT expression_identifier .)
    MODULUS_EQUALS  reduce using rule 69 (expression -> expression DOT expression_identifier .)
    EXPONENT_EQUALS reduce using rule 69 (expression -> expression DOT expression_identifier .)
    AND_EQUALS      reduce using rule 69 (expression -> expression DOT expression_identifier .)
    OR_EQUALS       reduce using rule 69 (expression -> expression DOT expression_identifier .)
    DOT             reduce using rule 69 (expression -> expression DOT expression_identifier .)
    PLUS            reduce using rule 69 (expression -> expression DOT expression_identifier .)
    MINUS           reduce using rule 69 (expression -> expression DOT expression_identifier .)
    TIMES           reduce using rule 69 (expression -> expression DOT expression_identifier .)
    DIVIDE          reduce using rule 69 (expression -> expression DOT expression_identifier .)
    MODULUS         reduce using rule 69 (expression -> expression DOT expression_identifier .)
    EXPONENT        reduce using rule 69 (expression -> expression DOT expression_identifier .)
    AND             reduce using rule 69 (expression -> expression DOT expression_identifier .)
    OR              reduce using rule 69 (expression -> expression DOT expression_identifier .)
    IN              reduce using rule 69 (expression -> expression DOT expression_identifier .)
    HAS             reduce using rule 69 (expression -> expression DOT expression_identifier .)
    EQUIVALENCE_EQUAL reduce using rule 69 (expression -> expression DOT expression_identifier .)
    COMPARE_GT      reduce using rule 69 (expression -> expression DOT expression_identifier .)
    COMPARE_GTET    reduce using rule 69 (expression -> expression DOT expression_identifier .)
    COMPARE_LT      reduce using rule 69 (expression -> expression DOT expression_identifier .)
    COMPARE_LTET    reduce using rule 69 (expression -> expression DOT expression_identifier .)
    LEFT_PAREN      reduce using rule 69 (expression -> expression DOT expression_identifier .)
    FUNCTION        reduce using rule 69 (expression -> expression DOT expression_identifier .)
    FOR             reduce using rule 69 (expression -> expression DOT expression_identifier .)
    WHILE           reduce using rule 69 (expression -> expression DOT expression_identifier .)
    IMPORT          reduce using rule 69 (expression -> expression DOT expression_identifier .)
    CONTINUE        reduce using rule 69 (expression -> expression DOT expression_identifier .)
    BREAK           reduce using rule 69 (expression -> expression DOT expression_identifier .)
    PASS            reduce using rule 69 (expression -> expression DOT expression_identifier .)
    RETURN          reduce using rule 69 (expression -> expression DOT expression_identifier .)
    NOT_EQUALS      reduce using rule 69 (expression -> expression DOT expression_identifier .)
    NOT             reduce using rule 69 (expression -> expression DOT expression_identifier .)
    THIS            reduce using rule 69 (expression -> expression DOT expression_identifier .)
    IF              reduce using rule 69 (expression -> expression DOT expression_identifier .)
    BLANK           reduce using rule 69 (expression -> expression DOT expression_identifier .)
    NULL            reduce using rule 69 (expression -> expression DOT expression_identifier .)
    TRUE            reduce using rule 69 (expression -> expression DOT expression_identifier .)
    FALSE           reduce using rule 69 (expression -> expression DOT expression_identifier .)
    NUMERIC_LITERAL reduce using rule 69 (expression -> expression DOT expression_identifier .)
    IDENTIFIER      reduce using rule 69 (expression -> expression DOT expression_identifier .)
    LEFT_CURLY_BRACE reduce using rule 69 (expression -> expression DOT expression_identifier .)
    STRING_LITERAL  reduce using rule 69 (expression -> expression DOT expression_identifier .)
    ENDWHILE        reduce using rule 69 (expression -> expression DOT expression_identifier .)
    $end            reduce using rule 69 (expression -> expression DOT expression_identifier .)
    ENDFUNCTION     reduce using rule 69 (expression -> expression DOT expression_identifier .)
    ENDIF           reduce using rule 69 (expression -> expression DOT expression_identifier .)
    OTHERWISE       reduce using rule 69 (expression -> expression DOT expression_identifier .)
    ELIF            reduce using rule 69 (expression -> expression DOT expression_identifier .)
    ENDFOR          reduce using rule 69 (expression -> expression DOT expression_identifier .)
    COLON           reduce using rule 69 (expression -> expression DOT expression_identifier .)
    RIGHT_PAREN     reduce using rule 69 (expression -> expression DOT expression_identifier .)
    COMMA           reduce using rule 69 (expression -> expression DOT expression_identifier .)
    RIGHT_BOX       reduce using rule 69 (expression -> expression DOT expression_identifier .)
    RIGHT_CURLY_BRACE reduce using rule 69 (expression -> expression DOT expression_identifier .)



state 125

    (62) expression -> expression MINUS_EQUALS expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    FUNCTION        reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    FOR             reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    WHILE           reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    IMPORT          reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    CONTINUE        reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    BREAK           reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    PASS            reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    RETURN          reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    NOT_EQUALS      reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    NOT             reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    THIS            reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    IF              reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    BLANK           reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    NULL            reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    TRUE            reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    FALSE           reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    NUMERIC_LITERAL reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    IDENTIFIER      reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    LEFT_CURLY_BRACE reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    STRING_LITERAL  reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    ENDWHILE        reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    $end            reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    ENDFUNCTION     reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    ENDIF           reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    OTHERWISE       reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    ELIF            reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    ENDFOR          reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    COLON           reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    RIGHT_PAREN     reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    COMMA           reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    RIGHT_BOX       reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    RIGHT_CURLY_BRACE reduce using rule 62 (expression -> expression MINUS_EQUALS expression .)
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! ASSIGN_EQUALS   [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! DOT_EQUALS      [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! PLUS_EQUALS     [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! MINUS_EQUALS    [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! TIMES_EQUALS    [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! DIVIDE_EQUALS   [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! MODULUS_EQUALS  [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! EXPONENT_EQUALS [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! AND_EQUALS      [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! OR_EQUALS       [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! DOT             [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! PLUS            [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! MINUS           [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! TIMES           [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! MODULUS         [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! EXPONENT        [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! AND             [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! OR              [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! IN              [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! HAS             [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! EQUIVALENCE_EQUAL [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! COMPARE_GT      [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! COMPARE_GTET    [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! COMPARE_LT      [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! COMPARE_LTET    [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]
  ! LEFT_PAREN      [ reduce using rule 62 (expression -> expression MINUS_EQUALS expression .) ]


state 126

    (79) expression -> expression HAS expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    ASSIGN_EQUALS   reduce using rule 79 (expression -> expression HAS expression .)
    DOT_EQUALS      reduce using rule 79 (expression -> expression HAS expression .)
    PLUS_EQUALS     reduce using rule 79 (expression -> expression HAS expression .)
    MINUS_EQUALS    reduce using rule 79 (expression -> expression HAS expression .)
    TIMES_EQUALS    reduce using rule 79 (expression -> expression HAS expression .)
    DIVIDE_EQUALS   reduce using rule 79 (expression -> expression HAS expression .)
    MODULUS_EQUALS  reduce using rule 79 (expression -> expression HAS expression .)
    EXPONENT_EQUALS reduce using rule 79 (expression -> expression HAS expression .)
    AND_EQUALS      reduce using rule 79 (expression -> expression HAS expression .)
    OR_EQUALS       reduce using rule 79 (expression -> expression HAS expression .)
    AND             reduce using rule 79 (expression -> expression HAS expression .)
    OR              reduce using rule 79 (expression -> expression HAS expression .)
    IN              reduce using rule 79 (expression -> expression HAS expression .)
    HAS             reduce using rule 79 (expression -> expression HAS expression .)
    EQUIVALENCE_EQUAL reduce using rule 79 (expression -> expression HAS expression .)
    COMPARE_GT      reduce using rule 79 (expression -> expression HAS expression .)
    COMPARE_GTET    reduce using rule 79 (expression -> expression HAS expression .)
    COMPARE_LT      reduce using rule 79 (expression -> expression HAS expression .)
    COMPARE_LTET    reduce using rule 79 (expression -> expression HAS expression .)
    FUNCTION        reduce using rule 79 (expression -> expression HAS expression .)
    FOR             reduce using rule 79 (expression -> expression HAS expression .)
    WHILE           reduce using rule 79 (expression -> expression HAS expression .)
    IMPORT          reduce using rule 79 (expression -> expression HAS expression .)
    CONTINUE        reduce using rule 79 (expression -> expression HAS expression .)
    BREAK           reduce using rule 79 (expression -> expression HAS expression .)
    PASS            reduce using rule 79 (expression -> expression HAS expression .)
    RETURN          reduce using rule 79 (expression -> expression HAS expression .)
    NOT_EQUALS      reduce using rule 79 (expression -> expression HAS expression .)
    NOT             reduce using rule 79 (expression -> expression HAS expression .)
    THIS            reduce using rule 79 (expression -> expression HAS expression .)
    IF              reduce using rule 79 (expression -> expression HAS expression .)
    BLANK           reduce using rule 79 (expression -> expression HAS expression .)
    NULL            reduce using rule 79 (expression -> expression HAS expression .)
    TRUE            reduce using rule 79 (expression -> expression HAS expression .)
    FALSE           reduce using rule 79 (expression -> expression HAS expression .)
    NUMERIC_LITERAL reduce using rule 79 (expression -> expression HAS expression .)
    IDENTIFIER      reduce using rule 79 (expression -> expression HAS expression .)
    LEFT_CURLY_BRACE reduce using rule 79 (expression -> expression HAS expression .)
    STRING_LITERAL  reduce using rule 79 (expression -> expression HAS expression .)
    ENDWHILE        reduce using rule 79 (expression -> expression HAS expression .)
    $end            reduce using rule 79 (expression -> expression HAS expression .)
    ENDFUNCTION     reduce using rule 79 (expression -> expression HAS expression .)
    ENDIF           reduce using rule 79 (expression -> expression HAS expression .)
    OTHERWISE       reduce using rule 79 (expression -> expression HAS expression .)
    ELIF            reduce using rule 79 (expression -> expression HAS expression .)
    ENDFOR          reduce using rule 79 (expression -> expression HAS expression .)
    COLON           reduce using rule 79 (expression -> expression HAS expression .)
    RIGHT_PAREN     reduce using rule 79 (expression -> expression HAS expression .)
    COMMA           reduce using rule 79 (expression -> expression HAS expression .)
    RIGHT_BOX       reduce using rule 79 (expression -> expression HAS expression .)
    RIGHT_CURLY_BRACE reduce using rule 79 (expression -> expression HAS expression .)
    LEFT_BOX        shift and go to state 85
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 79 (expression -> expression HAS expression .) ]
  ! DOT             [ reduce using rule 79 (expression -> expression HAS expression .) ]
  ! PLUS            [ reduce using rule 79 (expression -> expression HAS expression .) ]
  ! MINUS           [ reduce using rule 79 (expression -> expression HAS expression .) ]
  ! TIMES           [ reduce using rule 79 (expression -> expression HAS expression .) ]
  ! DIVIDE          [ reduce using rule 79 (expression -> expression HAS expression .) ]
  ! MODULUS         [ reduce using rule 79 (expression -> expression HAS expression .) ]
  ! EXPONENT        [ reduce using rule 79 (expression -> expression HAS expression .) ]
  ! LEFT_PAREN      [ reduce using rule 79 (expression -> expression HAS expression .) ]
  ! ASSIGN_EQUALS   [ shift and go to state 90 ]
  ! DOT_EQUALS      [ shift and go to state 67 ]
  ! PLUS_EQUALS     [ shift and go to state 89 ]
  ! MINUS_EQUALS    [ shift and go to state 73 ]
  ! TIMES_EQUALS    [ shift and go to state 81 ]
  ! DIVIDE_EQUALS   [ shift and go to state 91 ]
  ! MODULUS_EQUALS  [ shift and go to state 79 ]
  ! EXPONENT_EQUALS [ shift and go to state 93 ]
  ! AND_EQUALS      [ shift and go to state 83 ]
  ! OR_EQUALS       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 94 ]
  ! IN              [ shift and go to state 86 ]
  ! HAS             [ shift and go to state 74 ]
  ! EQUIVALENCE_EQUAL [ shift and go to state 68 ]
  ! COMPARE_GT      [ shift and go to state 70 ]
  ! COMPARE_GTET    [ shift and go to state 92 ]
  ! COMPARE_LT      [ shift and go to state 82 ]
  ! COMPARE_LTET    [ shift and go to state 69 ]


state 127

    (75) expression -> expression EXPONENT expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    ASSIGN_EQUALS   reduce using rule 75 (expression -> expression EXPONENT expression .)
    DOT_EQUALS      reduce using rule 75 (expression -> expression EXPONENT expression .)
    PLUS_EQUALS     reduce using rule 75 (expression -> expression EXPONENT expression .)
    MINUS_EQUALS    reduce using rule 75 (expression -> expression EXPONENT expression .)
    TIMES_EQUALS    reduce using rule 75 (expression -> expression EXPONENT expression .)
    DIVIDE_EQUALS   reduce using rule 75 (expression -> expression EXPONENT expression .)
    MODULUS_EQUALS  reduce using rule 75 (expression -> expression EXPONENT expression .)
    EXPONENT_EQUALS reduce using rule 75 (expression -> expression EXPONENT expression .)
    AND_EQUALS      reduce using rule 75 (expression -> expression EXPONENT expression .)
    OR_EQUALS       reduce using rule 75 (expression -> expression EXPONENT expression .)
    PLUS            reduce using rule 75 (expression -> expression EXPONENT expression .)
    MINUS           reduce using rule 75 (expression -> expression EXPONENT expression .)
    TIMES           reduce using rule 75 (expression -> expression EXPONENT expression .)
    DIVIDE          reduce using rule 75 (expression -> expression EXPONENT expression .)
    MODULUS         reduce using rule 75 (expression -> expression EXPONENT expression .)
    EXPONENT        reduce using rule 75 (expression -> expression EXPONENT expression .)
    AND             reduce using rule 75 (expression -> expression EXPONENT expression .)
    OR              reduce using rule 75 (expression -> expression EXPONENT expression .)
    IN              reduce using rule 75 (expression -> expression EXPONENT expression .)
    HAS             reduce using rule 75 (expression -> expression EXPONENT expression .)
    EQUIVALENCE_EQUAL reduce using rule 75 (expression -> expression EXPONENT expression .)
    COMPARE_GT      reduce using rule 75 (expression -> expression EXPONENT expression .)
    COMPARE_GTET    reduce using rule 75 (expression -> expression EXPONENT expression .)
    COMPARE_LT      reduce using rule 75 (expression -> expression EXPONENT expression .)
    COMPARE_LTET    reduce using rule 75 (expression -> expression EXPONENT expression .)
    FUNCTION        reduce using rule 75 (expression -> expression EXPONENT expression .)
    FOR             reduce using rule 75 (expression -> expression EXPONENT expression .)
    WHILE           reduce using rule 75 (expression -> expression EXPONENT expression .)
    IMPORT          reduce using rule 75 (expression -> expression EXPONENT expression .)
    CONTINUE        reduce using rule 75 (expression -> expression EXPONENT expression .)
    BREAK           reduce using rule 75 (expression -> expression EXPONENT expression .)
    PASS            reduce using rule 75 (expression -> expression EXPONENT expression .)
    RETURN          reduce using rule 75 (expression -> expression EXPONENT expression .)
    NOT_EQUALS      reduce using rule 75 (expression -> expression EXPONENT expression .)
    NOT             reduce using rule 75 (expression -> expression EXPONENT expression .)
    THIS            reduce using rule 75 (expression -> expression EXPONENT expression .)
    IF              reduce using rule 75 (expression -> expression EXPONENT expression .)
    BLANK           reduce using rule 75 (expression -> expression EXPONENT expression .)
    NULL            reduce using rule 75 (expression -> expression EXPONENT expression .)
    TRUE            reduce using rule 75 (expression -> expression EXPONENT expression .)
    FALSE           reduce using rule 75 (expression -> expression EXPONENT expression .)
    NUMERIC_LITERAL reduce using rule 75 (expression -> expression EXPONENT expression .)
    IDENTIFIER      reduce using rule 75 (expression -> expression EXPONENT expression .)
    LEFT_CURLY_BRACE reduce using rule 75 (expression -> expression EXPONENT expression .)
    STRING_LITERAL  reduce using rule 75 (expression -> expression EXPONENT expression .)
    ENDWHILE        reduce using rule 75 (expression -> expression EXPONENT expression .)
    $end            reduce using rule 75 (expression -> expression EXPONENT expression .)
    ENDFUNCTION     reduce using rule 75 (expression -> expression EXPONENT expression .)
    ENDIF           reduce using rule 75 (expression -> expression EXPONENT expression .)
    OTHERWISE       reduce using rule 75 (expression -> expression EXPONENT expression .)
    ELIF            reduce using rule 75 (expression -> expression EXPONENT expression .)
    ENDFOR          reduce using rule 75 (expression -> expression EXPONENT expression .)
    COLON           reduce using rule 75 (expression -> expression EXPONENT expression .)
    RIGHT_PAREN     reduce using rule 75 (expression -> expression EXPONENT expression .)
    COMMA           reduce using rule 75 (expression -> expression EXPONENT expression .)
    RIGHT_BOX       reduce using rule 75 (expression -> expression EXPONENT expression .)
    RIGHT_CURLY_BRACE reduce using rule 75 (expression -> expression EXPONENT expression .)
    LEFT_BOX        shift and go to state 85
    DOT             shift and go to state 72
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 75 (expression -> expression EXPONENT expression .) ]
  ! DOT             [ reduce using rule 75 (expression -> expression EXPONENT expression .) ]
  ! LEFT_PAREN      [ reduce using rule 75 (expression -> expression EXPONENT expression .) ]
  ! ASSIGN_EQUALS   [ shift and go to state 90 ]
  ! DOT_EQUALS      [ shift and go to state 67 ]
  ! PLUS_EQUALS     [ shift and go to state 89 ]
  ! MINUS_EQUALS    [ shift and go to state 73 ]
  ! TIMES_EQUALS    [ shift and go to state 81 ]
  ! DIVIDE_EQUALS   [ shift and go to state 91 ]
  ! MODULUS_EQUALS  [ shift and go to state 79 ]
  ! EXPONENT_EQUALS [ shift and go to state 93 ]
  ! AND_EQUALS      [ shift and go to state 83 ]
  ! OR_EQUALS       [ shift and go to state 84 ]
  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 71 ]
  ! TIMES           [ shift and go to state 87 ]
  ! DIVIDE          [ shift and go to state 80 ]
  ! MODULUS         [ shift and go to state 88 ]
  ! EXPONENT        [ shift and go to state 75 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 94 ]
  ! IN              [ shift and go to state 86 ]
  ! HAS             [ shift and go to state 74 ]
  ! EQUIVALENCE_EQUAL [ shift and go to state 68 ]
  ! COMPARE_GT      [ shift and go to state 70 ]
  ! COMPARE_GTET    [ shift and go to state 92 ]
  ! COMPARE_LT      [ shift and go to state 82 ]
  ! COMPARE_LTET    [ shift and go to state 69 ]


state 128

    (88) expression -> expression LEFT_PAREN exp_list . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 171



state 129

    (90) exp_list -> expression .
    (91) exp_list -> expression . COMMA exp_list
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    RIGHT_BOX       reduce using rule 90 (exp_list -> expression .)
    RIGHT_PAREN     reduce using rule 90 (exp_list -> expression .)
    COMMA           shift and go to state 161
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76



state 130

    (70) expression -> expression PLUS expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    ASSIGN_EQUALS   reduce using rule 70 (expression -> expression PLUS expression .)
    DOT_EQUALS      reduce using rule 70 (expression -> expression PLUS expression .)
    PLUS_EQUALS     reduce using rule 70 (expression -> expression PLUS expression .)
    MINUS_EQUALS    reduce using rule 70 (expression -> expression PLUS expression .)
    TIMES_EQUALS    reduce using rule 70 (expression -> expression PLUS expression .)
    DIVIDE_EQUALS   reduce using rule 70 (expression -> expression PLUS expression .)
    MODULUS_EQUALS  reduce using rule 70 (expression -> expression PLUS expression .)
    EXPONENT_EQUALS reduce using rule 70 (expression -> expression PLUS expression .)
    AND_EQUALS      reduce using rule 70 (expression -> expression PLUS expression .)
    OR_EQUALS       reduce using rule 70 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 70 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 70 (expression -> expression PLUS expression .)
    AND             reduce using rule 70 (expression -> expression PLUS expression .)
    OR              reduce using rule 70 (expression -> expression PLUS expression .)
    IN              reduce using rule 70 (expression -> expression PLUS expression .)
    HAS             reduce using rule 70 (expression -> expression PLUS expression .)
    EQUIVALENCE_EQUAL reduce using rule 70 (expression -> expression PLUS expression .)
    COMPARE_GT      reduce using rule 70 (expression -> expression PLUS expression .)
    COMPARE_GTET    reduce using rule 70 (expression -> expression PLUS expression .)
    COMPARE_LT      reduce using rule 70 (expression -> expression PLUS expression .)
    COMPARE_LTET    reduce using rule 70 (expression -> expression PLUS expression .)
    FUNCTION        reduce using rule 70 (expression -> expression PLUS expression .)
    FOR             reduce using rule 70 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 70 (expression -> expression PLUS expression .)
    IMPORT          reduce using rule 70 (expression -> expression PLUS expression .)
    CONTINUE        reduce using rule 70 (expression -> expression PLUS expression .)
    BREAK           reduce using rule 70 (expression -> expression PLUS expression .)
    PASS            reduce using rule 70 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 70 (expression -> expression PLUS expression .)
    NOT_EQUALS      reduce using rule 70 (expression -> expression PLUS expression .)
    NOT             reduce using rule 70 (expression -> expression PLUS expression .)
    THIS            reduce using rule 70 (expression -> expression PLUS expression .)
    IF              reduce using rule 70 (expression -> expression PLUS expression .)
    BLANK           reduce using rule 70 (expression -> expression PLUS expression .)
    NULL            reduce using rule 70 (expression -> expression PLUS expression .)
    TRUE            reduce using rule 70 (expression -> expression PLUS expression .)
    FALSE           reduce using rule 70 (expression -> expression PLUS expression .)
    NUMERIC_LITERAL reduce using rule 70 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 70 (expression -> expression PLUS expression .)
    LEFT_CURLY_BRACE reduce using rule 70 (expression -> expression PLUS expression .)
    STRING_LITERAL  reduce using rule 70 (expression -> expression PLUS expression .)
    ENDWHILE        reduce using rule 70 (expression -> expression PLUS expression .)
    $end            reduce using rule 70 (expression -> expression PLUS expression .)
    ENDFUNCTION     reduce using rule 70 (expression -> expression PLUS expression .)
    ENDIF           reduce using rule 70 (expression -> expression PLUS expression .)
    OTHERWISE       reduce using rule 70 (expression -> expression PLUS expression .)
    ELIF            reduce using rule 70 (expression -> expression PLUS expression .)
    ENDFOR          reduce using rule 70 (expression -> expression PLUS expression .)
    COLON           reduce using rule 70 (expression -> expression PLUS expression .)
    RIGHT_PAREN     reduce using rule 70 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 70 (expression -> expression PLUS expression .)
    RIGHT_BOX       reduce using rule 70 (expression -> expression PLUS expression .)
    RIGHT_CURLY_BRACE reduce using rule 70 (expression -> expression PLUS expression .)
    LEFT_BOX        shift and go to state 85
    DOT             shift and go to state 72
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 70 (expression -> expression PLUS expression .) ]
  ! DOT             [ reduce using rule 70 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 70 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 70 (expression -> expression PLUS expression .) ]
  ! MODULUS         [ reduce using rule 70 (expression -> expression PLUS expression .) ]
  ! EXPONENT        [ reduce using rule 70 (expression -> expression PLUS expression .) ]
  ! LEFT_PAREN      [ reduce using rule 70 (expression -> expression PLUS expression .) ]
  ! ASSIGN_EQUALS   [ shift and go to state 90 ]
  ! DOT_EQUALS      [ shift and go to state 67 ]
  ! PLUS_EQUALS     [ shift and go to state 89 ]
  ! MINUS_EQUALS    [ shift and go to state 73 ]
  ! TIMES_EQUALS    [ shift and go to state 81 ]
  ! DIVIDE_EQUALS   [ shift and go to state 91 ]
  ! MODULUS_EQUALS  [ shift and go to state 79 ]
  ! EXPONENT_EQUALS [ shift and go to state 93 ]
  ! AND_EQUALS      [ shift and go to state 83 ]
  ! OR_EQUALS       [ shift and go to state 84 ]
  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 71 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 94 ]
  ! IN              [ shift and go to state 86 ]
  ! HAS             [ shift and go to state 74 ]
  ! EQUIVALENCE_EQUAL [ shift and go to state 68 ]
  ! COMPARE_GT      [ shift and go to state 70 ]
  ! COMPARE_GTET    [ shift and go to state 92 ]
  ! COMPARE_LT      [ shift and go to state 82 ]
  ! COMPARE_LTET    [ shift and go to state 69 ]


state 131

    (76) expression -> expression AND expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    ASSIGN_EQUALS   reduce using rule 76 (expression -> expression AND expression .)
    DOT_EQUALS      reduce using rule 76 (expression -> expression AND expression .)
    PLUS_EQUALS     reduce using rule 76 (expression -> expression AND expression .)
    MINUS_EQUALS    reduce using rule 76 (expression -> expression AND expression .)
    TIMES_EQUALS    reduce using rule 76 (expression -> expression AND expression .)
    DIVIDE_EQUALS   reduce using rule 76 (expression -> expression AND expression .)
    MODULUS_EQUALS  reduce using rule 76 (expression -> expression AND expression .)
    EXPONENT_EQUALS reduce using rule 76 (expression -> expression AND expression .)
    AND_EQUALS      reduce using rule 76 (expression -> expression AND expression .)
    OR_EQUALS       reduce using rule 76 (expression -> expression AND expression .)
    AND             reduce using rule 76 (expression -> expression AND expression .)
    OR              reduce using rule 76 (expression -> expression AND expression .)
    FUNCTION        reduce using rule 76 (expression -> expression AND expression .)
    FOR             reduce using rule 76 (expression -> expression AND expression .)
    WHILE           reduce using rule 76 (expression -> expression AND expression .)
    IMPORT          reduce using rule 76 (expression -> expression AND expression .)
    CONTINUE        reduce using rule 76 (expression -> expression AND expression .)
    BREAK           reduce using rule 76 (expression -> expression AND expression .)
    PASS            reduce using rule 76 (expression -> expression AND expression .)
    RETURN          reduce using rule 76 (expression -> expression AND expression .)
    NOT_EQUALS      reduce using rule 76 (expression -> expression AND expression .)
    NOT             reduce using rule 76 (expression -> expression AND expression .)
    THIS            reduce using rule 76 (expression -> expression AND expression .)
    IF              reduce using rule 76 (expression -> expression AND expression .)
    BLANK           reduce using rule 76 (expression -> expression AND expression .)
    NULL            reduce using rule 76 (expression -> expression AND expression .)
    TRUE            reduce using rule 76 (expression -> expression AND expression .)
    FALSE           reduce using rule 76 (expression -> expression AND expression .)
    NUMERIC_LITERAL reduce using rule 76 (expression -> expression AND expression .)
    IDENTIFIER      reduce using rule 76 (expression -> expression AND expression .)
    LEFT_CURLY_BRACE reduce using rule 76 (expression -> expression AND expression .)
    STRING_LITERAL  reduce using rule 76 (expression -> expression AND expression .)
    ENDWHILE        reduce using rule 76 (expression -> expression AND expression .)
    $end            reduce using rule 76 (expression -> expression AND expression .)
    ENDFUNCTION     reduce using rule 76 (expression -> expression AND expression .)
    ENDIF           reduce using rule 76 (expression -> expression AND expression .)
    OTHERWISE       reduce using rule 76 (expression -> expression AND expression .)
    ELIF            reduce using rule 76 (expression -> expression AND expression .)
    ENDFOR          reduce using rule 76 (expression -> expression AND expression .)
    COLON           reduce using rule 76 (expression -> expression AND expression .)
    RIGHT_PAREN     reduce using rule 76 (expression -> expression AND expression .)
    COMMA           reduce using rule 76 (expression -> expression AND expression .)
    RIGHT_BOX       reduce using rule 76 (expression -> expression AND expression .)
    RIGHT_CURLY_BRACE reduce using rule 76 (expression -> expression AND expression .)
    LEFT_BOX        shift and go to state 85
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 76 (expression -> expression AND expression .) ]
  ! DOT             [ reduce using rule 76 (expression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 76 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 76 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 76 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 76 (expression -> expression AND expression .) ]
  ! MODULUS         [ reduce using rule 76 (expression -> expression AND expression .) ]
  ! EXPONENT        [ reduce using rule 76 (expression -> expression AND expression .) ]
  ! IN              [ reduce using rule 76 (expression -> expression AND expression .) ]
  ! HAS             [ reduce using rule 76 (expression -> expression AND expression .) ]
  ! EQUIVALENCE_EQUAL [ reduce using rule 76 (expression -> expression AND expression .) ]
  ! COMPARE_GT      [ reduce using rule 76 (expression -> expression AND expression .) ]
  ! COMPARE_GTET    [ reduce using rule 76 (expression -> expression AND expression .) ]
  ! COMPARE_LT      [ reduce using rule 76 (expression -> expression AND expression .) ]
  ! COMPARE_LTET    [ reduce using rule 76 (expression -> expression AND expression .) ]
  ! LEFT_PAREN      [ reduce using rule 76 (expression -> expression AND expression .) ]
  ! ASSIGN_EQUALS   [ shift and go to state 90 ]
  ! DOT_EQUALS      [ shift and go to state 67 ]
  ! PLUS_EQUALS     [ shift and go to state 89 ]
  ! MINUS_EQUALS    [ shift and go to state 73 ]
  ! TIMES_EQUALS    [ shift and go to state 81 ]
  ! DIVIDE_EQUALS   [ shift and go to state 91 ]
  ! MODULUS_EQUALS  [ shift and go to state 79 ]
  ! EXPONENT_EQUALS [ shift and go to state 93 ]
  ! AND_EQUALS      [ shift and go to state 83 ]
  ! OR_EQUALS       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 94 ]


state 132

    (65) expression -> expression MODULUS_EQUALS expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    FUNCTION        reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    FOR             reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    WHILE           reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    IMPORT          reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    CONTINUE        reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    BREAK           reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    PASS            reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    RETURN          reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    NOT_EQUALS      reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    NOT             reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    THIS            reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    IF              reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    BLANK           reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    NULL            reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    TRUE            reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    FALSE           reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    NUMERIC_LITERAL reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    IDENTIFIER      reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    LEFT_CURLY_BRACE reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    STRING_LITERAL  reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    ENDWHILE        reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    $end            reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    ENDFUNCTION     reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    ENDIF           reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    OTHERWISE       reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    ELIF            reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    ENDFOR          reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    COLON           reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    RIGHT_PAREN     reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    COMMA           reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    RIGHT_BOX       reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    RIGHT_CURLY_BRACE reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .)
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! ASSIGN_EQUALS   [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! DOT_EQUALS      [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! PLUS_EQUALS     [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! MINUS_EQUALS    [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! TIMES_EQUALS    [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! DIVIDE_EQUALS   [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! MODULUS_EQUALS  [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! EXPONENT_EQUALS [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! AND_EQUALS      [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! OR_EQUALS       [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! DOT             [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! PLUS            [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! MINUS           [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! TIMES           [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! MODULUS         [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! EXPONENT        [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! AND             [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! OR              [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! IN              [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! HAS             [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! EQUIVALENCE_EQUAL [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! COMPARE_GT      [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! COMPARE_GTET    [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! COMPARE_LT      [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! COMPARE_LTET    [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]
  ! LEFT_PAREN      [ reduce using rule 65 (expression -> expression MODULUS_EQUALS expression .) ]


state 133

    (73) expression -> expression DIVIDE expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    ASSIGN_EQUALS   reduce using rule 73 (expression -> expression DIVIDE expression .)
    DOT_EQUALS      reduce using rule 73 (expression -> expression DIVIDE expression .)
    PLUS_EQUALS     reduce using rule 73 (expression -> expression DIVIDE expression .)
    MINUS_EQUALS    reduce using rule 73 (expression -> expression DIVIDE expression .)
    TIMES_EQUALS    reduce using rule 73 (expression -> expression DIVIDE expression .)
    DIVIDE_EQUALS   reduce using rule 73 (expression -> expression DIVIDE expression .)
    MODULUS_EQUALS  reduce using rule 73 (expression -> expression DIVIDE expression .)
    EXPONENT_EQUALS reduce using rule 73 (expression -> expression DIVIDE expression .)
    AND_EQUALS      reduce using rule 73 (expression -> expression DIVIDE expression .)
    OR_EQUALS       reduce using rule 73 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 73 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 73 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 73 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 73 (expression -> expression DIVIDE expression .)
    MODULUS         reduce using rule 73 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 73 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 73 (expression -> expression DIVIDE expression .)
    IN              reduce using rule 73 (expression -> expression DIVIDE expression .)
    HAS             reduce using rule 73 (expression -> expression DIVIDE expression .)
    EQUIVALENCE_EQUAL reduce using rule 73 (expression -> expression DIVIDE expression .)
    COMPARE_GT      reduce using rule 73 (expression -> expression DIVIDE expression .)
    COMPARE_GTET    reduce using rule 73 (expression -> expression DIVIDE expression .)
    COMPARE_LT      reduce using rule 73 (expression -> expression DIVIDE expression .)
    COMPARE_LTET    reduce using rule 73 (expression -> expression DIVIDE expression .)
    FUNCTION        reduce using rule 73 (expression -> expression DIVIDE expression .)
    FOR             reduce using rule 73 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 73 (expression -> expression DIVIDE expression .)
    IMPORT          reduce using rule 73 (expression -> expression DIVIDE expression .)
    CONTINUE        reduce using rule 73 (expression -> expression DIVIDE expression .)
    BREAK           reduce using rule 73 (expression -> expression DIVIDE expression .)
    PASS            reduce using rule 73 (expression -> expression DIVIDE expression .)
    RETURN          reduce using rule 73 (expression -> expression DIVIDE expression .)
    NOT_EQUALS      reduce using rule 73 (expression -> expression DIVIDE expression .)
    NOT             reduce using rule 73 (expression -> expression DIVIDE expression .)
    THIS            reduce using rule 73 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 73 (expression -> expression DIVIDE expression .)
    BLANK           reduce using rule 73 (expression -> expression DIVIDE expression .)
    NULL            reduce using rule 73 (expression -> expression DIVIDE expression .)
    TRUE            reduce using rule 73 (expression -> expression DIVIDE expression .)
    FALSE           reduce using rule 73 (expression -> expression DIVIDE expression .)
    NUMERIC_LITERAL reduce using rule 73 (expression -> expression DIVIDE expression .)
    IDENTIFIER      reduce using rule 73 (expression -> expression DIVIDE expression .)
    LEFT_CURLY_BRACE reduce using rule 73 (expression -> expression DIVIDE expression .)
    STRING_LITERAL  reduce using rule 73 (expression -> expression DIVIDE expression .)
    ENDWHILE        reduce using rule 73 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 73 (expression -> expression DIVIDE expression .)
    ENDFUNCTION     reduce using rule 73 (expression -> expression DIVIDE expression .)
    ENDIF           reduce using rule 73 (expression -> expression DIVIDE expression .)
    OTHERWISE       reduce using rule 73 (expression -> expression DIVIDE expression .)
    ELIF            reduce using rule 73 (expression -> expression DIVIDE expression .)
    ENDFOR          reduce using rule 73 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 73 (expression -> expression DIVIDE expression .)
    RIGHT_PAREN     reduce using rule 73 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 73 (expression -> expression DIVIDE expression .)
    RIGHT_BOX       reduce using rule 73 (expression -> expression DIVIDE expression .)
    RIGHT_CURLY_BRACE reduce using rule 73 (expression -> expression DIVIDE expression .)
    LEFT_BOX        shift and go to state 85
    DOT             shift and go to state 72
    EXPONENT        shift and go to state 75
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 73 (expression -> expression DIVIDE expression .) ]
  ! DOT             [ reduce using rule 73 (expression -> expression DIVIDE expression .) ]
  ! EXPONENT        [ reduce using rule 73 (expression -> expression DIVIDE expression .) ]
  ! LEFT_PAREN      [ reduce using rule 73 (expression -> expression DIVIDE expression .) ]
  ! ASSIGN_EQUALS   [ shift and go to state 90 ]
  ! DOT_EQUALS      [ shift and go to state 67 ]
  ! PLUS_EQUALS     [ shift and go to state 89 ]
  ! MINUS_EQUALS    [ shift and go to state 73 ]
  ! TIMES_EQUALS    [ shift and go to state 81 ]
  ! DIVIDE_EQUALS   [ shift and go to state 91 ]
  ! MODULUS_EQUALS  [ shift and go to state 79 ]
  ! EXPONENT_EQUALS [ shift and go to state 93 ]
  ! AND_EQUALS      [ shift and go to state 83 ]
  ! OR_EQUALS       [ shift and go to state 84 ]
  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 71 ]
  ! TIMES           [ shift and go to state 87 ]
  ! DIVIDE          [ shift and go to state 80 ]
  ! MODULUS         [ shift and go to state 88 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 94 ]
  ! IN              [ shift and go to state 86 ]
  ! HAS             [ shift and go to state 74 ]
  ! EQUIVALENCE_EQUAL [ shift and go to state 68 ]
  ! COMPARE_GT      [ shift and go to state 70 ]
  ! COMPARE_GTET    [ shift and go to state 92 ]
  ! COMPARE_LT      [ shift and go to state 82 ]
  ! COMPARE_LTET    [ shift and go to state 69 ]


state 134

    (63) expression -> expression TIMES_EQUALS expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    FUNCTION        reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    FOR             reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    WHILE           reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    IMPORT          reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    CONTINUE        reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    BREAK           reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    PASS            reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    RETURN          reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    NOT_EQUALS      reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    NOT             reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    THIS            reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    IF              reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    BLANK           reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    NULL            reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    TRUE            reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    FALSE           reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    NUMERIC_LITERAL reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    IDENTIFIER      reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    LEFT_CURLY_BRACE reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    STRING_LITERAL  reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    ENDWHILE        reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    $end            reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    ENDFUNCTION     reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    ENDIF           reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    OTHERWISE       reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    ELIF            reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    ENDFOR          reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    COLON           reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    RIGHT_PAREN     reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    COMMA           reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    RIGHT_BOX       reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    RIGHT_CURLY_BRACE reduce using rule 63 (expression -> expression TIMES_EQUALS expression .)
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! ASSIGN_EQUALS   [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! DOT_EQUALS      [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! PLUS_EQUALS     [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! MINUS_EQUALS    [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! TIMES_EQUALS    [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! DIVIDE_EQUALS   [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! MODULUS_EQUALS  [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! EXPONENT_EQUALS [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! AND_EQUALS      [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! OR_EQUALS       [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! DOT             [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! PLUS            [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! MINUS           [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! TIMES           [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! MODULUS         [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! EXPONENT        [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! AND             [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! OR              [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! IN              [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! HAS             [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! EQUIVALENCE_EQUAL [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! COMPARE_GT      [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! COMPARE_GTET    [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! COMPARE_LT      [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! COMPARE_LTET    [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]
  ! LEFT_PAREN      [ reduce using rule 63 (expression -> expression TIMES_EQUALS expression .) ]


state 135

    (83) expression -> expression COMPARE_LT expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    ASSIGN_EQUALS   reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    DOT_EQUALS      reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    PLUS_EQUALS     reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    MINUS_EQUALS    reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    TIMES_EQUALS    reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    DIVIDE_EQUALS   reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    MODULUS_EQUALS  reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    EXPONENT_EQUALS reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    AND_EQUALS      reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    OR_EQUALS       reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    AND             reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    OR              reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    EQUIVALENCE_EQUAL reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    COMPARE_GT      reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    COMPARE_GTET    reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    COMPARE_LT      reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    COMPARE_LTET    reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    FUNCTION        reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    FOR             reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    WHILE           reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    IMPORT          reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    CONTINUE        reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    BREAK           reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    PASS            reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    RETURN          reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    NOT_EQUALS      reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    NOT             reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    THIS            reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    IF              reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    BLANK           reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    NULL            reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    TRUE            reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    FALSE           reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    NUMERIC_LITERAL reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    IDENTIFIER      reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    LEFT_CURLY_BRACE reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    STRING_LITERAL  reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    ENDWHILE        reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    $end            reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    ENDFUNCTION     reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    ENDIF           reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    OTHERWISE       reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    ELIF            reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    ENDFOR          reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    COLON           reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    RIGHT_PAREN     reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    COMMA           reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    RIGHT_BOX       reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    RIGHT_CURLY_BRACE reduce using rule 83 (expression -> expression COMPARE_LT expression .)
    LEFT_BOX        shift and go to state 85
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    IN              shift and go to state 86
    HAS             shift and go to state 74
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 83 (expression -> expression COMPARE_LT expression .) ]
  ! DOT             [ reduce using rule 83 (expression -> expression COMPARE_LT expression .) ]
  ! PLUS            [ reduce using rule 83 (expression -> expression COMPARE_LT expression .) ]
  ! MINUS           [ reduce using rule 83 (expression -> expression COMPARE_LT expression .) ]
  ! TIMES           [ reduce using rule 83 (expression -> expression COMPARE_LT expression .) ]
  ! DIVIDE          [ reduce using rule 83 (expression -> expression COMPARE_LT expression .) ]
  ! MODULUS         [ reduce using rule 83 (expression -> expression COMPARE_LT expression .) ]
  ! EXPONENT        [ reduce using rule 83 (expression -> expression COMPARE_LT expression .) ]
  ! IN              [ reduce using rule 83 (expression -> expression COMPARE_LT expression .) ]
  ! HAS             [ reduce using rule 83 (expression -> expression COMPARE_LT expression .) ]
  ! LEFT_PAREN      [ reduce using rule 83 (expression -> expression COMPARE_LT expression .) ]
  ! ASSIGN_EQUALS   [ shift and go to state 90 ]
  ! DOT_EQUALS      [ shift and go to state 67 ]
  ! PLUS_EQUALS     [ shift and go to state 89 ]
  ! MINUS_EQUALS    [ shift and go to state 73 ]
  ! TIMES_EQUALS    [ shift and go to state 81 ]
  ! DIVIDE_EQUALS   [ shift and go to state 91 ]
  ! MODULUS_EQUALS  [ shift and go to state 79 ]
  ! EXPONENT_EQUALS [ shift and go to state 93 ]
  ! AND_EQUALS      [ shift and go to state 83 ]
  ! OR_EQUALS       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 94 ]
  ! EQUIVALENCE_EQUAL [ shift and go to state 68 ]
  ! COMPARE_GT      [ shift and go to state 70 ]
  ! COMPARE_GTET    [ shift and go to state 92 ]
  ! COMPARE_LT      [ shift and go to state 82 ]
  ! COMPARE_LTET    [ shift and go to state 69 ]


state 136

    (67) expression -> expression AND_EQUALS expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    FUNCTION        reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    FOR             reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    WHILE           reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    IMPORT          reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    CONTINUE        reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    BREAK           reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    PASS            reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    RETURN          reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    NOT_EQUALS      reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    NOT             reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    THIS            reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    IF              reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    BLANK           reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    NULL            reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    TRUE            reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    FALSE           reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    NUMERIC_LITERAL reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    IDENTIFIER      reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    LEFT_CURLY_BRACE reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    STRING_LITERAL  reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    ENDWHILE        reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    $end            reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    ENDFUNCTION     reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    ENDIF           reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    OTHERWISE       reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    ELIF            reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    ENDFOR          reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    COLON           reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    RIGHT_PAREN     reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    COMMA           reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    RIGHT_BOX       reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    RIGHT_CURLY_BRACE reduce using rule 67 (expression -> expression AND_EQUALS expression .)
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! ASSIGN_EQUALS   [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! DOT_EQUALS      [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! PLUS_EQUALS     [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! MINUS_EQUALS    [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! TIMES_EQUALS    [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! DIVIDE_EQUALS   [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! MODULUS_EQUALS  [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! EXPONENT_EQUALS [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! AND_EQUALS      [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! OR_EQUALS       [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! DOT             [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! PLUS            [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! MINUS           [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! TIMES           [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! MODULUS         [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! EXPONENT        [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! AND             [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! OR              [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! IN              [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! HAS             [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! EQUIVALENCE_EQUAL [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! COMPARE_GT      [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! COMPARE_GTET    [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! COMPARE_LT      [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! COMPARE_LTET    [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]
  ! LEFT_PAREN      [ reduce using rule 67 (expression -> expression AND_EQUALS expression .) ]


state 137

    (68) expression -> expression OR_EQUALS expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    FUNCTION        reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    FOR             reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    WHILE           reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    IMPORT          reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    CONTINUE        reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    BREAK           reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    PASS            reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    RETURN          reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    NOT_EQUALS      reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    NOT             reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    THIS            reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    IF              reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    BLANK           reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    NULL            reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    TRUE            reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    FALSE           reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    NUMERIC_LITERAL reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    IDENTIFIER      reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    LEFT_CURLY_BRACE reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    STRING_LITERAL  reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    ENDWHILE        reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    $end            reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    ENDFUNCTION     reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    ENDIF           reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    OTHERWISE       reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    ELIF            reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    ENDFOR          reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    COLON           reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    RIGHT_PAREN     reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    COMMA           reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    RIGHT_BOX       reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    RIGHT_CURLY_BRACE reduce using rule 68 (expression -> expression OR_EQUALS expression .)
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! ASSIGN_EQUALS   [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! DOT_EQUALS      [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! PLUS_EQUALS     [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! MINUS_EQUALS    [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! TIMES_EQUALS    [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! DIVIDE_EQUALS   [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! MODULUS_EQUALS  [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! EXPONENT_EQUALS [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! AND_EQUALS      [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! OR_EQUALS       [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! DOT             [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! PLUS            [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! MINUS           [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! TIMES           [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! MODULUS         [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! EXPONENT        [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! AND             [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! OR              [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! IN              [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! HAS             [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! EQUIVALENCE_EQUAL [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! COMPARE_GT      [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! COMPARE_GTET    [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! COMPARE_LT      [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! COMPARE_LTET    [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]
  ! LEFT_PAREN      [ reduce using rule 68 (expression -> expression OR_EQUALS expression .) ]


state 138

    (57) expression -> expression LEFT_BOX array_operator_insides . RIGHT_BOX

    RIGHT_BOX       shift and go to state 172



state 139

    (113) array_operator_missing -> COLON . expression
    (114) array_operator_missing -> COLON .
    (116) array_operator_missing -> COLON . expression COLON expression
    (117) array_operator_missing -> COLON . COLON expression
    (118) array_operator_missing -> COLON . COLON
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    RIGHT_BOX       reduce using rule 114 (array_operator_missing -> COLON .)
    COLON           shift and go to state 173
    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 174

state 140

    (58) expression -> expression LEFT_BOX array_operator_missing . RIGHT_BOX

    RIGHT_BOX       shift and go to state 175



state 141

    (109) array_operator_insides -> expression .
    (110) array_operator_insides -> expression . COLON expression
    (111) array_operator_insides -> expression . COLON expression COLON expression
    (112) array_operator_missing -> expression . COLON
    (115) array_operator_missing -> expression . COLON COLON expression
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    RIGHT_BOX       reduce using rule 109 (array_operator_insides -> expression .)
    COLON           shift and go to state 176
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76



state 142

    (78) expression -> expression IN expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    ASSIGN_EQUALS   reduce using rule 78 (expression -> expression IN expression .)
    DOT_EQUALS      reduce using rule 78 (expression -> expression IN expression .)
    PLUS_EQUALS     reduce using rule 78 (expression -> expression IN expression .)
    MINUS_EQUALS    reduce using rule 78 (expression -> expression IN expression .)
    TIMES_EQUALS    reduce using rule 78 (expression -> expression IN expression .)
    DIVIDE_EQUALS   reduce using rule 78 (expression -> expression IN expression .)
    MODULUS_EQUALS  reduce using rule 78 (expression -> expression IN expression .)
    EXPONENT_EQUALS reduce using rule 78 (expression -> expression IN expression .)
    AND_EQUALS      reduce using rule 78 (expression -> expression IN expression .)
    OR_EQUALS       reduce using rule 78 (expression -> expression IN expression .)
    AND             reduce using rule 78 (expression -> expression IN expression .)
    OR              reduce using rule 78 (expression -> expression IN expression .)
    IN              reduce using rule 78 (expression -> expression IN expression .)
    HAS             reduce using rule 78 (expression -> expression IN expression .)
    EQUIVALENCE_EQUAL reduce using rule 78 (expression -> expression IN expression .)
    COMPARE_GT      reduce using rule 78 (expression -> expression IN expression .)
    COMPARE_GTET    reduce using rule 78 (expression -> expression IN expression .)
    COMPARE_LT      reduce using rule 78 (expression -> expression IN expression .)
    COMPARE_LTET    reduce using rule 78 (expression -> expression IN expression .)
    FUNCTION        reduce using rule 78 (expression -> expression IN expression .)
    FOR             reduce using rule 78 (expression -> expression IN expression .)
    WHILE           reduce using rule 78 (expression -> expression IN expression .)
    IMPORT          reduce using rule 78 (expression -> expression IN expression .)
    CONTINUE        reduce using rule 78 (expression -> expression IN expression .)
    BREAK           reduce using rule 78 (expression -> expression IN expression .)
    PASS            reduce using rule 78 (expression -> expression IN expression .)
    RETURN          reduce using rule 78 (expression -> expression IN expression .)
    NOT_EQUALS      reduce using rule 78 (expression -> expression IN expression .)
    NOT             reduce using rule 78 (expression -> expression IN expression .)
    THIS            reduce using rule 78 (expression -> expression IN expression .)
    IF              reduce using rule 78 (expression -> expression IN expression .)
    BLANK           reduce using rule 78 (expression -> expression IN expression .)
    NULL            reduce using rule 78 (expression -> expression IN expression .)
    TRUE            reduce using rule 78 (expression -> expression IN expression .)
    FALSE           reduce using rule 78 (expression -> expression IN expression .)
    NUMERIC_LITERAL reduce using rule 78 (expression -> expression IN expression .)
    IDENTIFIER      reduce using rule 78 (expression -> expression IN expression .)
    LEFT_CURLY_BRACE reduce using rule 78 (expression -> expression IN expression .)
    STRING_LITERAL  reduce using rule 78 (expression -> expression IN expression .)
    ENDWHILE        reduce using rule 78 (expression -> expression IN expression .)
    $end            reduce using rule 78 (expression -> expression IN expression .)
    ENDFUNCTION     reduce using rule 78 (expression -> expression IN expression .)
    ENDIF           reduce using rule 78 (expression -> expression IN expression .)
    OTHERWISE       reduce using rule 78 (expression -> expression IN expression .)
    ELIF            reduce using rule 78 (expression -> expression IN expression .)
    ENDFOR          reduce using rule 78 (expression -> expression IN expression .)
    COLON           reduce using rule 78 (expression -> expression IN expression .)
    RIGHT_PAREN     reduce using rule 78 (expression -> expression IN expression .)
    COMMA           reduce using rule 78 (expression -> expression IN expression .)
    RIGHT_BOX       reduce using rule 78 (expression -> expression IN expression .)
    RIGHT_CURLY_BRACE reduce using rule 78 (expression -> expression IN expression .)
    LEFT_BOX        shift and go to state 85
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 78 (expression -> expression IN expression .) ]
  ! DOT             [ reduce using rule 78 (expression -> expression IN expression .) ]
  ! PLUS            [ reduce using rule 78 (expression -> expression IN expression .) ]
  ! MINUS           [ reduce using rule 78 (expression -> expression IN expression .) ]
  ! TIMES           [ reduce using rule 78 (expression -> expression IN expression .) ]
  ! DIVIDE          [ reduce using rule 78 (expression -> expression IN expression .) ]
  ! MODULUS         [ reduce using rule 78 (expression -> expression IN expression .) ]
  ! EXPONENT        [ reduce using rule 78 (expression -> expression IN expression .) ]
  ! LEFT_PAREN      [ reduce using rule 78 (expression -> expression IN expression .) ]
  ! ASSIGN_EQUALS   [ shift and go to state 90 ]
  ! DOT_EQUALS      [ shift and go to state 67 ]
  ! PLUS_EQUALS     [ shift and go to state 89 ]
  ! MINUS_EQUALS    [ shift and go to state 73 ]
  ! TIMES_EQUALS    [ shift and go to state 81 ]
  ! DIVIDE_EQUALS   [ shift and go to state 91 ]
  ! MODULUS_EQUALS  [ shift and go to state 79 ]
  ! EXPONENT_EQUALS [ shift and go to state 93 ]
  ! AND_EQUALS      [ shift and go to state 83 ]
  ! OR_EQUALS       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 94 ]
  ! IN              [ shift and go to state 86 ]
  ! HAS             [ shift and go to state 74 ]
  ! EQUIVALENCE_EQUAL [ shift and go to state 68 ]
  ! COMPARE_GT      [ shift and go to state 70 ]
  ! COMPARE_GTET    [ shift and go to state 92 ]
  ! COMPARE_LT      [ shift and go to state 82 ]
  ! COMPARE_LTET    [ shift and go to state 69 ]


state 143

    (72) expression -> expression TIMES expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    ASSIGN_EQUALS   reduce using rule 72 (expression -> expression TIMES expression .)
    DOT_EQUALS      reduce using rule 72 (expression -> expression TIMES expression .)
    PLUS_EQUALS     reduce using rule 72 (expression -> expression TIMES expression .)
    MINUS_EQUALS    reduce using rule 72 (expression -> expression TIMES expression .)
    TIMES_EQUALS    reduce using rule 72 (expression -> expression TIMES expression .)
    DIVIDE_EQUALS   reduce using rule 72 (expression -> expression TIMES expression .)
    MODULUS_EQUALS  reduce using rule 72 (expression -> expression TIMES expression .)
    EXPONENT_EQUALS reduce using rule 72 (expression -> expression TIMES expression .)
    AND_EQUALS      reduce using rule 72 (expression -> expression TIMES expression .)
    OR_EQUALS       reduce using rule 72 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 72 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 72 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 72 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 72 (expression -> expression TIMES expression .)
    MODULUS         reduce using rule 72 (expression -> expression TIMES expression .)
    AND             reduce using rule 72 (expression -> expression TIMES expression .)
    OR              reduce using rule 72 (expression -> expression TIMES expression .)
    IN              reduce using rule 72 (expression -> expression TIMES expression .)
    HAS             reduce using rule 72 (expression -> expression TIMES expression .)
    EQUIVALENCE_EQUAL reduce using rule 72 (expression -> expression TIMES expression .)
    COMPARE_GT      reduce using rule 72 (expression -> expression TIMES expression .)
    COMPARE_GTET    reduce using rule 72 (expression -> expression TIMES expression .)
    COMPARE_LT      reduce using rule 72 (expression -> expression TIMES expression .)
    COMPARE_LTET    reduce using rule 72 (expression -> expression TIMES expression .)
    FUNCTION        reduce using rule 72 (expression -> expression TIMES expression .)
    FOR             reduce using rule 72 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 72 (expression -> expression TIMES expression .)
    IMPORT          reduce using rule 72 (expression -> expression TIMES expression .)
    CONTINUE        reduce using rule 72 (expression -> expression TIMES expression .)
    BREAK           reduce using rule 72 (expression -> expression TIMES expression .)
    PASS            reduce using rule 72 (expression -> expression TIMES expression .)
    RETURN          reduce using rule 72 (expression -> expression TIMES expression .)
    NOT_EQUALS      reduce using rule 72 (expression -> expression TIMES expression .)
    NOT             reduce using rule 72 (expression -> expression TIMES expression .)
    THIS            reduce using rule 72 (expression -> expression TIMES expression .)
    IF              reduce using rule 72 (expression -> expression TIMES expression .)
    BLANK           reduce using rule 72 (expression -> expression TIMES expression .)
    NULL            reduce using rule 72 (expression -> expression TIMES expression .)
    TRUE            reduce using rule 72 (expression -> expression TIMES expression .)
    FALSE           reduce using rule 72 (expression -> expression TIMES expression .)
    NUMERIC_LITERAL reduce using rule 72 (expression -> expression TIMES expression .)
    IDENTIFIER      reduce using rule 72 (expression -> expression TIMES expression .)
    LEFT_CURLY_BRACE reduce using rule 72 (expression -> expression TIMES expression .)
    STRING_LITERAL  reduce using rule 72 (expression -> expression TIMES expression .)
    ENDWHILE        reduce using rule 72 (expression -> expression TIMES expression .)
    $end            reduce using rule 72 (expression -> expression TIMES expression .)
    ENDFUNCTION     reduce using rule 72 (expression -> expression TIMES expression .)
    ENDIF           reduce using rule 72 (expression -> expression TIMES expression .)
    OTHERWISE       reduce using rule 72 (expression -> expression TIMES expression .)
    ELIF            reduce using rule 72 (expression -> expression TIMES expression .)
    ENDFOR          reduce using rule 72 (expression -> expression TIMES expression .)
    COLON           reduce using rule 72 (expression -> expression TIMES expression .)
    RIGHT_PAREN     reduce using rule 72 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 72 (expression -> expression TIMES expression .)
    RIGHT_BOX       reduce using rule 72 (expression -> expression TIMES expression .)
    RIGHT_CURLY_BRACE reduce using rule 72 (expression -> expression TIMES expression .)
    LEFT_BOX        shift and go to state 85
    DOT             shift and go to state 72
    EXPONENT        shift and go to state 75
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 72 (expression -> expression TIMES expression .) ]
  ! DOT             [ reduce using rule 72 (expression -> expression TIMES expression .) ]
  ! EXPONENT        [ reduce using rule 72 (expression -> expression TIMES expression .) ]
  ! LEFT_PAREN      [ reduce using rule 72 (expression -> expression TIMES expression .) ]
  ! ASSIGN_EQUALS   [ shift and go to state 90 ]
  ! DOT_EQUALS      [ shift and go to state 67 ]
  ! PLUS_EQUALS     [ shift and go to state 89 ]
  ! MINUS_EQUALS    [ shift and go to state 73 ]
  ! TIMES_EQUALS    [ shift and go to state 81 ]
  ! DIVIDE_EQUALS   [ shift and go to state 91 ]
  ! MODULUS_EQUALS  [ shift and go to state 79 ]
  ! EXPONENT_EQUALS [ shift and go to state 93 ]
  ! AND_EQUALS      [ shift and go to state 83 ]
  ! OR_EQUALS       [ shift and go to state 84 ]
  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 71 ]
  ! TIMES           [ shift and go to state 87 ]
  ! DIVIDE          [ shift and go to state 80 ]
  ! MODULUS         [ shift and go to state 88 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 94 ]
  ! IN              [ shift and go to state 86 ]
  ! HAS             [ shift and go to state 74 ]
  ! EQUIVALENCE_EQUAL [ shift and go to state 68 ]
  ! COMPARE_GT      [ shift and go to state 70 ]
  ! COMPARE_GTET    [ shift and go to state 92 ]
  ! COMPARE_LT      [ shift and go to state 82 ]
  ! COMPARE_LTET    [ shift and go to state 69 ]


state 144

    (74) expression -> expression MODULUS expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    ASSIGN_EQUALS   reduce using rule 74 (expression -> expression MODULUS expression .)
    DOT_EQUALS      reduce using rule 74 (expression -> expression MODULUS expression .)
    PLUS_EQUALS     reduce using rule 74 (expression -> expression MODULUS expression .)
    MINUS_EQUALS    reduce using rule 74 (expression -> expression MODULUS expression .)
    TIMES_EQUALS    reduce using rule 74 (expression -> expression MODULUS expression .)
    DIVIDE_EQUALS   reduce using rule 74 (expression -> expression MODULUS expression .)
    MODULUS_EQUALS  reduce using rule 74 (expression -> expression MODULUS expression .)
    EXPONENT_EQUALS reduce using rule 74 (expression -> expression MODULUS expression .)
    AND_EQUALS      reduce using rule 74 (expression -> expression MODULUS expression .)
    OR_EQUALS       reduce using rule 74 (expression -> expression MODULUS expression .)
    PLUS            reduce using rule 74 (expression -> expression MODULUS expression .)
    MINUS           reduce using rule 74 (expression -> expression MODULUS expression .)
    TIMES           reduce using rule 74 (expression -> expression MODULUS expression .)
    DIVIDE          reduce using rule 74 (expression -> expression MODULUS expression .)
    MODULUS         reduce using rule 74 (expression -> expression MODULUS expression .)
    AND             reduce using rule 74 (expression -> expression MODULUS expression .)
    OR              reduce using rule 74 (expression -> expression MODULUS expression .)
    IN              reduce using rule 74 (expression -> expression MODULUS expression .)
    HAS             reduce using rule 74 (expression -> expression MODULUS expression .)
    EQUIVALENCE_EQUAL reduce using rule 74 (expression -> expression MODULUS expression .)
    COMPARE_GT      reduce using rule 74 (expression -> expression MODULUS expression .)
    COMPARE_GTET    reduce using rule 74 (expression -> expression MODULUS expression .)
    COMPARE_LT      reduce using rule 74 (expression -> expression MODULUS expression .)
    COMPARE_LTET    reduce using rule 74 (expression -> expression MODULUS expression .)
    FUNCTION        reduce using rule 74 (expression -> expression MODULUS expression .)
    FOR             reduce using rule 74 (expression -> expression MODULUS expression .)
    WHILE           reduce using rule 74 (expression -> expression MODULUS expression .)
    IMPORT          reduce using rule 74 (expression -> expression MODULUS expression .)
    CONTINUE        reduce using rule 74 (expression -> expression MODULUS expression .)
    BREAK           reduce using rule 74 (expression -> expression MODULUS expression .)
    PASS            reduce using rule 74 (expression -> expression MODULUS expression .)
    RETURN          reduce using rule 74 (expression -> expression MODULUS expression .)
    NOT_EQUALS      reduce using rule 74 (expression -> expression MODULUS expression .)
    NOT             reduce using rule 74 (expression -> expression MODULUS expression .)
    THIS            reduce using rule 74 (expression -> expression MODULUS expression .)
    IF              reduce using rule 74 (expression -> expression MODULUS expression .)
    BLANK           reduce using rule 74 (expression -> expression MODULUS expression .)
    NULL            reduce using rule 74 (expression -> expression MODULUS expression .)
    TRUE            reduce using rule 74 (expression -> expression MODULUS expression .)
    FALSE           reduce using rule 74 (expression -> expression MODULUS expression .)
    NUMERIC_LITERAL reduce using rule 74 (expression -> expression MODULUS expression .)
    IDENTIFIER      reduce using rule 74 (expression -> expression MODULUS expression .)
    LEFT_CURLY_BRACE reduce using rule 74 (expression -> expression MODULUS expression .)
    STRING_LITERAL  reduce using rule 74 (expression -> expression MODULUS expression .)
    ENDWHILE        reduce using rule 74 (expression -> expression MODULUS expression .)
    $end            reduce using rule 74 (expression -> expression MODULUS expression .)
    ENDFUNCTION     reduce using rule 74 (expression -> expression MODULUS expression .)
    ENDIF           reduce using rule 74 (expression -> expression MODULUS expression .)
    OTHERWISE       reduce using rule 74 (expression -> expression MODULUS expression .)
    ELIF            reduce using rule 74 (expression -> expression MODULUS expression .)
    ENDFOR          reduce using rule 74 (expression -> expression MODULUS expression .)
    COLON           reduce using rule 74 (expression -> expression MODULUS expression .)
    RIGHT_PAREN     reduce using rule 74 (expression -> expression MODULUS expression .)
    COMMA           reduce using rule 74 (expression -> expression MODULUS expression .)
    RIGHT_BOX       reduce using rule 74 (expression -> expression MODULUS expression .)
    RIGHT_CURLY_BRACE reduce using rule 74 (expression -> expression MODULUS expression .)
    LEFT_BOX        shift and go to state 85
    DOT             shift and go to state 72
    EXPONENT        shift and go to state 75
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 74 (expression -> expression MODULUS expression .) ]
  ! DOT             [ reduce using rule 74 (expression -> expression MODULUS expression .) ]
  ! EXPONENT        [ reduce using rule 74 (expression -> expression MODULUS expression .) ]
  ! LEFT_PAREN      [ reduce using rule 74 (expression -> expression MODULUS expression .) ]
  ! ASSIGN_EQUALS   [ shift and go to state 90 ]
  ! DOT_EQUALS      [ shift and go to state 67 ]
  ! PLUS_EQUALS     [ shift and go to state 89 ]
  ! MINUS_EQUALS    [ shift and go to state 73 ]
  ! TIMES_EQUALS    [ shift and go to state 81 ]
  ! DIVIDE_EQUALS   [ shift and go to state 91 ]
  ! MODULUS_EQUALS  [ shift and go to state 79 ]
  ! EXPONENT_EQUALS [ shift and go to state 93 ]
  ! AND_EQUALS      [ shift and go to state 83 ]
  ! OR_EQUALS       [ shift and go to state 84 ]
  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 71 ]
  ! TIMES           [ shift and go to state 87 ]
  ! DIVIDE          [ shift and go to state 80 ]
  ! MODULUS         [ shift and go to state 88 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 94 ]
  ! IN              [ shift and go to state 86 ]
  ! HAS             [ shift and go to state 74 ]
  ! EQUIVALENCE_EQUAL [ shift and go to state 68 ]
  ! COMPARE_GT      [ shift and go to state 70 ]
  ! COMPARE_GTET    [ shift and go to state 92 ]
  ! COMPARE_LT      [ shift and go to state 82 ]
  ! COMPARE_LTET    [ shift and go to state 69 ]


state 145

    (61) expression -> expression PLUS_EQUALS expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    FUNCTION        reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    FOR             reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    WHILE           reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    IMPORT          reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    CONTINUE        reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    BREAK           reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    PASS            reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    RETURN          reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    NOT_EQUALS      reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    NOT             reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    THIS            reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    IF              reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    BLANK           reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    NULL            reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    TRUE            reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    FALSE           reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    NUMERIC_LITERAL reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    IDENTIFIER      reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    LEFT_CURLY_BRACE reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    STRING_LITERAL  reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    ENDWHILE        reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    $end            reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    ENDFUNCTION     reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    ENDIF           reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    OTHERWISE       reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    ELIF            reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    ENDFOR          reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    COLON           reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    RIGHT_PAREN     reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    COMMA           reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    RIGHT_BOX       reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    RIGHT_CURLY_BRACE reduce using rule 61 (expression -> expression PLUS_EQUALS expression .)
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! ASSIGN_EQUALS   [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! DOT_EQUALS      [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! PLUS_EQUALS     [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! MINUS_EQUALS    [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! TIMES_EQUALS    [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! DIVIDE_EQUALS   [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! MODULUS_EQUALS  [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! EXPONENT_EQUALS [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! AND_EQUALS      [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! OR_EQUALS       [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! DOT             [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! PLUS            [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! TIMES           [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! MODULUS         [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! EXPONENT        [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! AND             [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! OR              [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! IN              [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! HAS             [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! EQUIVALENCE_EQUAL [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! COMPARE_GT      [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! COMPARE_GTET    [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! COMPARE_LT      [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! COMPARE_LTET    [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]
  ! LEFT_PAREN      [ reduce using rule 61 (expression -> expression PLUS_EQUALS expression .) ]


state 146

    (59) expression -> expression ASSIGN_EQUALS expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    FUNCTION        reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    FOR             reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    WHILE           reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    IMPORT          reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    CONTINUE        reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    BREAK           reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    PASS            reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    RETURN          reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    NOT_EQUALS      reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    NOT             reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    THIS            reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    IF              reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    BLANK           reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    NULL            reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    TRUE            reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    FALSE           reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    NUMERIC_LITERAL reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    IDENTIFIER      reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    LEFT_CURLY_BRACE reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    STRING_LITERAL  reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    ENDWHILE        reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    $end            reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    ENDFUNCTION     reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    ENDIF           reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    OTHERWISE       reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    ELIF            reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    ENDFOR          reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    COLON           reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    RIGHT_PAREN     reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    COMMA           reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    RIGHT_BOX       reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    RIGHT_CURLY_BRACE reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .)
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! ASSIGN_EQUALS   [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! DOT_EQUALS      [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! PLUS_EQUALS     [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! MINUS_EQUALS    [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! TIMES_EQUALS    [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! DIVIDE_EQUALS   [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! MODULUS_EQUALS  [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! EXPONENT_EQUALS [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! AND_EQUALS      [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! OR_EQUALS       [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! DOT             [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! PLUS            [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! TIMES           [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! MODULUS         [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! EXPONENT        [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! AND             [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! OR              [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! IN              [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! HAS             [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! EQUIVALENCE_EQUAL [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! COMPARE_GT      [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! COMPARE_GTET    [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! COMPARE_LT      [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! COMPARE_LTET    [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]
  ! LEFT_PAREN      [ reduce using rule 59 (expression -> expression ASSIGN_EQUALS expression .) ]


state 147

    (64) expression -> expression DIVIDE_EQUALS expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    FUNCTION        reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    FOR             reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    WHILE           reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    IMPORT          reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    CONTINUE        reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    BREAK           reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    PASS            reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    RETURN          reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    NOT_EQUALS      reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    NOT             reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    THIS            reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    IF              reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    BLANK           reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    NULL            reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    TRUE            reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    FALSE           reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    NUMERIC_LITERAL reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    IDENTIFIER      reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    LEFT_CURLY_BRACE reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    STRING_LITERAL  reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    ENDWHILE        reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    $end            reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    ENDFUNCTION     reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    ENDIF           reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    OTHERWISE       reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    ELIF            reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    ENDFOR          reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    COLON           reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    RIGHT_PAREN     reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    COMMA           reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    RIGHT_BOX       reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    RIGHT_CURLY_BRACE reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .)
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! ASSIGN_EQUALS   [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! DOT_EQUALS      [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! PLUS_EQUALS     [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! MINUS_EQUALS    [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! TIMES_EQUALS    [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! DIVIDE_EQUALS   [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! MODULUS_EQUALS  [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! EXPONENT_EQUALS [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! AND_EQUALS      [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! OR_EQUALS       [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! DOT             [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! PLUS            [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! MINUS           [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! TIMES           [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! MODULUS         [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! EXPONENT        [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! AND             [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! OR              [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! IN              [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! HAS             [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! EQUIVALENCE_EQUAL [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! COMPARE_GT      [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! COMPARE_GTET    [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! COMPARE_LT      [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! COMPARE_LTET    [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]
  ! LEFT_PAREN      [ reduce using rule 64 (expression -> expression DIVIDE_EQUALS expression .) ]


state 148

    (82) expression -> expression COMPARE_GTET expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    ASSIGN_EQUALS   reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    DOT_EQUALS      reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    PLUS_EQUALS     reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    MINUS_EQUALS    reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    TIMES_EQUALS    reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    DIVIDE_EQUALS   reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    MODULUS_EQUALS  reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    EXPONENT_EQUALS reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    AND_EQUALS      reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    OR_EQUALS       reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    AND             reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    OR              reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    EQUIVALENCE_EQUAL reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    COMPARE_GT      reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    COMPARE_GTET    reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    COMPARE_LT      reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    COMPARE_LTET    reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    FUNCTION        reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    FOR             reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    WHILE           reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    IMPORT          reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    CONTINUE        reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    BREAK           reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    PASS            reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    RETURN          reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    NOT_EQUALS      reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    NOT             reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    THIS            reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    IF              reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    BLANK           reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    NULL            reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    TRUE            reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    FALSE           reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    NUMERIC_LITERAL reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    IDENTIFIER      reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    LEFT_CURLY_BRACE reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    STRING_LITERAL  reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    ENDWHILE        reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    $end            reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    ENDFUNCTION     reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    ENDIF           reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    OTHERWISE       reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    ELIF            reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    ENDFOR          reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    COLON           reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    RIGHT_PAREN     reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    COMMA           reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    RIGHT_BOX       reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    RIGHT_CURLY_BRACE reduce using rule 82 (expression -> expression COMPARE_GTET expression .)
    LEFT_BOX        shift and go to state 85
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    IN              shift and go to state 86
    HAS             shift and go to state 74
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 82 (expression -> expression COMPARE_GTET expression .) ]
  ! DOT             [ reduce using rule 82 (expression -> expression COMPARE_GTET expression .) ]
  ! PLUS            [ reduce using rule 82 (expression -> expression COMPARE_GTET expression .) ]
  ! MINUS           [ reduce using rule 82 (expression -> expression COMPARE_GTET expression .) ]
  ! TIMES           [ reduce using rule 82 (expression -> expression COMPARE_GTET expression .) ]
  ! DIVIDE          [ reduce using rule 82 (expression -> expression COMPARE_GTET expression .) ]
  ! MODULUS         [ reduce using rule 82 (expression -> expression COMPARE_GTET expression .) ]
  ! EXPONENT        [ reduce using rule 82 (expression -> expression COMPARE_GTET expression .) ]
  ! IN              [ reduce using rule 82 (expression -> expression COMPARE_GTET expression .) ]
  ! HAS             [ reduce using rule 82 (expression -> expression COMPARE_GTET expression .) ]
  ! LEFT_PAREN      [ reduce using rule 82 (expression -> expression COMPARE_GTET expression .) ]
  ! ASSIGN_EQUALS   [ shift and go to state 90 ]
  ! DOT_EQUALS      [ shift and go to state 67 ]
  ! PLUS_EQUALS     [ shift and go to state 89 ]
  ! MINUS_EQUALS    [ shift and go to state 73 ]
  ! TIMES_EQUALS    [ shift and go to state 81 ]
  ! DIVIDE_EQUALS   [ shift and go to state 91 ]
  ! MODULUS_EQUALS  [ shift and go to state 79 ]
  ! EXPONENT_EQUALS [ shift and go to state 93 ]
  ! AND_EQUALS      [ shift and go to state 83 ]
  ! OR_EQUALS       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 94 ]
  ! EQUIVALENCE_EQUAL [ shift and go to state 68 ]
  ! COMPARE_GT      [ shift and go to state 70 ]
  ! COMPARE_GTET    [ shift and go to state 92 ]
  ! COMPARE_LT      [ shift and go to state 82 ]
  ! COMPARE_LTET    [ shift and go to state 69 ]


state 149

    (66) expression -> expression EXPONENT_EQUALS expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    FUNCTION        reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    FOR             reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    WHILE           reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    IMPORT          reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    CONTINUE        reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    BREAK           reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    PASS            reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    RETURN          reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    NOT_EQUALS      reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    NOT             reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    THIS            reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    IF              reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    BLANK           reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    NULL            reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    TRUE            reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    FALSE           reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    NUMERIC_LITERAL reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    IDENTIFIER      reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    LEFT_CURLY_BRACE reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    STRING_LITERAL  reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    ENDWHILE        reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    $end            reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    ENDFUNCTION     reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    ENDIF           reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    OTHERWISE       reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    ELIF            reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    ENDFOR          reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    COLON           reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    RIGHT_PAREN     reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    COMMA           reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    RIGHT_BOX       reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    RIGHT_CURLY_BRACE reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .)
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! ASSIGN_EQUALS   [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! DOT_EQUALS      [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! PLUS_EQUALS     [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! MINUS_EQUALS    [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! TIMES_EQUALS    [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! DIVIDE_EQUALS   [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! MODULUS_EQUALS  [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! EXPONENT_EQUALS [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! AND_EQUALS      [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! OR_EQUALS       [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! DOT             [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! PLUS            [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! MINUS           [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! TIMES           [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! MODULUS         [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! EXPONENT        [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! AND             [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! OR              [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! IN              [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! HAS             [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! EQUIVALENCE_EQUAL [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! COMPARE_GT      [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! COMPARE_GTET    [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! COMPARE_LT      [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! COMPARE_LTET    [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]
  ! LEFT_PAREN      [ reduce using rule 66 (expression -> expression EXPONENT_EQUALS expression .) ]


state 150

    (77) expression -> expression OR expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    ASSIGN_EQUALS   reduce using rule 77 (expression -> expression OR expression .)
    DOT_EQUALS      reduce using rule 77 (expression -> expression OR expression .)
    PLUS_EQUALS     reduce using rule 77 (expression -> expression OR expression .)
    MINUS_EQUALS    reduce using rule 77 (expression -> expression OR expression .)
    TIMES_EQUALS    reduce using rule 77 (expression -> expression OR expression .)
    DIVIDE_EQUALS   reduce using rule 77 (expression -> expression OR expression .)
    MODULUS_EQUALS  reduce using rule 77 (expression -> expression OR expression .)
    EXPONENT_EQUALS reduce using rule 77 (expression -> expression OR expression .)
    AND_EQUALS      reduce using rule 77 (expression -> expression OR expression .)
    OR_EQUALS       reduce using rule 77 (expression -> expression OR expression .)
    OR              reduce using rule 77 (expression -> expression OR expression .)
    FUNCTION        reduce using rule 77 (expression -> expression OR expression .)
    FOR             reduce using rule 77 (expression -> expression OR expression .)
    WHILE           reduce using rule 77 (expression -> expression OR expression .)
    IMPORT          reduce using rule 77 (expression -> expression OR expression .)
    CONTINUE        reduce using rule 77 (expression -> expression OR expression .)
    BREAK           reduce using rule 77 (expression -> expression OR expression .)
    PASS            reduce using rule 77 (expression -> expression OR expression .)
    RETURN          reduce using rule 77 (expression -> expression OR expression .)
    NOT_EQUALS      reduce using rule 77 (expression -> expression OR expression .)
    NOT             reduce using rule 77 (expression -> expression OR expression .)
    THIS            reduce using rule 77 (expression -> expression OR expression .)
    IF              reduce using rule 77 (expression -> expression OR expression .)
    BLANK           reduce using rule 77 (expression -> expression OR expression .)
    NULL            reduce using rule 77 (expression -> expression OR expression .)
    TRUE            reduce using rule 77 (expression -> expression OR expression .)
    FALSE           reduce using rule 77 (expression -> expression OR expression .)
    NUMERIC_LITERAL reduce using rule 77 (expression -> expression OR expression .)
    IDENTIFIER      reduce using rule 77 (expression -> expression OR expression .)
    LEFT_CURLY_BRACE reduce using rule 77 (expression -> expression OR expression .)
    STRING_LITERAL  reduce using rule 77 (expression -> expression OR expression .)
    ENDWHILE        reduce using rule 77 (expression -> expression OR expression .)
    $end            reduce using rule 77 (expression -> expression OR expression .)
    ENDFUNCTION     reduce using rule 77 (expression -> expression OR expression .)
    ENDIF           reduce using rule 77 (expression -> expression OR expression .)
    OTHERWISE       reduce using rule 77 (expression -> expression OR expression .)
    ELIF            reduce using rule 77 (expression -> expression OR expression .)
    ENDFOR          reduce using rule 77 (expression -> expression OR expression .)
    COLON           reduce using rule 77 (expression -> expression OR expression .)
    RIGHT_PAREN     reduce using rule 77 (expression -> expression OR expression .)
    COMMA           reduce using rule 77 (expression -> expression OR expression .)
    RIGHT_BOX       reduce using rule 77 (expression -> expression OR expression .)
    RIGHT_CURLY_BRACE reduce using rule 77 (expression -> expression OR expression .)
    LEFT_BOX        shift and go to state 85
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76

  ! LEFT_BOX        [ reduce using rule 77 (expression -> expression OR expression .) ]
  ! DOT             [ reduce using rule 77 (expression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 77 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 77 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 77 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 77 (expression -> expression OR expression .) ]
  ! MODULUS         [ reduce using rule 77 (expression -> expression OR expression .) ]
  ! EXPONENT        [ reduce using rule 77 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 77 (expression -> expression OR expression .) ]
  ! IN              [ reduce using rule 77 (expression -> expression OR expression .) ]
  ! HAS             [ reduce using rule 77 (expression -> expression OR expression .) ]
  ! EQUIVALENCE_EQUAL [ reduce using rule 77 (expression -> expression OR expression .) ]
  ! COMPARE_GT      [ reduce using rule 77 (expression -> expression OR expression .) ]
  ! COMPARE_GTET    [ reduce using rule 77 (expression -> expression OR expression .) ]
  ! COMPARE_LT      [ reduce using rule 77 (expression -> expression OR expression .) ]
  ! COMPARE_LTET    [ reduce using rule 77 (expression -> expression OR expression .) ]
  ! LEFT_PAREN      [ reduce using rule 77 (expression -> expression OR expression .) ]
  ! ASSIGN_EQUALS   [ shift and go to state 90 ]
  ! DOT_EQUALS      [ shift and go to state 67 ]
  ! PLUS_EQUALS     [ shift and go to state 89 ]
  ! MINUS_EQUALS    [ shift and go to state 73 ]
  ! TIMES_EQUALS    [ shift and go to state 81 ]
  ! DIVIDE_EQUALS   [ shift and go to state 91 ]
  ! MODULUS_EQUALS  [ shift and go to state 79 ]
  ! EXPONENT_EQUALS [ shift and go to state 93 ]
  ! AND_EQUALS      [ shift and go to state 83 ]
  ! OR_EQUALS       [ shift and go to state 84 ]
  ! OR              [ shift and go to state 94 ]


state 151

    (26) stmt_c_while -> WHILE expression COLON . ks ENDWHILE
    (1) ks -> . element ks
    (2) ks -> . epsilon
    (3) element -> . function_definition
    (4) element -> . statement_compound
    (5) element -> . statement_simple
    (6) epsilon -> .
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (14) statement_compound -> . stmt_c_for
    (15) statement_compound -> . stmt_c_while
    (16) statement_compound -> . stmt_c_if_group ENDIF
    (32) statement_simple -> . stmt_s_control_flow
    (33) statement_simple -> . stmt_s_import
    (34) statement_simple -> . stmt_s_expression
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (25) stmt_c_for -> . FOR expression_identifier IN expression COLON ks ENDFOR
    (26) stmt_c_while -> . WHILE expression COLON ks ENDWHILE
    (17) stmt_c_if_group -> . stmt_c_if_F
    (18) stmt_c_if_group -> . stmt_c_if_FO
    (19) stmt_c_if_group -> . stmt_c_if_FE
    (20) stmt_c_if_group -> . stmt_c_if_FEO
    (35) stmt_s_control_flow -> . stmt_s_continue
    (36) stmt_s_control_flow -> . stmt_s_break
    (37) stmt_s_control_flow -> . stmt_s_pass
    (38) stmt_s_control_flow -> . stmt_s_return
    (44) stmt_s_import -> . IMPORT dotted_identifier
    (51) stmt_s_expression -> . expression
    (21) stmt_c_if_F -> . stmt_c_if
    (22) stmt_c_if_FO -> . stmt_c_if stmt_c_otherwise
    (23) stmt_c_if_FE -> . stmt_c_if stmt_c_elif_block
    (24) stmt_c_if_FEO -> . stmt_c_if stmt_c_elif_block stmt_c_otherwise
    (39) stmt_s_continue -> . CONTINUE
    (40) stmt_s_break -> . BREAK
    (41) stmt_s_pass -> . PASS
    (42) stmt_s_return -> . RETURN expression
    (43) stmt_s_return -> . RETURN
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (27) stmt_c_if -> . IF expression COLON ks
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL

    ENDWHILE        reduce using rule 6 (epsilon -> .)
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 23
    IMPORT          shift and go to state 6
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 33
    PASS            shift and go to state 8
    RETURN          shift and go to state 12
    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    IF              shift and go to state 46
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    stmt_c_for                     shift and go to state 22
    stmt_c_while                   shift and go to state 2
    stmt_s_return                  shift and go to state 35
    stmt_c_if_group                shift and go to state 13
    stmt_s_control_flow            shift and go to state 37
    stmt_s_import                  shift and go to state 38
    literal                        shift and go to state 25
    function_anonymous             shift and go to state 26
    stmt_s_pass                    shift and go to state 40
    epsilon                        shift and go to state 28
    stmt_s_continue                shift and go to state 29
    stmt_c_if_FEO                  shift and go to state 7
    literal_string                 shift and go to state 30
    array_literal                  shift and go to state 41
    stmt_c_if                      shift and go to state 42
    stmt_c_if_FE                   shift and go to state 44
    statement_compound             shift and go to state 31
    stmt_c_if_FO                   shift and go to state 45
    stmt_s_expression              shift and go to state 9
    function_definition            shift and go to state 47
    statement_simple               shift and go to state 48
    expression                     shift and go to state 21
    object_literal                 shift and go to state 18
    element                        shift and go to state 50
    ks                             shift and go to state 177
    stmt_s_break                   shift and go to state 11
    stmt_c_if_F                    shift and go to state 34

state 152

    (54) expression -> LEFT_PAREN expression RIGHT_PAREN .

    LEFT_BOX        reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    ASSIGN_EQUALS   reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    DOT_EQUALS      reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS_EQUALS     reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS_EQUALS    reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    TIMES_EQUALS    reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE_EQUALS   reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULUS_EQUALS  reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    EXPONENT_EQUALS reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    AND_EQUALS      reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    OR_EQUALS       reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    DOT             reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    TIMES           reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULUS         reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    EXPONENT        reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    AND             reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    OR              reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    IN              reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    HAS             reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUIVALENCE_EQUAL reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    COMPARE_GT      reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    COMPARE_GTET    reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    COMPARE_LT      reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    COMPARE_LTET    reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    FUNCTION        reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    FOR             reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    WHILE           reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    IMPORT          reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    CONTINUE        reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    BREAK           reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    PASS            reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    RETURN          reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT             reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    THIS            reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    IF              reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    BLANK           reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    NULL            reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    TRUE            reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    FALSE           reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    NUMERIC_LITERAL reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    LEFT_CURLY_BRACE reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    STRING_LITERAL  reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    ENDWHILE        reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    $end            reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    ENDFUNCTION     reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    ENDIF           reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    OTHERWISE       reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    ELIF            reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    ENDFOR          reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    COLON           reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_BOX       reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_CURLY_BRACE reduce using rule 54 (expression -> LEFT_PAREN expression RIGHT_PAREN .)



state 153

    (107) pair_list -> key_value_pair COMMA . pair_list
    (105) pair_list -> . epsilon
    (106) pair_list -> . key_value_pair
    (107) pair_list -> . key_value_pair COMMA pair_list
    (6) epsilon -> .
    (108) key_value_pair -> . literal_string COLON expression
    (99) literal_string -> . STRING_LITERAL

    RIGHT_CURLY_BRACE reduce using rule 6 (epsilon -> .)
    STRING_LITERAL  shift and go to state 49


    key_value_pair                 shift and go to state 97
    epsilon                        shift and go to state 100
    literal_string                 shift and go to state 98
    pair_list                      shift and go to state 178

state 154

    (108) key_value_pair -> literal_string COLON . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    literal_string                 shift and go to state 30
    array_literal                  shift and go to state 41
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 179

state 155

    (104) object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .

    LEFT_BOX        reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    ASSIGN_EQUALS   reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    DOT_EQUALS      reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    PLUS_EQUALS     reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    MINUS_EQUALS    reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    TIMES_EQUALS    reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    DIVIDE_EQUALS   reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    MODULUS_EQUALS  reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    EXPONENT_EQUALS reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    AND_EQUALS      reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    OR_EQUALS       reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    DOT             reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    PLUS            reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    MINUS           reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    TIMES           reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    DIVIDE          reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    MODULUS         reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    EXPONENT        reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    AND             reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    OR              reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    IN              reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    HAS             reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    EQUIVALENCE_EQUAL reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    COMPARE_GT      reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    COMPARE_GTET    reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    COMPARE_LT      reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    COMPARE_LTET    reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    LEFT_PAREN      reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    RIGHT_BOX       reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    FUNCTION        reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    FOR             reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    WHILE           reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    IMPORT          reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    CONTINUE        reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    BREAK           reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    PASS            reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    RETURN          reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    NOT_EQUALS      reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    NOT             reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    THIS            reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    IF              reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    BLANK           reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    NULL            reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    TRUE            reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    FALSE           reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    NUMERIC_LITERAL reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    IDENTIFIER      reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    LEFT_CURLY_BRACE reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    STRING_LITERAL  reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    $end            reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    ENDFUNCTION     reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    ENDWHILE        reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    ENDIF           reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    OTHERWISE       reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    ELIF            reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    ENDFOR          reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    COLON           reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    RIGHT_PAREN     reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    COMMA           reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)
    RIGHT_CURLY_BRACE reduce using rule 104 (object_literal -> LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE .)



state 156

    (30) stmt_c_elif_block -> stmt_c_elif stmt_c_elif_block .

    OTHERWISE       reduce using rule 30 (stmt_c_elif_block -> stmt_c_elif stmt_c_elif_block .)
    ENDIF           reduce using rule 30 (stmt_c_elif_block -> stmt_c_elif stmt_c_elif_block .)



state 157

    (24) stmt_c_if_FEO -> stmt_c_if stmt_c_elif_block stmt_c_otherwise .

    ENDIF           reduce using rule 24 (stmt_c_if_FEO -> stmt_c_if stmt_c_elif_block stmt_c_otherwise .)



state 158

    (31) stmt_c_elif -> ELIF expression . COLON ks
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    COLON           shift and go to state 180
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76



state 159

    (28) stmt_c_otherwise -> OTHERWISE COLON . ks
    (1) ks -> . element ks
    (2) ks -> . epsilon
    (3) element -> . function_definition
    (4) element -> . statement_compound
    (5) element -> . statement_simple
    (6) epsilon -> .
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (14) statement_compound -> . stmt_c_for
    (15) statement_compound -> . stmt_c_while
    (16) statement_compound -> . stmt_c_if_group ENDIF
    (32) statement_simple -> . stmt_s_control_flow
    (33) statement_simple -> . stmt_s_import
    (34) statement_simple -> . stmt_s_expression
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (25) stmt_c_for -> . FOR expression_identifier IN expression COLON ks ENDFOR
    (26) stmt_c_while -> . WHILE expression COLON ks ENDWHILE
    (17) stmt_c_if_group -> . stmt_c_if_F
    (18) stmt_c_if_group -> . stmt_c_if_FO
    (19) stmt_c_if_group -> . stmt_c_if_FE
    (20) stmt_c_if_group -> . stmt_c_if_FEO
    (35) stmt_s_control_flow -> . stmt_s_continue
    (36) stmt_s_control_flow -> . stmt_s_break
    (37) stmt_s_control_flow -> . stmt_s_pass
    (38) stmt_s_control_flow -> . stmt_s_return
    (44) stmt_s_import -> . IMPORT dotted_identifier
    (51) stmt_s_expression -> . expression
    (21) stmt_c_if_F -> . stmt_c_if
    (22) stmt_c_if_FO -> . stmt_c_if stmt_c_otherwise
    (23) stmt_c_if_FE -> . stmt_c_if stmt_c_elif_block
    (24) stmt_c_if_FEO -> . stmt_c_if stmt_c_elif_block stmt_c_otherwise
    (39) stmt_s_continue -> . CONTINUE
    (40) stmt_s_break -> . BREAK
    (41) stmt_s_pass -> . PASS
    (42) stmt_s_return -> . RETURN expression
    (43) stmt_s_return -> . RETURN
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (27) stmt_c_if -> . IF expression COLON ks
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL

    ENDIF           reduce using rule 6 (epsilon -> .)
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 23
    IMPORT          shift and go to state 6
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 33
    PASS            shift and go to state 8
    RETURN          shift and go to state 12
    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    IF              shift and go to state 46
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    stmt_c_for                     shift and go to state 22
    stmt_c_while                   shift and go to state 2
    stmt_s_return                  shift and go to state 35
    stmt_c_if_group                shift and go to state 13
    stmt_s_control_flow            shift and go to state 37
    stmt_s_import                  shift and go to state 38
    literal                        shift and go to state 25
    function_anonymous             shift and go to state 26
    stmt_s_pass                    shift and go to state 40
    epsilon                        shift and go to state 28
    stmt_s_continue                shift and go to state 29
    stmt_c_if_FEO                  shift and go to state 7
    literal_string                 shift and go to state 30
    array_literal                  shift and go to state 41
    stmt_c_if                      shift and go to state 42
    stmt_c_if_FE                   shift and go to state 44
    statement_compound             shift and go to state 31
    stmt_c_if_FO                   shift and go to state 45
    stmt_s_expression              shift and go to state 9
    function_definition            shift and go to state 47
    statement_simple               shift and go to state 48
    expression                     shift and go to state 21
    object_literal                 shift and go to state 18
    element                        shift and go to state 50
    ks                             shift and go to state 181
    stmt_s_break                   shift and go to state 11
    stmt_c_if_F                    shift and go to state 34

state 160

    (102) array_literal -> LEFT_BOX exp_list RIGHT_BOX .

    LEFT_BOX        reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    ASSIGN_EQUALS   reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    DOT_EQUALS      reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    PLUS_EQUALS     reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    MINUS_EQUALS    reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    TIMES_EQUALS    reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    DIVIDE_EQUALS   reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    MODULUS_EQUALS  reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    EXPONENT_EQUALS reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    AND_EQUALS      reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    OR_EQUALS       reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    DOT             reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    PLUS            reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    MINUS           reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    TIMES           reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    DIVIDE          reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    MODULUS         reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    EXPONENT        reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    AND             reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    OR              reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    IN              reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    HAS             reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    EQUIVALENCE_EQUAL reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    COMPARE_GT      reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    COMPARE_GTET    reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    COMPARE_LT      reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    COMPARE_LTET    reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    LEFT_PAREN      reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    RIGHT_BOX       reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    FUNCTION        reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    FOR             reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    WHILE           reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    IMPORT          reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    CONTINUE        reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    BREAK           reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    PASS            reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    RETURN          reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    NOT_EQUALS      reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    NOT             reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    THIS            reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    IF              reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    BLANK           reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    NULL            reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    TRUE            reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    FALSE           reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    NUMERIC_LITERAL reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    IDENTIFIER      reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    LEFT_CURLY_BRACE reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    STRING_LITERAL  reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    $end            reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    ENDFUNCTION     reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    ENDWHILE        reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    ENDIF           reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    OTHERWISE       reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    ELIF            reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    ENDFOR          reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    COLON           reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    RIGHT_PAREN     reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    COMMA           reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)
    RIGHT_CURLY_BRACE reduce using rule 102 (array_literal -> LEFT_BOX exp_list RIGHT_BOX .)



state 161

    (91) exp_list -> expression COMMA . exp_list
    (89) exp_list -> . epsilon
    (90) exp_list -> . expression
    (91) exp_list -> . expression COMMA exp_list
    (6) epsilon -> .
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    RIGHT_BOX       reduce using rule 6 (epsilon -> .)
    RIGHT_PAREN     reduce using rule 6 (epsilon -> .)
    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    exp_list                       shift and go to state 182
    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    epsilon                        shift and go to state 107
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 129

state 162

    (103) array_literal -> LEFT_BOX expression FOR . expression_identifier IN expression RIGHT_BOX
    (86) expression_identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 27


    expression_identifier          shift and go to state 183

state 163

    (27) stmt_c_if -> IF expression COLON . ks
    (1) ks -> . element ks
    (2) ks -> . epsilon
    (3) element -> . function_definition
    (4) element -> . statement_compound
    (5) element -> . statement_simple
    (6) epsilon -> .
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (14) statement_compound -> . stmt_c_for
    (15) statement_compound -> . stmt_c_while
    (16) statement_compound -> . stmt_c_if_group ENDIF
    (32) statement_simple -> . stmt_s_control_flow
    (33) statement_simple -> . stmt_s_import
    (34) statement_simple -> . stmt_s_expression
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (25) stmt_c_for -> . FOR expression_identifier IN expression COLON ks ENDFOR
    (26) stmt_c_while -> . WHILE expression COLON ks ENDWHILE
    (17) stmt_c_if_group -> . stmt_c_if_F
    (18) stmt_c_if_group -> . stmt_c_if_FO
    (19) stmt_c_if_group -> . stmt_c_if_FE
    (20) stmt_c_if_group -> . stmt_c_if_FEO
    (35) stmt_s_control_flow -> . stmt_s_continue
    (36) stmt_s_control_flow -> . stmt_s_break
    (37) stmt_s_control_flow -> . stmt_s_pass
    (38) stmt_s_control_flow -> . stmt_s_return
    (44) stmt_s_import -> . IMPORT dotted_identifier
    (51) stmt_s_expression -> . expression
    (21) stmt_c_if_F -> . stmt_c_if
    (22) stmt_c_if_FO -> . stmt_c_if stmt_c_otherwise
    (23) stmt_c_if_FE -> . stmt_c_if stmt_c_elif_block
    (24) stmt_c_if_FEO -> . stmt_c_if stmt_c_elif_block stmt_c_otherwise
    (39) stmt_s_continue -> . CONTINUE
    (40) stmt_s_break -> . BREAK
    (41) stmt_s_pass -> . PASS
    (42) stmt_s_return -> . RETURN expression
    (43) stmt_s_return -> . RETURN
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (27) stmt_c_if -> . IF expression COLON ks
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL

    OTHERWISE       reduce using rule 6 (epsilon -> .)
    ELIF            reduce using rule 6 (epsilon -> .)
    ENDIF           reduce using rule 6 (epsilon -> .)
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 23
    IMPORT          shift and go to state 6
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 33
    PASS            shift and go to state 8
    RETURN          shift and go to state 12
    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    IF              shift and go to state 46
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    stmt_c_for                     shift and go to state 22
    stmt_c_while                   shift and go to state 2
    stmt_s_return                  shift and go to state 35
    stmt_c_if_group                shift and go to state 13
    stmt_s_control_flow            shift and go to state 37
    stmt_s_import                  shift and go to state 38
    literal                        shift and go to state 25
    function_anonymous             shift and go to state 26
    stmt_s_pass                    shift and go to state 40
    epsilon                        shift and go to state 28
    stmt_s_continue                shift and go to state 29
    stmt_c_if_FEO                  shift and go to state 7
    literal_string                 shift and go to state 30
    array_literal                  shift and go to state 41
    stmt_c_if                      shift and go to state 42
    stmt_c_if_FE                   shift and go to state 44
    statement_compound             shift and go to state 31
    stmt_c_if_FO                   shift and go to state 45
    stmt_s_expression              shift and go to state 9
    function_definition            shift and go to state 47
    statement_simple               shift and go to state 48
    expression                     shift and go to state 21
    object_literal                 shift and go to state 18
    element                        shift and go to state 50
    ks                             shift and go to state 184
    stmt_s_break                   shift and go to state 11
    stmt_c_if_F                    shift and go to state 34

state 164

    (48) dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .

    DOT             reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    FUNCTION        reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    FOR             reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    WHILE           reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    IMPORT          reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    CONTINUE        reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    BREAK           reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    PASS            reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    RETURN          reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    LEFT_PAREN      reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    NOT_EQUALS      reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    NOT             reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    THIS            reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    IF              reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    BLANK           reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    NULL            reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    TRUE            reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    FALSE           reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    NUMERIC_LITERAL reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    MINUS           reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    IDENTIFIER      reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    LEFT_BOX        reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    LEFT_CURLY_BRACE reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    STRING_LITERAL  reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    $end            reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    ENDFUNCTION     reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    ENDWHILE        reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    ENDIF           reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    OTHERWISE       reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    ELIF            reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)
    ENDFOR          reduce using rule 48 (dotted_identifier_something -> expression_identifier DOT dotted_identifier_something .)



state 165

    (50) dotted_identifier_everything -> dotted_identifier_something DOT TIMES .

    FUNCTION        reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    FOR             reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    WHILE           reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    IMPORT          reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    CONTINUE        reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    BREAK           reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    PASS            reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    RETURN          reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    LEFT_PAREN      reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    NOT_EQUALS      reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    NOT             reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    THIS            reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    IF              reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    BLANK           reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    NULL            reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    TRUE            reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    FALSE           reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    NUMERIC_LITERAL reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    MINUS           reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    IDENTIFIER      reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    LEFT_BOX        reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    LEFT_CURLY_BRACE reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    STRING_LITERAL  reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    $end            reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    ENDFUNCTION     reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    ENDWHILE        reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    ENDIF           reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    OTHERWISE       reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    ELIF            reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)
    ENDFOR          reduce using rule 50 (dotted_identifier_everything -> dotted_identifier_something DOT TIMES .)



state 166

    (7) function_definition -> FUNCTION expression_identifier parameters COLON . ks ENDFUNCTION
    (1) ks -> . element ks
    (2) ks -> . epsilon
    (3) element -> . function_definition
    (4) element -> . statement_compound
    (5) element -> . statement_simple
    (6) epsilon -> .
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (14) statement_compound -> . stmt_c_for
    (15) statement_compound -> . stmt_c_while
    (16) statement_compound -> . stmt_c_if_group ENDIF
    (32) statement_simple -> . stmt_s_control_flow
    (33) statement_simple -> . stmt_s_import
    (34) statement_simple -> . stmt_s_expression
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (25) stmt_c_for -> . FOR expression_identifier IN expression COLON ks ENDFOR
    (26) stmt_c_while -> . WHILE expression COLON ks ENDWHILE
    (17) stmt_c_if_group -> . stmt_c_if_F
    (18) stmt_c_if_group -> . stmt_c_if_FO
    (19) stmt_c_if_group -> . stmt_c_if_FE
    (20) stmt_c_if_group -> . stmt_c_if_FEO
    (35) stmt_s_control_flow -> . stmt_s_continue
    (36) stmt_s_control_flow -> . stmt_s_break
    (37) stmt_s_control_flow -> . stmt_s_pass
    (38) stmt_s_control_flow -> . stmt_s_return
    (44) stmt_s_import -> . IMPORT dotted_identifier
    (51) stmt_s_expression -> . expression
    (21) stmt_c_if_F -> . stmt_c_if
    (22) stmt_c_if_FO -> . stmt_c_if stmt_c_otherwise
    (23) stmt_c_if_FE -> . stmt_c_if stmt_c_elif_block
    (24) stmt_c_if_FEO -> . stmt_c_if stmt_c_elif_block stmt_c_otherwise
    (39) stmt_s_continue -> . CONTINUE
    (40) stmt_s_break -> . BREAK
    (41) stmt_s_pass -> . PASS
    (42) stmt_s_return -> . RETURN expression
    (43) stmt_s_return -> . RETURN
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (27) stmt_c_if -> . IF expression COLON ks
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL

    ENDFUNCTION     reduce using rule 6 (epsilon -> .)
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 23
    IMPORT          shift and go to state 6
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 33
    PASS            shift and go to state 8
    RETURN          shift and go to state 12
    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    IF              shift and go to state 46
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    stmt_c_for                     shift and go to state 22
    stmt_c_while                   shift and go to state 2
    stmt_s_return                  shift and go to state 35
    stmt_c_if_group                shift and go to state 13
    stmt_s_control_flow            shift and go to state 37
    stmt_s_import                  shift and go to state 38
    literal                        shift and go to state 25
    function_anonymous             shift and go to state 26
    stmt_s_pass                    shift and go to state 40
    epsilon                        shift and go to state 28
    stmt_s_continue                shift and go to state 29
    stmt_c_if_FEO                  shift and go to state 7
    literal_string                 shift and go to state 30
    array_literal                  shift and go to state 41
    stmt_c_if                      shift and go to state 42
    stmt_c_if_FE                   shift and go to state 44
    statement_compound             shift and go to state 31
    stmt_c_if_FO                   shift and go to state 45
    stmt_s_expression              shift and go to state 9
    function_definition            shift and go to state 47
    statement_simple               shift and go to state 48
    expression                     shift and go to state 21
    object_literal                 shift and go to state 18
    element                        shift and go to state 50
    ks                             shift and go to state 185
    stmt_s_break                   shift and go to state 11
    stmt_c_if_F                    shift and go to state 34

state 167

    (9) function_anonymous -> FUNCTION parameters COLON ks . ENDFUNCTION

    ENDFUNCTION     shift and go to state 186



state 168

    (13) param_list -> expression_identifier COMMA . param_list
    (11) param_list -> . epsilon
    (12) param_list -> . expression_identifier
    (13) param_list -> . expression_identifier COMMA param_list
    (6) epsilon -> .
    (86) expression_identifier -> . IDENTIFIER

    RIGHT_PAREN     reduce using rule 6 (epsilon -> .)
    IDENTIFIER      shift and go to state 27


    param_list                     shift and go to state 187
    expression_identifier          shift and go to state 115
    epsilon                        shift and go to state 117

state 169

    (10) parameters -> LEFT_PAREN param_list RIGHT_PAREN .

    COLON           reduce using rule 10 (parameters -> LEFT_PAREN param_list RIGHT_PAREN .)



state 170

    (25) stmt_c_for -> FOR expression_identifier IN expression . COLON ks ENDFOR
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    COLON           shift and go to state 188
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76



state 171

    (88) expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .

    LEFT_BOX        reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    ASSIGN_EQUALS   reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    DOT_EQUALS      reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    PLUS_EQUALS     reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    MINUS_EQUALS    reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    TIMES_EQUALS    reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    DIVIDE_EQUALS   reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    MODULUS_EQUALS  reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    EXPONENT_EQUALS reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    AND_EQUALS      reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    OR_EQUALS       reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    DOT             reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    PLUS            reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    MINUS           reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    TIMES           reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    DIVIDE          reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    MODULUS         reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    EXPONENT        reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    AND             reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    OR              reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    IN              reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    HAS             reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    EQUIVALENCE_EQUAL reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    COMPARE_GT      reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    COMPARE_GTET    reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    COMPARE_LT      reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    COMPARE_LTET    reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    FUNCTION        reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    FOR             reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    WHILE           reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    IMPORT          reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    CONTINUE        reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    BREAK           reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    PASS            reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    RETURN          reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    NOT             reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    THIS            reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    IF              reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    BLANK           reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    NULL            reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    TRUE            reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    FALSE           reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    NUMERIC_LITERAL reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    LEFT_CURLY_BRACE reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    STRING_LITERAL  reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    ENDWHILE        reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    $end            reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    ENDFUNCTION     reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    ENDIF           reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    OTHERWISE       reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    ELIF            reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    ENDFOR          reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    COLON           reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    COMMA           reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    RIGHT_BOX       reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)
    RIGHT_CURLY_BRACE reduce using rule 88 (expression -> expression LEFT_PAREN exp_list RIGHT_PAREN .)



state 172

    (57) expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .

    LEFT_BOX        reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    ASSIGN_EQUALS   reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    DOT_EQUALS      reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    PLUS_EQUALS     reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    MINUS_EQUALS    reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    TIMES_EQUALS    reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    DIVIDE_EQUALS   reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    MODULUS_EQUALS  reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    EXPONENT_EQUALS reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    AND_EQUALS      reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    OR_EQUALS       reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    DOT             reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    PLUS            reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    MINUS           reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    TIMES           reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    DIVIDE          reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    MODULUS         reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    EXPONENT        reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    AND             reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    OR              reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    IN              reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    HAS             reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    EQUIVALENCE_EQUAL reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    COMPARE_GT      reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    COMPARE_GTET    reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    COMPARE_LT      reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    COMPARE_LTET    reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    LEFT_PAREN      reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    FUNCTION        reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    FOR             reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    WHILE           reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    IMPORT          reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    CONTINUE        reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    BREAK           reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    PASS            reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    RETURN          reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    NOT_EQUALS      reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    NOT             reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    THIS            reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    IF              reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    BLANK           reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    NULL            reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    TRUE            reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    FALSE           reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    NUMERIC_LITERAL reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    IDENTIFIER      reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    LEFT_CURLY_BRACE reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    STRING_LITERAL  reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    ENDWHILE        reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    $end            reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    ENDFUNCTION     reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    ENDIF           reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    OTHERWISE       reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    ELIF            reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    ENDFOR          reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    COLON           reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    RIGHT_PAREN     reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    COMMA           reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    RIGHT_BOX       reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)
    RIGHT_CURLY_BRACE reduce using rule 57 (expression -> expression LEFT_BOX array_operator_insides RIGHT_BOX .)



state 173

    (117) array_operator_missing -> COLON COLON . expression
    (118) array_operator_missing -> COLON COLON .
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    RIGHT_BOX       reduce using rule 118 (array_operator_missing -> COLON COLON .)
    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 189

state 174

    (113) array_operator_missing -> COLON expression .
    (116) array_operator_missing -> COLON expression . COLON expression
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    RIGHT_BOX       reduce using rule 113 (array_operator_missing -> COLON expression .)
    COLON           shift and go to state 190
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76



state 175

    (58) expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .

    LEFT_BOX        reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    ASSIGN_EQUALS   reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    DOT_EQUALS      reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    PLUS_EQUALS     reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    MINUS_EQUALS    reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    TIMES_EQUALS    reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    DIVIDE_EQUALS   reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    MODULUS_EQUALS  reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    EXPONENT_EQUALS reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    AND_EQUALS      reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    OR_EQUALS       reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    DOT             reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    PLUS            reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    MINUS           reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    TIMES           reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    DIVIDE          reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    MODULUS         reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    EXPONENT        reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    AND             reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    OR              reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    IN              reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    HAS             reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    EQUIVALENCE_EQUAL reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    COMPARE_GT      reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    COMPARE_GTET    reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    COMPARE_LT      reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    COMPARE_LTET    reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    LEFT_PAREN      reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    FUNCTION        reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    FOR             reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    WHILE           reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    IMPORT          reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    CONTINUE        reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    BREAK           reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    PASS            reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    RETURN          reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    NOT_EQUALS      reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    NOT             reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    THIS            reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    IF              reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    BLANK           reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    NULL            reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    TRUE            reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    FALSE           reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    NUMERIC_LITERAL reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    IDENTIFIER      reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    LEFT_CURLY_BRACE reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    STRING_LITERAL  reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    ENDWHILE        reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    $end            reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    ENDFUNCTION     reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    ENDIF           reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    OTHERWISE       reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    ELIF            reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    ENDFOR          reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    COLON           reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    RIGHT_PAREN     reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    COMMA           reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    RIGHT_BOX       reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)
    RIGHT_CURLY_BRACE reduce using rule 58 (expression -> expression LEFT_BOX array_operator_missing RIGHT_BOX .)



state 176

    (110) array_operator_insides -> expression COLON . expression
    (111) array_operator_insides -> expression COLON . expression COLON expression
    (112) array_operator_missing -> expression COLON .
    (115) array_operator_missing -> expression COLON . COLON expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    RIGHT_BOX       reduce using rule 112 (array_operator_missing -> expression COLON .)
    COLON           shift and go to state 191
    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 192

state 177

    (26) stmt_c_while -> WHILE expression COLON ks . ENDWHILE

    ENDWHILE        shift and go to state 193



state 178

    (107) pair_list -> key_value_pair COMMA pair_list .

    RIGHT_CURLY_BRACE reduce using rule 107 (pair_list -> key_value_pair COMMA pair_list .)



state 179

    (108) key_value_pair -> literal_string COLON expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    COMMA           reduce using rule 108 (key_value_pair -> literal_string COLON expression .)
    RIGHT_CURLY_BRACE reduce using rule 108 (key_value_pair -> literal_string COLON expression .)
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76



state 180

    (31) stmt_c_elif -> ELIF expression COLON . ks
    (1) ks -> . element ks
    (2) ks -> . epsilon
    (3) element -> . function_definition
    (4) element -> . statement_compound
    (5) element -> . statement_simple
    (6) epsilon -> .
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (14) statement_compound -> . stmt_c_for
    (15) statement_compound -> . stmt_c_while
    (16) statement_compound -> . stmt_c_if_group ENDIF
    (32) statement_simple -> . stmt_s_control_flow
    (33) statement_simple -> . stmt_s_import
    (34) statement_simple -> . stmt_s_expression
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (25) stmt_c_for -> . FOR expression_identifier IN expression COLON ks ENDFOR
    (26) stmt_c_while -> . WHILE expression COLON ks ENDWHILE
    (17) stmt_c_if_group -> . stmt_c_if_F
    (18) stmt_c_if_group -> . stmt_c_if_FO
    (19) stmt_c_if_group -> . stmt_c_if_FE
    (20) stmt_c_if_group -> . stmt_c_if_FEO
    (35) stmt_s_control_flow -> . stmt_s_continue
    (36) stmt_s_control_flow -> . stmt_s_break
    (37) stmt_s_control_flow -> . stmt_s_pass
    (38) stmt_s_control_flow -> . stmt_s_return
    (44) stmt_s_import -> . IMPORT dotted_identifier
    (51) stmt_s_expression -> . expression
    (21) stmt_c_if_F -> . stmt_c_if
    (22) stmt_c_if_FO -> . stmt_c_if stmt_c_otherwise
    (23) stmt_c_if_FE -> . stmt_c_if stmt_c_elif_block
    (24) stmt_c_if_FEO -> . stmt_c_if stmt_c_elif_block stmt_c_otherwise
    (39) stmt_s_continue -> . CONTINUE
    (40) stmt_s_break -> . BREAK
    (41) stmt_s_pass -> . PASS
    (42) stmt_s_return -> . RETURN expression
    (43) stmt_s_return -> . RETURN
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (27) stmt_c_if -> . IF expression COLON ks
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL

    ELIF            reduce using rule 6 (epsilon -> .)
    OTHERWISE       reduce using rule 6 (epsilon -> .)
    ENDIF           reduce using rule 6 (epsilon -> .)
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 23
    IMPORT          shift and go to state 6
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 33
    PASS            shift and go to state 8
    RETURN          shift and go to state 12
    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    IF              shift and go to state 46
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    stmt_c_for                     shift and go to state 22
    stmt_c_while                   shift and go to state 2
    stmt_s_return                  shift and go to state 35
    stmt_c_if_group                shift and go to state 13
    stmt_s_control_flow            shift and go to state 37
    stmt_s_import                  shift and go to state 38
    literal                        shift and go to state 25
    function_anonymous             shift and go to state 26
    stmt_s_pass                    shift and go to state 40
    epsilon                        shift and go to state 28
    stmt_s_continue                shift and go to state 29
    stmt_c_if_FEO                  shift and go to state 7
    literal_string                 shift and go to state 30
    array_literal                  shift and go to state 41
    stmt_c_if                      shift and go to state 42
    stmt_c_if_FE                   shift and go to state 44
    statement_compound             shift and go to state 31
    stmt_c_if_FO                   shift and go to state 45
    stmt_s_expression              shift and go to state 9
    function_definition            shift and go to state 47
    statement_simple               shift and go to state 48
    expression                     shift and go to state 21
    object_literal                 shift and go to state 18
    element                        shift and go to state 50
    ks                             shift and go to state 194
    stmt_s_break                   shift and go to state 11
    stmt_c_if_F                    shift and go to state 34

state 181

    (28) stmt_c_otherwise -> OTHERWISE COLON ks .

    ENDIF           reduce using rule 28 (stmt_c_otherwise -> OTHERWISE COLON ks .)



state 182

    (91) exp_list -> expression COMMA exp_list .

    RIGHT_BOX       reduce using rule 91 (exp_list -> expression COMMA exp_list .)
    RIGHT_PAREN     reduce using rule 91 (exp_list -> expression COMMA exp_list .)



state 183

    (103) array_literal -> LEFT_BOX expression FOR expression_identifier . IN expression RIGHT_BOX

    IN              shift and go to state 195



state 184

    (27) stmt_c_if -> IF expression COLON ks .

    OTHERWISE       reduce using rule 27 (stmt_c_if -> IF expression COLON ks .)
    ELIF            reduce using rule 27 (stmt_c_if -> IF expression COLON ks .)
    ENDIF           reduce using rule 27 (stmt_c_if -> IF expression COLON ks .)



state 185

    (7) function_definition -> FUNCTION expression_identifier parameters COLON ks . ENDFUNCTION

    ENDFUNCTION     shift and go to state 196



state 186

    (9) function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .

    FUNCTION        reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    FOR             reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    WHILE           reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    IMPORT          reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    CONTINUE        reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    BREAK           reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    PASS            reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    RETURN          reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    LEFT_PAREN      reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    NOT_EQUALS      reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    NOT             reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    THIS            reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    IF              reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    BLANK           reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    NULL            reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    TRUE            reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    FALSE           reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    NUMERIC_LITERAL reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    MINUS           reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    IDENTIFIER      reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    LEFT_BOX        reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    LEFT_CURLY_BRACE reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    STRING_LITERAL  reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    $end            reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    ASSIGN_EQUALS   reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    DOT_EQUALS      reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    PLUS_EQUALS     reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    MINUS_EQUALS    reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    TIMES_EQUALS    reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    DIVIDE_EQUALS   reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    MODULUS_EQUALS  reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    EXPONENT_EQUALS reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    AND_EQUALS      reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    OR_EQUALS       reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    DOT             reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    PLUS            reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    TIMES           reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    DIVIDE          reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    MODULUS         reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    EXPONENT        reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    AND             reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    OR              reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    IN              reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    HAS             reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    EQUIVALENCE_EQUAL reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    COMPARE_GT      reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    COMPARE_GTET    reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    COMPARE_LT      reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    COMPARE_LTET    reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    ENDFUNCTION     reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    ENDWHILE        reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    ENDIF           reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    OTHERWISE       reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    ELIF            reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    ENDFOR          reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    COLON           reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    RIGHT_PAREN     reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    COMMA           reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    RIGHT_BOX       reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)
    RIGHT_CURLY_BRACE reduce using rule 9 (function_anonymous -> FUNCTION parameters COLON ks ENDFUNCTION .)



state 187

    (13) param_list -> expression_identifier COMMA param_list .

    RIGHT_PAREN     reduce using rule 13 (param_list -> expression_identifier COMMA param_list .)



state 188

    (25) stmt_c_for -> FOR expression_identifier IN expression COLON . ks ENDFOR
    (1) ks -> . element ks
    (2) ks -> . epsilon
    (3) element -> . function_definition
    (4) element -> . statement_compound
    (5) element -> . statement_simple
    (6) epsilon -> .
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (14) statement_compound -> . stmt_c_for
    (15) statement_compound -> . stmt_c_while
    (16) statement_compound -> . stmt_c_if_group ENDIF
    (32) statement_simple -> . stmt_s_control_flow
    (33) statement_simple -> . stmt_s_import
    (34) statement_simple -> . stmt_s_expression
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION
    (25) stmt_c_for -> . FOR expression_identifier IN expression COLON ks ENDFOR
    (26) stmt_c_while -> . WHILE expression COLON ks ENDWHILE
    (17) stmt_c_if_group -> . stmt_c_if_F
    (18) stmt_c_if_group -> . stmt_c_if_FO
    (19) stmt_c_if_group -> . stmt_c_if_FE
    (20) stmt_c_if_group -> . stmt_c_if_FEO
    (35) stmt_s_control_flow -> . stmt_s_continue
    (36) stmt_s_control_flow -> . stmt_s_break
    (37) stmt_s_control_flow -> . stmt_s_pass
    (38) stmt_s_control_flow -> . stmt_s_return
    (44) stmt_s_import -> . IMPORT dotted_identifier
    (51) stmt_s_expression -> . expression
    (21) stmt_c_if_F -> . stmt_c_if
    (22) stmt_c_if_FO -> . stmt_c_if stmt_c_otherwise
    (23) stmt_c_if_FE -> . stmt_c_if stmt_c_elif_block
    (24) stmt_c_if_FEO -> . stmt_c_if stmt_c_elif_block stmt_c_otherwise
    (39) stmt_s_continue -> . CONTINUE
    (40) stmt_s_break -> . BREAK
    (41) stmt_s_pass -> . PASS
    (42) stmt_s_return -> . RETURN expression
    (43) stmt_s_return -> . RETURN
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (27) stmt_c_if -> . IF expression COLON ks
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL

    ENDFOR          reduce using rule 6 (epsilon -> .)
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 16
    WHILE           shift and go to state 23
    IMPORT          shift and go to state 6
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 33
    PASS            shift and go to state 8
    RETURN          shift and go to state 12
    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    IF              shift and go to state 46
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    stmt_c_for                     shift and go to state 22
    stmt_c_while                   shift and go to state 2
    stmt_s_return                  shift and go to state 35
    stmt_c_if_group                shift and go to state 13
    stmt_s_control_flow            shift and go to state 37
    stmt_s_import                  shift and go to state 38
    literal                        shift and go to state 25
    function_anonymous             shift and go to state 26
    stmt_s_pass                    shift and go to state 40
    epsilon                        shift and go to state 28
    stmt_s_continue                shift and go to state 29
    stmt_c_if_FEO                  shift and go to state 7
    literal_string                 shift and go to state 30
    array_literal                  shift and go to state 41
    stmt_c_if                      shift and go to state 42
    stmt_c_if_FE                   shift and go to state 44
    statement_compound             shift and go to state 31
    stmt_c_if_FO                   shift and go to state 45
    stmt_s_expression              shift and go to state 9
    function_definition            shift and go to state 47
    statement_simple               shift and go to state 48
    expression                     shift and go to state 21
    object_literal                 shift and go to state 18
    element                        shift and go to state 50
    ks                             shift and go to state 197
    stmt_s_break                   shift and go to state 11
    stmt_c_if_F                    shift and go to state 34

state 189

    (117) array_operator_missing -> COLON COLON expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    RIGHT_BOX       reduce using rule 117 (array_operator_missing -> COLON COLON expression .)
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76



state 190

    (116) array_operator_missing -> COLON expression COLON . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 198

state 191

    (115) array_operator_missing -> expression COLON COLON . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 199

state 192

    (110) array_operator_insides -> expression COLON expression .
    (111) array_operator_insides -> expression COLON expression . COLON expression
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    RIGHT_BOX       reduce using rule 110 (array_operator_insides -> expression COLON expression .)
    COLON           shift and go to state 200
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76



state 193

    (26) stmt_c_while -> WHILE expression COLON ks ENDWHILE .

    FUNCTION        reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    FOR             reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    WHILE           reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    IMPORT          reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    CONTINUE        reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    BREAK           reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    PASS            reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    RETURN          reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    LEFT_PAREN      reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    NOT_EQUALS      reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    NOT             reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    THIS            reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    IF              reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    BLANK           reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    NULL            reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    TRUE            reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    FALSE           reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    NUMERIC_LITERAL reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    MINUS           reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    IDENTIFIER      reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    LEFT_BOX        reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    LEFT_CURLY_BRACE reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    STRING_LITERAL  reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    ENDFOR          reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    ENDIF           reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    $end            reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    ENDFUNCTION     reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    ENDWHILE        reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    OTHERWISE       reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)
    ELIF            reduce using rule 26 (stmt_c_while -> WHILE expression COLON ks ENDWHILE .)



state 194

    (31) stmt_c_elif -> ELIF expression COLON ks .

    ELIF            reduce using rule 31 (stmt_c_elif -> ELIF expression COLON ks .)
    OTHERWISE       reduce using rule 31 (stmt_c_elif -> ELIF expression COLON ks .)
    ENDIF           reduce using rule 31 (stmt_c_elif -> ELIF expression COLON ks .)



state 195

    (103) array_literal -> LEFT_BOX expression FOR expression_identifier IN . expression RIGHT_BOX
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 201

state 196

    (7) function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .

    LEFT_BOX        reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    ASSIGN_EQUALS   reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    DOT_EQUALS      reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    PLUS_EQUALS     reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    MINUS_EQUALS    reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    TIMES_EQUALS    reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    DIVIDE_EQUALS   reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    MODULUS_EQUALS  reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    EXPONENT_EQUALS reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    AND_EQUALS      reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    OR_EQUALS       reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    DOT             reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    PLUS            reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    MINUS           reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    TIMES           reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    DIVIDE          reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    MODULUS         reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    EXPONENT        reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    AND             reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    OR              reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    IN              reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    HAS             reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    EQUIVALENCE_EQUAL reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    COMPARE_GT      reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    COMPARE_GTET    reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    COMPARE_LT      reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    COMPARE_LTET    reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    LEFT_PAREN      reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    FUNCTION        reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    FOR             reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    WHILE           reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    IMPORT          reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    CONTINUE        reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    BREAK           reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    PASS            reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    RETURN          reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    NOT_EQUALS      reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    NOT             reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    THIS            reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    IF              reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    BLANK           reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    NULL            reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    TRUE            reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    FALSE           reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    NUMERIC_LITERAL reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    IDENTIFIER      reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    LEFT_CURLY_BRACE reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    STRING_LITERAL  reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    $end            reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    ENDFUNCTION     reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    ENDWHILE        reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    ENDIF           reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    OTHERWISE       reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    ELIF            reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    ENDFOR          reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    COLON           reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    RIGHT_PAREN     reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    COMMA           reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    RIGHT_BOX       reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)
    RIGHT_CURLY_BRACE reduce using rule 7 (function_definition -> FUNCTION expression_identifier parameters COLON ks ENDFUNCTION .)



state 197

    (25) stmt_c_for -> FOR expression_identifier IN expression COLON ks . ENDFOR

    ENDFOR          shift and go to state 202



state 198

    (116) array_operator_missing -> COLON expression COLON expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    RIGHT_BOX       reduce using rule 116 (array_operator_missing -> COLON expression COLON expression .)
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76



state 199

    (115) array_operator_missing -> expression COLON COLON expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    RIGHT_BOX       reduce using rule 115 (array_operator_missing -> expression COLON COLON expression .)
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76



state 200

    (111) array_operator_insides -> expression COLON expression COLON . expression
    (52) expression -> . literal
    (53) expression -> . function_definition
    (54) expression -> . LEFT_PAREN expression RIGHT_PAREN
    (55) expression -> . NOT_EQUALS expression
    (56) expression -> . NOT expression
    (57) expression -> . expression LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> . expression LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> . expression ASSIGN_EQUALS expression
    (60) expression -> . expression DOT_EQUALS expression
    (61) expression -> . expression PLUS_EQUALS expression
    (62) expression -> . expression MINUS_EQUALS expression
    (63) expression -> . expression TIMES_EQUALS expression
    (64) expression -> . expression DIVIDE_EQUALS expression
    (65) expression -> . expression MODULUS_EQUALS expression
    (66) expression -> . expression EXPONENT_EQUALS expression
    (67) expression -> . expression AND_EQUALS expression
    (68) expression -> . expression OR_EQUALS expression
    (69) expression -> . expression DOT expression_identifier
    (70) expression -> . expression PLUS expression
    (71) expression -> . expression MINUS expression
    (72) expression -> . expression TIMES expression
    (73) expression -> . expression DIVIDE expression
    (74) expression -> . expression MODULUS expression
    (75) expression -> . expression EXPONENT expression
    (76) expression -> . expression AND expression
    (77) expression -> . expression OR expression
    (78) expression -> . expression IN expression
    (79) expression -> . expression HAS expression
    (80) expression -> . expression EQUIVALENCE_EQUAL expression
    (81) expression -> . expression COMPARE_GT expression
    (82) expression -> . expression COMPARE_GTET expression
    (83) expression -> . expression COMPARE_LT expression
    (84) expression -> . expression COMPARE_LTET expression
    (85) expression -> . expression_identifier
    (87) expression -> . THIS
    (88) expression -> . expression LEFT_PAREN exp_list RIGHT_PAREN
    (92) literal -> . array_literal
    (93) literal -> . object_literal
    (94) literal -> . literal_string
    (95) literal -> . BLANK
    (96) literal -> . NULL
    (97) literal -> . TRUE
    (98) literal -> . FALSE
    (100) literal -> . NUMERIC_LITERAL
    (101) literal -> . MINUS NUMERIC_LITERAL
    (7) function_definition -> . FUNCTION expression_identifier parameters COLON ks ENDFUNCTION
    (8) function_definition -> . function_anonymous
    (86) expression_identifier -> . IDENTIFIER
    (102) array_literal -> . LEFT_BOX exp_list RIGHT_BOX
    (103) array_literal -> . LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX
    (104) object_literal -> . LEFT_CURLY_BRACE pair_list RIGHT_CURLY_BRACE
    (99) literal_string -> . STRING_LITERAL
    (9) function_anonymous -> . FUNCTION parameters COLON ks ENDFUNCTION

    LEFT_PAREN      shift and go to state 24
    NOT_EQUALS      shift and go to state 5
    NOT             shift and go to state 20
    THIS            shift and go to state 10
    BLANK           shift and go to state 14
    NULL            shift and go to state 36
    TRUE            shift and go to state 3
    FALSE           shift and go to state 32
    NUMERIC_LITERAL shift and go to state 17
    MINUS           shift and go to state 4
    FUNCTION        shift and go to state 15
    IDENTIFIER      shift and go to state 27
    LEFT_BOX        shift and go to state 43
    LEFT_CURLY_BRACE shift and go to state 39
    STRING_LITERAL  shift and go to state 49


    expression_identifier          shift and go to state 1
    function_definition            shift and go to state 53
    array_literal                  shift and go to state 41
    literal_string                 shift and go to state 30
    literal                        shift and go to state 25
    object_literal                 shift and go to state 18
    function_anonymous             shift and go to state 26
    expression                     shift and go to state 203

state 201

    (103) array_literal -> LEFT_BOX expression FOR expression_identifier IN expression . RIGHT_BOX
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    RIGHT_BOX       shift and go to state 204
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76



state 202

    (25) stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .

    FUNCTION        reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    FOR             reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    WHILE           reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    IMPORT          reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    CONTINUE        reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    BREAK           reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    PASS            reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    RETURN          reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    LEFT_PAREN      reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    NOT_EQUALS      reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    NOT             reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    THIS            reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    IF              reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    BLANK           reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    NULL            reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    TRUE            reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    FALSE           reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    NUMERIC_LITERAL reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    MINUS           reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    IDENTIFIER      reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    LEFT_BOX        reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    LEFT_CURLY_BRACE reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    STRING_LITERAL  reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    ELIF            reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    OTHERWISE       reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    ENDIF           reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    $end            reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    ENDFUNCTION     reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    ENDWHILE        reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)
    ENDFOR          reduce using rule 25 (stmt_c_for -> FOR expression_identifier IN expression COLON ks ENDFOR .)



state 203

    (111) array_operator_insides -> expression COLON expression COLON expression .
    (57) expression -> expression . LEFT_BOX array_operator_insides RIGHT_BOX
    (58) expression -> expression . LEFT_BOX array_operator_missing RIGHT_BOX
    (59) expression -> expression . ASSIGN_EQUALS expression
    (60) expression -> expression . DOT_EQUALS expression
    (61) expression -> expression . PLUS_EQUALS expression
    (62) expression -> expression . MINUS_EQUALS expression
    (63) expression -> expression . TIMES_EQUALS expression
    (64) expression -> expression . DIVIDE_EQUALS expression
    (65) expression -> expression . MODULUS_EQUALS expression
    (66) expression -> expression . EXPONENT_EQUALS expression
    (67) expression -> expression . AND_EQUALS expression
    (68) expression -> expression . OR_EQUALS expression
    (69) expression -> expression . DOT expression_identifier
    (70) expression -> expression . PLUS expression
    (71) expression -> expression . MINUS expression
    (72) expression -> expression . TIMES expression
    (73) expression -> expression . DIVIDE expression
    (74) expression -> expression . MODULUS expression
    (75) expression -> expression . EXPONENT expression
    (76) expression -> expression . AND expression
    (77) expression -> expression . OR expression
    (78) expression -> expression . IN expression
    (79) expression -> expression . HAS expression
    (80) expression -> expression . EQUIVALENCE_EQUAL expression
    (81) expression -> expression . COMPARE_GT expression
    (82) expression -> expression . COMPARE_GTET expression
    (83) expression -> expression . COMPARE_LT expression
    (84) expression -> expression . COMPARE_LTET expression
    (88) expression -> expression . LEFT_PAREN exp_list RIGHT_PAREN

    RIGHT_BOX       reduce using rule 111 (array_operator_insides -> expression COLON expression COLON expression .)
    LEFT_BOX        shift and go to state 85
    ASSIGN_EQUALS   shift and go to state 90
    DOT_EQUALS      shift and go to state 67
    PLUS_EQUALS     shift and go to state 89
    MINUS_EQUALS    shift and go to state 73
    TIMES_EQUALS    shift and go to state 81
    DIVIDE_EQUALS   shift and go to state 91
    MODULUS_EQUALS  shift and go to state 79
    EXPONENT_EQUALS shift and go to state 93
    AND_EQUALS      shift and go to state 83
    OR_EQUALS       shift and go to state 84
    DOT             shift and go to state 72
    PLUS            shift and go to state 77
    MINUS           shift and go to state 71
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 80
    MODULUS         shift and go to state 88
    EXPONENT        shift and go to state 75
    AND             shift and go to state 78
    OR              shift and go to state 94
    IN              shift and go to state 86
    HAS             shift and go to state 74
    EQUIVALENCE_EQUAL shift and go to state 68
    COMPARE_GT      shift and go to state 70
    COMPARE_GTET    shift and go to state 92
    COMPARE_LT      shift and go to state 82
    COMPARE_LTET    shift and go to state 69
    LEFT_PAREN      shift and go to state 76



state 204

    (103) array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .

    LEFT_BOX        reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    ASSIGN_EQUALS   reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    DOT_EQUALS      reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    PLUS_EQUALS     reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    MINUS_EQUALS    reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    TIMES_EQUALS    reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    DIVIDE_EQUALS   reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    MODULUS_EQUALS  reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    EXPONENT_EQUALS reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    AND_EQUALS      reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    OR_EQUALS       reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    DOT             reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    PLUS            reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    MINUS           reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    TIMES           reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    DIVIDE          reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    MODULUS         reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    EXPONENT        reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    AND             reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    OR              reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    IN              reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    HAS             reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    EQUIVALENCE_EQUAL reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    COMPARE_GT      reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    COMPARE_GTET    reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    COMPARE_LT      reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    COMPARE_LTET    reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    LEFT_PAREN      reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    RIGHT_BOX       reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    FUNCTION        reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    FOR             reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    WHILE           reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    IMPORT          reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    CONTINUE        reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    BREAK           reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    PASS            reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    RETURN          reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    NOT_EQUALS      reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    NOT             reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    THIS            reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    IF              reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    BLANK           reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    NULL            reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    TRUE            reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    FALSE           reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    NUMERIC_LITERAL reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    IDENTIFIER      reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    LEFT_CURLY_BRACE reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    STRING_LITERAL  reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    $end            reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    ENDFUNCTION     reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    ENDWHILE        reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    ENDIF           reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    OTHERWISE       reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    ELIF            reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    ENDFOR          reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    COLON           reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    RIGHT_PAREN     reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    COMMA           reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)
    RIGHT_CURLY_BRACE reduce using rule 103 (array_literal -> LEFT_BOX expression FOR expression_identifier IN expression RIGHT_BOX .)


