<?xml version="1.0" encoding="UTF-8"?>
<!--

 Author: Joseph Muller <jmullercuber@gmail.com>
 Based on Python highlighting specification file by: Gustavo Giráldez
 Copyright (C) 2003 Gustavo Giráldez <gustavo.giraldez@gmx.net>
 Copyright (C) 2004 Benoît Dejean <TaZForEver@free.fr>
 Copyright (C) 2006 Steve Frécinaux <nud@apinc.org>
 Copyright (C) 2015 Joseph Muller <jmullercuber@gmail.com>

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Library General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Library General Public License for more details.

 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.

-->
<language id="kangascript" _name="KangaScript" version="2.0" _section="Scripts">
  <metadata>
    <property name="mimetypes">text/x-kangascript;application/x-kangascript</property>
    <property name="globs">*.ks</property>
    <property name="line-comment-start">#</property>
  </metadata>

  <styles>
  
    <style id="imports-and-operations"    _name="Imports and Operations"        map-to="def:special-constant"/>
    
    <style id="keyword"           _name="Keyword"               map-to="def:builtin"/>
    
    <style id="multiline-string"  _name="Multiline string"      map-to="def:string"/>
    <style id="string"            _name="String"                map-to="def:string"/>
    <style id="escaped-char"      _name="Escaped Character"     map-to="def:special-char"/>
    <style id="format"            _name="Format"                map-to="def:character"/>
    <style id="string-conversion" _name="string-conversion"/>
    <style id="special-variable"  _name="Special Variable"      map-to="def:keyword"/>
    <style id="boolean"           _name="Boolean"               map-to="def:keyword"/>
    <style id="floating-point"    _name="Floating point number" map-to="def:base-n-integer"/>
    <style id="decimal"           _name="Decimal number"        map-to="def:base-n-integer"/>
    <style id="base-n-integer"    _name="Base-N number"         map-to="def:base-n-integer"/>
    <style id="builtin-constant"  _name="Builtin Constant"      map-to="def:keyword"/>
    
    <style id="builtins"          _name="Builtin Objects"       map-to="def:preprocessor"/>
  </styles>

  <definitions>
    <define-regex id="identifier">[A-Za-z_][A-Za-z_0-9]*</define-regex>
    <define-regex id="number">[0-9]+</define-regex>

    <!-- http://docs.python.org/lib/typesseq-strings.html -->
    <context id="format" style-ref="format" extend-parent="false">
      <match extended="true">
        %                       # leading % sign
        \(\%{identifier}\)?     # mapping key
        [#0\-\ \+]*             # conversion flags
        (\-?\%{number}|\*)?     # minimum field width
        (\.(\-?\%{number}|\*))? # precision
        (hlL)?                  # lentgh modifier
        [diouxXeEfFgGcrs%]      # conversion type
      </match>
    </context>

    <!-- http://docs.python.org/ref/strings.html -->
    <context id="escaped-char" style-ref="escaped-char" extend-parent="true">
      <match extended="true">
        \\(                 # leading backslash
        [\\'"abfnrtv]     | # single escaped char
        N\{[A-Z\ ]+\}     | # named unicode character
        u[0-9A-Fa-f]{4}   | # xxxx - character with 16-bit hex value xxxx
        U[0-9A-Fa-f]{8}   | # xxxxxxxx - character with 32-bit hex value xxxxxxxx
        x[0-9A-Fa-f]{1,2} | # \xhh - character with hex value hh
        [0-7]{1,3}          # \ooo - character with octal value ooo
        )
      </match>
    </context>

    <define-regex id="string-prefix">(u|U)?</define-regex>
    <define-regex id="raw-string-prefix">(r|ur|R|UR|Ur|uR)</define-regex>

    <context id="double-quoted-string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
      <start>\%{string-prefix}"</start>
      <end>"</end>
      <include>
        <context ref="format"/>
        <context ref="escaped-char"/>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="single-quoted-string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
      <start>\%{string-prefix}'</start>
      <end>'</end>
      <include>
        <context ref="format"/>
        <context ref="escaped-char"/>
        <context ref="def:line-continue"/>
      </include>
    </context>


    <context id="double-quoted-raw-string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
      <start>\%{raw-string-prefix}"</start>
      <end>"</end>
      <include>
        <context ref="format"/>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="single-quoted-raw-string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
      <start>\%{raw-string-prefix}'</start>
      <end>'</end>
      <include>
        <context ref="format"/>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="kangascript" class="no-spell-check">
      <include>
        <context ref="def:shebang"/>
        <context ref="def:shell-like-comment"/>

        <context ref="double-quoted-string"/>
        <context ref="single-quoted-string"/>

        <context ref="double-quoted-raw-string"/>
        <context ref="single-quoted-raw-string"/>

        <context id="string-conversion" style-ref="string-conversion" end-at-line-end="true">
          <start>`</start>
          <end>`</end>
          <include>
            <context ref="kangascript"/>
          </include>
        </context>

        <context id="special-variables" style-ref="special-variable">
          <prefix>(?&lt;![\w\.])</prefix>
          <keyword>this</keyword>
        </context>

        <context id="boolean" style-ref="boolean">
          <prefix>(?&lt;![\w\.])</prefix>
          <keyword>false</keyword>
          <keyword>true</keyword>
        </context>

        <define-regex id="float" extended="true">
          ( (\d+)?\.\d+ | \d+\. ) |
          ( (\d+|(\d+)?\.\d+|\d+\.)[eE][+-]?\d+ )
        </define-regex>

        <context id="float" style-ref="floating-point">
          <match>(?&lt;![\w\.])\%{float}(?![\w\.])</match>
        </context>

        <context id="decimal" style-ref="decimal">
          <match>(?&lt;![\w\.])([0-9]+|0)[lL]?(?![\w\.])</match>
        </context>

        <context id="imports-and-operations" style-ref="imports-and-operations">
          <keyword>import</keyword>
          <keyword>in</keyword>
          <keyword>has</keyword>
          <keyword>and</keyword>
          <keyword>or</keyword>
          <keyword>not</keyword>
        </context>

        <context id="keyword" style-ref="keyword">
          <keyword>function</keyword>
          <keyword>endfunction</keyword>
          <keyword>for</keyword>
          <keyword>while</keyword>
          <keyword>continue</keyword>
          <keyword>break</keyword>
          <keyword>pass</keyword>
          <keyword>if</keyword>
          <keyword>elif</keyword>
          <keyword>otherwise</keyword>
          <keyword>endfor</keyword>
          <keyword>endwhile</keyword>
          <keyword>endif</keyword>
          <keyword>return</keyword>
          
        </context>

        <context id="builtin-constants" style-ref="builtin-constant">
          <prefix>(?&lt;![\w\.])</prefix>
          <keyword>blank</keyword>
          <keyword>null</keyword>
        </context>

        <context id="builtins" style-ref="builtins">
          <prefix>(?&lt;![\w\.])</prefix>
          <keyword>print</keyword>
          <keyword>range</keyword>
          <keyword>type</keyword>
        </context>
      </include>
    </context>
  </definitions>
</language>
